# Intrinsics available with gcc on x86, x86_64, arm, arm64, aarch64, sw64
COMMON_INTRINSICS:
    - signature: void * __builtin_apply_args ()
    - signature: void * __builtin_apply (void (*function)(), void *arguments, size_t size)
    - signature: void __builtin_return (void *result)
    - signature: __builtin_va_arg_pack ()
    - signature: size_t __builtin_va_arg_pack_len ()
    - signature: void * __builtin_return_address (unsigned int level)
    - signature: void * __builtin_extract_return_addr (void *addr)
    - signature: void * __builtin_frob_return_address (void *addr)
    - signature: void * __builtin_frame_address (unsigned int level)
    - signature: type __atomic_load_n (type *ptr, int memmodel)
    - signature: void __atomic_load (type *ptr, type *ret, int memmodel)
    - signature: void __atomic_store_n (type *ptr, type val, int memmodel)
    - signature: void __atomic_store (type *ptr, type *val, int memmodel)
    - signature: type __atomic_exchange_n (type *ptr, type val, int memmodel)
    - signature: void __atomic_exchange (type *ptr, type *val, type *ret, int memmodel)
    - signature: bool __atomic_compare_exchange_n (type *ptr, type *expected, type desired, bool weak, int success_memmodel, int failure_memmodel)
    - signature: bool __atomic_compare_exchange (type *ptr, type *expected, type *desired, bool weak, int success_memmodel, int failure_memmodel)
    - signature: type __atomic_add_fetch (type *ptr, type val, int memmodel)
    - signature: type __atomic_sub_fetch (type *ptr, type val, int memmodel)
    - signature: type __atomic_and_fetch (type *ptr, type val, int memmodel)
    - signature: type __atomic_xor_fetch (type *ptr, type val, int memmodel)
    - signature: type __atomic_or_fetch (type *ptr, type val, int memmodel)
    - signature: type __atomic_nand_fetch (type *ptr, type val, int memmodel)
    - signature: type __atomic_fetch_add (type *ptr, type val, int memmodel)
    - signature: type __atomic_fetch_sub (type *ptr, type val, int memmodel)
    - signature: type __atomic_fetch_and (type *ptr, type val, int memmodel)
    - signature: type __atomic_fetch_xor (type *ptr, type val, int memmodel)
    - signature: type __atomic_fetch_or (type *ptr, type val, int memmodel)
    - signature: type __atomic_fetch_nand (type *ptr, type val, int memmodel)
    - signature: bool __atomic_test_and_set (void *ptr, int memmodel)
    - signature: void __atomic_clear (bool *ptr, int memmodel)
    - signature: void __atomic_thread_fence (int memmodel)
    - signature: void __atomic_signal_fence (int memmodel)
    - signature: bool __atomic_always_lock_free (size_t size, void *ptr)
    - signature: bool __atomic_is_lock_free (size_t size, void *ptr)
    - signature: size_t __builtin_object_size (void * ptr, int type)
    - signature: int __builtin_types_compatible_p (type1, type2)
    - signature: type __builtin_choose_expr (const_exp, exp1, exp2)
    - signature: type __builtin_complex (real, imag)
    - signature: int __builtin_constant_p (exp)
    - signature: long __builtin_expect (long exp, long c)
    - signature: void __builtin_trap (void)
    - signature: void __builtin_unreachable (void)
    - signature: void *__builtin_assume_aligned (const void *exp, size_t align, ...)
    - signature: int __builtin_LINE ()
    - signature: int __builtin_FUNCTION ()
    - signature: int __builtin_FILE ()
    - signature: void __builtin___clear_cache (char *begin, char *end)
    - signature: void __builtin_prefetch (const void *addr, ...)
    - signature: double __builtin_huge_val (void)
    - signature: float __builtin_huge_valf (void)
    - signature: long double __builtin_huge_vall (void)
    - signature: int __builtin_fpclassify (int, int, int, int, int, ...)
    - signature: double __builtin_inf (void)
    - signature: _Decimal32 __builtin_infd32 (void)
    - signature: _Decimal64 __builtin_infd64 (void)
    - signature: _Decimal128 __builtin_infd128 (void)
    - signature: float __builtin_inff (void)
    - signature: long double __builtin_infl (void)
    - signature: int __builtin_isinf_sign (...)
    - signature: double __builtin_nan (const char *str)
    - signature: _Decimal32 __builtin_nand32 (const char *str)
    - signature: _Decimal64 __builtin_nand64 (const char *str)
    - signature: _Decimal128 __builtin_nand128 (const char *str)
    - signature: float __builtin_nanf (const char *str)
    - signature: long double __builtin_nanl (const char *str)
    - signature: double __builtin_nans (const char *str)
    - signature: float __builtin_nansf (const char *str)
    - signature: long double __builtin_nansl (const char *str)
    - signature: int __builtin_ffs (unsigned int x)
    - signature: int __builtin_clz (unsigned int x)
    - signature: int __builtin_ctz (unsigned int x)
    - signature: int __builtin_clrsb (int x)
    - signature: int __builtin_parity (unsigned int x)
    - signature: int __builtin_ffsl (unsigned long)
    - signature: int __builtin_clzl (unsigned long)
    - signature: int __builtin_ctzl (unsigned long)
    - signature: int __builtin_clrsbl (long)
    - signature: int __builtin_parityl (unsigned long)
    - signature: int __builtin_ffsll (unsigned long long)
    - signature: int __builtin_clzll (unsigned long long)
    - signature: int __builtin_ctzll (unsigned long long)
    - signature: int __builtin_clrsbll (long long)
    - signature: int __builtin_parityll (unsigned long long)
    - signature: double __builtin_powi (double, int)
    - signature: float __builtin_powif (float, int)
    - signature: long double __builtin_powil (long double, int)
    - signature: uint16_t __builtin_bswap16 (uint16_t x)
    - signature: uint32_t __builtin_bswap32 (uint32_t x)
    - signature: uint64_t __builtin_bswap64 (uint64_t x)
    - signature: void *__builtin_alloca (size_t size)
    - signature: void *__builtin_alloca_with_align (size_t size, size_t alignment)
    - signature: void *__builtin_alloca_with_align_and_max (size_t size, size_t alignment, size_t max_size)
    - signature: bool __builtin_has_attribute (type-or-expression, attribute)
    - signature: type __builtin_speculation_safe_value (type val, type failval)
    - signature: type __builtin_call_with_static_chain (call_exp, pointer_exp)
    - signature: type __builtin_tgmath (functions, arguments)
    - signature: bool __builtin_is_constant_evaluated (void)
    - signature: long __builtin_expect_with_probability (long exp, long c, double probability)
    - signature: void * __builtin_assume_aligned (const void *exp, size_t align, ...)
    - signature: const char * __builtin_FUNCTION ()
    - signature: const char * __builtin_FILE ()
    - signature: void __builtin___clear_cache (void *begin, void *end)
    - signature: size_t __builtin_object_size (const void * ptr, int type)
    - signature: _Floatn __builtin_huge_valfn (void)
    - signature: _Floatnx __builtin_huge_valfnx (void)
    - signature: _Floatn __builtin_inffn (void)
    - signature: _Floatn __builtin_inffnx (void)
    - signature: _Floatn __builtin_nanfn (const char *str)
    - signature: _Floatnx __builtin_nanfnx (const char *str)
    - signature: _Floatn __builtin_nansfn (const char *str)
    - signature: _Floatnx __builtin_nansfnx (const char *str)
    - signature: int __builtin_ffs (int x)
    - signature: int __builtin_ffsl (long)
    - signature: int __builtin_ffsll (long long)
    - signature: uint128_t __builtin_bswap128 (uint128_t x)
    - signature: Pmode __builtin_extend_pointer (void * x)
    - signature: int __builtin_goacc_parlevel_id (int x)
    - signature: int __builtin_goacc_parlevel_size (int x)
    - signature: int __builtin_popcount (unsigned int)
    - signature: int __builtin_popcountl (unsigned long)
    - signature: int __builtin_popcountll (unsigned long long)
    - signature: __sync_synchronize (...)
    - signature: type __sync_lock_test_and_set (type *ptr, type value, ...)
    - signature: void __sync_lock_release (type *ptr, ...)
    - signature: type __sync_fetch_and_add (type *ptr, type value, ...)
    - signature: type __sync_fetch_and_sub (type *ptr, type value, ...)
    - signature: type __sync_fetch_and_or (type *ptr, type value, ...)
    - signature: type __sync_fetch_and_and (type *ptr, type value, ...)
    - signature: type __sync_fetch_and_xor (type *ptr, type value, ...)
    - signature: type __sync_fetch_and_nand (type *ptr, type value, ...)
    - signature: type __sync_add_and_fetch (type *ptr, type value, ...)
    - signature: type __sync_sub_and_fetch (type *ptr, type value, ...)
    - signature: type __sync_or_and_fetch (type *ptr, type value, ...)
    - signature: type __sync_and_and_fetch (type *ptr, type value, ...)
    - signature: type __sync_xor_and_fetch (type *ptr, type value, ...)
    - signature: type __sync_nand_and_fetch (type *ptr, type value, ...)
    - signature: bool __sync_bool_compare_and_swap (type *ptr, type oldval, type newval, ...)
    - signature: type __sync_val_compare_and_swap (type *ptr, type oldval, type newval, ...)

# Intrinsics available with gcc on arm, arm64, aarch64
AARCH64_INTRINSICS:
    - signature: unsigned int __builtin_aarch64_get_fpcr ()
    - signature: void __builtin_aarch64_set_fpcr (unsigned int)
    - signature: unsigned int __builtin_aarch64_get_fpsr ()
    - signature: void __builtin_aarch64_set_fpsr (unsigned int)
    - signature: unsigned long long __builtin_aarch64_get_fpcr64 ()
    - signature: void __builtin_aarch64_set_fpcr64 (unsigned long long)
    - signature: unsigned long long __builtin_aarch64_get_fpsr64 ()
    - signature: void __builtin_aarch64_set_fpsr64 (unsigned long long)
    - signature: int __builtin_arm_getwcgr0 (void)
    - signature: void __builtin_arm_setwcgr0 (int)
    - signature: int __builtin_arm_getwcgr1 (void)
    - signature: void __builtin_arm_setwcgr1 (int)
    - signature: int __builtin_arm_getwcgr2 (void)
    - signature: void __builtin_arm_setwcgr2 (int)
    - signature: int __builtin_arm_getwcgr3 (void)
    - signature: void __builtin_arm_setwcgr3 (int)
    - signature: int __builtin_arm_textrmsb (v8qi, int)
    - signature: int __builtin_arm_textrmsh (v4hi, int)
    - signature: int __builtin_arm_textrmsw (v2si, int)
    - signature: int __builtin_arm_textrmub (v8qi, int)
    - signature: int __builtin_arm_textrmuh (v4hi, int)
    - signature: int __builtin_arm_textrmuw (v2si, int)
    - signature: v8qi __builtin_arm_tinsrb (v8qi, int, int)
    - signature: v4hi __builtin_arm_tinsrh (v4hi, int, int)
    - signature: v2si __builtin_arm_tinsrw (v2si, int, int)
    - signature: long long __builtin_arm_tmia (long long, int, int)
    - signature: long long __builtin_arm_tmiabb (long long, int, int)
    - signature: long long __builtin_arm_tmiabt (long long, int, int)
    - signature: long long __builtin_arm_tmiaph (long long, int, int)
    - signature: long long __builtin_arm_tmiatb (long long, int, int)
    - signature: long long __builtin_arm_tmiatt (long long, int, int)
    - signature: int __builtin_arm_tmovmskb (v8qi)
    - signature: int __builtin_arm_tmovmskh (v4hi)
    - signature: int __builtin_arm_tmovmskw (v2si)
    - signature: long long __builtin_arm_waccb (v8qi)
    - signature: long long __builtin_arm_wacch (v4hi)
    - signature: long long __builtin_arm_waccw (v2si)
    - signature: v8qi __builtin_arm_waddb (v8qi, v8qi)
    - signature: v8qi __builtin_arm_waddbss (v8qi, v8qi)
    - signature: v8qi __builtin_arm_waddbus (v8qi, v8qi)
    - signature: v4hi __builtin_arm_waddh (v4hi, v4hi)
    - signature: v4hi __builtin_arm_waddhss (v4hi, v4hi)
    - signature: v4hi __builtin_arm_waddhus (v4hi, v4hi)
    - signature: v2si __builtin_arm_waddw (v2si, v2si)
    - signature: v2si __builtin_arm_waddwss (v2si, v2si)
    - signature: v2si __builtin_arm_waddwus (v2si, v2si)
    - signature: v8qi __builtin_arm_walign (v8qi, v8qi, int)
    - signature: long long __builtin_arm_wand(long long, long long)
    - signature: long long __builtin_arm_wandn (long long, long long)
    - signature: v8qi __builtin_arm_wavg2b (v8qi, v8qi)
    - signature: v8qi __builtin_arm_wavg2br (v8qi, v8qi)
    - signature: v4hi __builtin_arm_wavg2h (v4hi, v4hi)
    - signature: v4hi __builtin_arm_wavg2hr (v4hi, v4hi)
    - signature: v8qi __builtin_arm_wcmpeqb (v8qi, v8qi)
    - signature: v4hi __builtin_arm_wcmpeqh (v4hi, v4hi)
    - signature: v2si __builtin_arm_wcmpeqw (v2si, v2si)
    - signature: v8qi __builtin_arm_wcmpgtsb (v8qi, v8qi)
    - signature: v4hi __builtin_arm_wcmpgtsh (v4hi, v4hi)
    - signature: v2si __builtin_arm_wcmpgtsw (v2si, v2si)
    - signature: v8qi __builtin_arm_wcmpgtub (v8qi, v8qi)
    - signature: v4hi __builtin_arm_wcmpgtuh (v4hi, v4hi)
    - signature: v2si __builtin_arm_wcmpgtuw (v2si, v2si)
    - signature: long long __builtin_arm_wmacs (long long, v4hi, v4hi)
    - signature: long long __builtin_arm_wmacsz (v4hi, v4hi)
    - signature: long long __builtin_arm_wmacu (long long, v4hi, v4hi)
    - signature: long long __builtin_arm_wmacuz (v4hi, v4hi)
    - signature: v4hi __builtin_arm_wmadds (v4hi, v4hi)
    - signature: v4hi __builtin_arm_wmaddu (v4hi, v4hi)
    - signature: v8qi __builtin_arm_wmaxsb (v8qi, v8qi)
    - signature: v4hi __builtin_arm_wmaxsh (v4hi, v4hi)
    - signature: v2si __builtin_arm_wmaxsw (v2si, v2si)
    - signature: v8qi __builtin_arm_wmaxub (v8qi, v8qi)
    - signature: v4hi __builtin_arm_wmaxuh (v4hi, v4hi)
    - signature: v2si __builtin_arm_wmaxuw (v2si, v2si)
    - signature: v8qi __builtin_arm_wminsb (v8qi, v8qi)
    - signature: v4hi __builtin_arm_wminsh (v4hi, v4hi)
    - signature: v2si __builtin_arm_wminsw (v2si, v2si)
    - signature: v8qi __builtin_arm_wminub (v8qi, v8qi)
    - signature: v4hi __builtin_arm_wminuh (v4hi, v4hi)
    - signature: v2si __builtin_arm_wminuw (v2si, v2si)
    - signature: v4hi __builtin_arm_wmulsm (v4hi, v4hi)
    - signature: v4hi __builtin_arm_wmulul (v4hi, v4hi)
    - signature: v4hi __builtin_arm_wmulum (v4hi, v4hi)
    - signature: long long __builtin_arm_wor (long long, long long)
    - signature: v2si __builtin_arm_wpackdss (long long, long long)
    - signature: v2si __builtin_arm_wpackdus (long long, long long)
    - signature: v8qi __builtin_arm_wpackhss (v4hi, v4hi)
    - signature: v8qi __builtin_arm_wpackhus (v4hi, v4hi)
    - signature: v4hi __builtin_arm_wpackwss (v2si, v2si)
    - signature: v4hi __builtin_arm_wpackwus (v2si, v2si)
    - signature: long long __builtin_arm_wrord (long long, long long)
    - signature: long long __builtin_arm_wrordi (long long, int)
    - signature: v4hi __builtin_arm_wrorh (v4hi, long long)
    - signature: v4hi __builtin_arm_wrorhi (v4hi, int)
    - signature: v2si __builtin_arm_wrorw (v2si, long long)
    - signature: v2si __builtin_arm_wrorwi (v2si, int)
    - signature: v2si __builtin_arm_wsadb (v2si, v8qi, v8qi)
    - signature: v2si __builtin_arm_wsadbz (v8qi, v8qi)
    - signature: v2si __builtin_arm_wsadh (v2si, v4hi, v4hi)
    - signature: v2si __builtin_arm_wsadhz (v4hi, v4hi)
    - signature: v4hi __builtin_arm_wshufh (v4hi, int)
    - signature: long long __builtin_arm_wslld (long long, long long)
    - signature: long long __builtin_arm_wslldi (long long, int)
    - signature: v4hi __builtin_arm_wsllh (v4hi, long long)
    - signature: v4hi __builtin_arm_wsllhi (v4hi, int)
    - signature: v2si __builtin_arm_wsllw (v2si, long long)
    - signature: v2si __builtin_arm_wsllwi (v2si, int)
    - signature: long long __builtin_arm_wsrad (long long, long long)
    - signature: long long __builtin_arm_wsradi (long long, int)
    - signature: v4hi __builtin_arm_wsrah (v4hi, long long)
    - signature: v4hi __builtin_arm_wsrahi (v4hi, int)
    - signature: v2si __builtin_arm_wsraw (v2si, long long)
    - signature: v2si __builtin_arm_wsrawi (v2si, int)
    - signature: long long __builtin_arm_wsrld (long long, long long)
    - signature: long long __builtin_arm_wsrldi (long long, int)
    - signature: v4hi __builtin_arm_wsrlh (v4hi, long long)
    - signature: v4hi __builtin_arm_wsrlhi (v4hi, int)
    - signature: v2si __builtin_arm_wsrlw (v2si, long long)
    - signature: v2si __builtin_arm_wsrlwi (v2si, int)
    - signature: v8qi __builtin_arm_wsubb (v8qi, v8qi)
    - signature: v8qi __builtin_arm_wsubbss (v8qi, v8qi)
    - signature: v8qi __builtin_arm_wsubbus (v8qi, v8qi)
    - signature: v4hi __builtin_arm_wsubh (v4hi, v4hi)
    - signature: v4hi __builtin_arm_wsubhss (v4hi, v4hi)
    - signature: v4hi __builtin_arm_wsubhus (v4hi, v4hi)
    - signature: v2si __builtin_arm_wsubw (v2si, v2si)
    - signature: v2si __builtin_arm_wsubwss (v2si, v2si)
    - signature: v2si __builtin_arm_wsubwus (v2si, v2si)
    - signature: v4hi __builtin_arm_wunpckehsb (v8qi)
    - signature: v2si __builtin_arm_wunpckehsh (v4hi)
    - signature: long long __builtin_arm_wunpckehsw (v2si)
    - signature: v4hi __builtin_arm_wunpckehub (v8qi)
    - signature: v2si __builtin_arm_wunpckehuh (v4hi)
    - signature: long long __builtin_arm_wunpckehuw (v2si)
    - signature: v4hi __builtin_arm_wunpckelsb (v8qi)
    - signature: v2si __builtin_arm_wunpckelsh (v4hi)
    - signature: long long __builtin_arm_wunpckelsw (v2si)
    - signature: v4hi __builtin_arm_wunpckelub (v8qi)
    - signature: v2si __builtin_arm_wunpckeluh (v4hi)
    - signature: long long __builtin_arm_wunpckeluw (v2si)
    - signature: v8qi __builtin_arm_wunpckihb (v8qi, v8qi)
    - signature: v4hi __builtin_arm_wunpckihh (v4hi, v4hi)
    - signature: v2si __builtin_arm_wunpckihw (v2si, v2si)
    - signature: v8qi __builtin_arm_wunpckilb (v8qi, v8qi)
    - signature: v4hi __builtin_arm_wunpckilh (v4hi, v4hi)
    - signature: v2si __builtin_arm_wunpckilw (v2si, v2si)
    - signature: long long __builtin_arm_wxor (long long, long long)
    - signature: long long __builtin_arm_wzero ()
    - signature: uint32x2_t vadd_u32 (uint32x2_t, uint32x2_t)
      help: |+
          built-in intrinsics for the ARM Advanced SIMD extension are available when the -mfpu=neon switch is used
    - signature: uint16x4_t vadd_u16 (uint16x4_t, uint16x4_t)
    - signature: uint8x8_t vadd_u8 (uint8x8_t, uint8x8_t)
    - signature: int32x2_t vadd_s32 (int32x2_t, int32x2_t)
    - signature: int16x4_t vadd_s16 (int16x4_t, int16x4_t)
    - signature: int8x8_t vadd_s8 (int8x8_t, int8x8_t)
    - signature: float32x2_t vadd_f32 (float32x2_t, float32x2_t)
    - signature: uint64x1_t vadd_u64 (uint64x1_t, uint64x1_t)
    - signature: int64x1_t vadd_s64 (int64x1_t, int64x1_t)
    - signature: uint32x4_t vaddq_u32 (uint32x4_t, uint32x4_t)
    - signature: uint16x8_t vaddq_u16 (uint16x8_t, uint16x8_t)
    - signature: uint8x16_t vaddq_u8 (uint8x16_t, uint8x16_t)
    - signature: int32x4_t vaddq_s32 (int32x4_t, int32x4_t)
    - signature: int16x8_t vaddq_s16 (int16x8_t, int16x8_t)
    - signature: int8x16_t vaddq_s8 (int8x16_t, int8x16_t)
    - signature: uint64x2_t vaddq_u64 (uint64x2_t, uint64x2_t)
    - signature: int64x2_t vaddq_s64 (int64x2_t, int64x2_t)
    - signature: float32x4_t vaddq_f32 (float32x4_t, float32x4_t)
    - signature: uint64x2_t vaddl_u32 (uint32x2_t, uint32x2_t)
    - signature: uint32x4_t vaddl_u16 (uint16x4_t, uint16x4_t)
    - signature: uint16x8_t vaddl_u8 (uint8x8_t, uint8x8_t)
    - signature: int64x2_t vaddl_s32 (int32x2_t, int32x2_t)
    - signature: int32x4_t vaddl_s16 (int16x4_t, int16x4_t)
    - signature: int16x8_t vaddl_s8 (int8x8_t, int8x8_t)
    - signature: uint64x2_t vaddw_u32 (uint64x2_t, uint32x2_t)
    - signature: uint32x4_t vaddw_u16 (uint32x4_t, uint16x4_t)
    - signature: uint16x8_t vaddw_u8 (uint16x8_t, uint8x8_t)
    - signature: int64x2_t vaddw_s32 (int64x2_t, int32x2_t)
    - signature: int32x4_t vaddw_s16 (int32x4_t, int16x4_t)
    - signature: int16x8_t vaddw_s8 (int16x8_t, int8x8_t)
    - signature: uint32x2_t vhadd_u32 (uint32x2_t, uint32x2_t)
    - signature: uint16x4_t vhadd_u16 (uint16x4_t, uint16x4_t)
    - signature: uint8x8_t vhadd_u8 (uint8x8_t, uint8x8_t)
    - signature: int32x2_t vhadd_s32 (int32x2_t, int32x2_t)
    - signature: int16x4_t vhadd_s16 (int16x4_t, int16x4_t)
    - signature: int8x8_t vhadd_s8 (int8x8_t, int8x8_t)
    - signature: uint32x4_t vhaddq_u32 (uint32x4_t, uint32x4_t)
    - signature: uint16x8_t vhaddq_u16 (uint16x8_t, uint16x8_t)
    - signature: uint8x16_t vhaddq_u8 (uint8x16_t, uint8x16_t)
    - signature: int32x4_t vhaddq_s32 (int32x4_t, int32x4_t)
    - signature: int16x8_t vhaddq_s16 (int16x8_t, int16x8_t)
    - signature: int8x16_t vhaddq_s8 (int8x16_t, int8x16_t)
    - signature: uint32x2_t vrhadd_u32 (uint32x2_t, uint32x2_t)
    - signature: uint16x4_t vrhadd_u16 (uint16x4_t, uint16x4_t)
    - signature: uint8x8_t vrhadd_u8 (uint8x8_t, uint8x8_t)
    - signature: int32x2_t vrhadd_s32 (int32x2_t, int32x2_t)
    - signature: int16x4_t vrhadd_s16 (int16x4_t, int16x4_t)
    - signature: int8x8_t vrhadd_s8 (int8x8_t, int8x8_t)
    - signature: uint32x4_t vrhaddq_u32 (uint32x4_t, uint32x4_t)
    - signature: uint16x8_t vrhaddq_u16 (uint16x8_t, uint16x8_t)
    - signature: uint8x16_t vrhaddq_u8 (uint8x16_t, uint8x16_t)
    - signature: int32x4_t vrhaddq_s32 (int32x4_t, int32x4_t)
    - signature: int16x8_t vrhaddq_s16 (int16x8_t, int16x8_t)
    - signature: int8x16_t vrhaddq_s8 (int8x16_t, int8x16_t)
    - signature: uint32x2_t vqadd_u32 (uint32x2_t, uint32x2_t)
    - signature: uint16x4_t vqadd_u16 (uint16x4_t, uint16x4_t)
    - signature: uint8x8_t vqadd_u8 (uint8x8_t, uint8x8_t)
    - signature: int32x2_t vqadd_s32 (int32x2_t, int32x2_t)
    - signature: int16x4_t vqadd_s16 (int16x4_t, int16x4_t)
    - signature: int8x8_t vqadd_s8 (int8x8_t, int8x8_t)
    - signature: uint64x1_t vqadd_u64 (uint64x1_t, uint64x1_t)
    - signature: int64x1_t vqadd_s64 (int64x1_t, int64x1_t)
    - signature: uint32x4_t vqaddq_u32 (uint32x4_t, uint32x4_t)
    - signature: uint16x8_t vqaddq_u16 (uint16x8_t, uint16x8_t)
    - signature: uint8x16_t vqaddq_u8 (uint8x16_t, uint8x16_t)
    - signature: int32x4_t vqaddq_s32 (int32x4_t, int32x4_t)
    - signature: int16x8_t vqaddq_s16 (int16x8_t, int16x8_t)
    - signature: int8x16_t vqaddq_s8 (int8x16_t, int8x16_t)
    - signature: uint64x2_t vqaddq_u64 (uint64x2_t, uint64x2_t)
    - signature: int64x2_t vqaddq_s64 (int64x2_t, int64x2_t)
    - signature: uint32x2_t vaddhn_u64 (uint64x2_t, uint64x2_t)
    - signature: uint16x4_t vaddhn_u32 (uint32x4_t, uint32x4_t)
    - signature: uint8x8_t vaddhn_u16 (uint16x8_t, uint16x8_t)
    - signature: int32x2_t vaddhn_s64 (int64x2_t, int64x2_t)
    - signature: int16x4_t vaddhn_s32 (int32x4_t, int32x4_t)
    - signature: int8x8_t vaddhn_s16 (int16x8_t, int16x8_t)
    - signature: uint32x2_t vraddhn_u64 (uint64x2_t, uint64x2_t)
    - signature: uint16x4_t vraddhn_u32 (uint32x4_t, uint32x4_t)
    - signature: uint8x8_t vraddhn_u16 (uint16x8_t, uint16x8_t)
    - signature: int32x2_t vraddhn_s64 (int64x2_t, int64x2_t)
    - signature: int16x4_t vraddhn_s32 (int32x4_t, int32x4_t)
    - signature: int8x8_t vraddhn_s16 (int16x8_t, int16x8_t)
    - signature: uint32x2_t vmul_u32 (uint32x2_t, uint32x2_t)
    - signature: uint16x4_t vmul_u16 (uint16x4_t, uint16x4_t)
    - signature: uint8x8_t vmul_u8 (uint8x8_t, uint8x8_t)
    - signature: int32x2_t vmul_s32 (int32x2_t, int32x2_t)
    - signature: int16x4_t vmul_s16 (int16x4_t, int16x4_t)
    - signature: int8x8_t vmul_s8 (int8x8_t, int8x8_t)
    - signature: float32x2_t vmul_f32 (float32x2_t, float32x2_t)
    - signature: poly8x8_t vmul_p8 (poly8x8_t, poly8x8_t)
    - signature: uint32x4_t vmulq_u32 (uint32x4_t, uint32x4_t)
    - signature: uint16x8_t vmulq_u16 (uint16x8_t, uint16x8_t)
    - signature: uint8x16_t vmulq_u8 (uint8x16_t, uint8x16_t)
    - signature: int32x4_t vmulq_s32 (int32x4_t, int32x4_t)
    - signature: int16x8_t vmulq_s16 (int16x8_t, int16x8_t)
    - signature: int8x16_t vmulq_s8 (int8x16_t, int8x16_t)
    - signature: float32x4_t vmulq_f32 (float32x4_t, float32x4_t)
    - signature: poly8x16_t vmulq_p8 (poly8x16_t, poly8x16_t)
    - signature: int32x2_t vqdmulh_s32 (int32x2_t, int32x2_t)
    - signature: int16x4_t vqdmulh_s16 (int16x4_t, int16x4_t)
    - signature: int32x4_t vqdmulhq_s32 (int32x4_t, int32x4_t)
    - signature: int16x8_t vqdmulhq_s16 (int16x8_t, int16x8_t)
    - signature: int32x2_t vqrdmulh_s32 (int32x2_t, int32x2_t)
    - signature: int16x4_t vqrdmulh_s16 (int16x4_t, int16x4_t)
    - signature: int32x4_t vqrdmulhq_s32 (int32x4_t, int32x4_t)
    - signature: int16x8_t vqrdmulhq_s16 (int16x8_t, int16x8_t)
    - signature: uint64x2_t vmull_u32 (uint32x2_t, uint32x2_t)
    - signature: uint32x4_t vmull_u16 (uint16x4_t, uint16x4_t)
    - signature: uint16x8_t vmull_u8 (uint8x8_t, uint8x8_t)
    - signature: int64x2_t vmull_s32 (int32x2_t, int32x2_t)
    - signature: int32x4_t vmull_s16 (int16x4_t, int16x4_t)
    - signature: int16x8_t vmull_s8 (int8x8_t, int8x8_t)
    - signature: poly16x8_t vmull_p8 (poly8x8_t, poly8x8_t)
    - signature: int64x2_t vqdmull_s32 (int32x2_t, int32x2_t)
    - signature: int32x4_t vqdmull_s16 (int16x4_t, int16x4_t)
    - signature: uint32x2_t vmla_u32 (uint32x2_t, uint32x2_t, uint32x2_t)
    - signature: uint16x4_t vmla_u16 (uint16x4_t, uint16x4_t, uint16x4_t)
    - signature: uint8x8_t vmla_u8 (uint8x8_t, uint8x8_t, uint8x8_t)
    - signature: int32x2_t vmla_s32 (int32x2_t, int32x2_t, int32x2_t)
    - signature: int16x4_t vmla_s16 (int16x4_t, int16x4_t, int16x4_t)
    - signature: int8x8_t vmla_s8 (int8x8_t, int8x8_t, int8x8_t)
    - signature: float32x2_t vmla_f32 (float32x2_t, float32x2_t, float32x2_t)
    - signature: uint32x4_t vmlaq_u32 (uint32x4_t, uint32x4_t, uint32x4_t)
    - signature: uint16x8_t vmlaq_u16 (uint16x8_t, uint16x8_t, uint16x8_t)
    - signature: uint8x16_t vmlaq_u8 (uint8x16_t, uint8x16_t, uint8x16_t)
    - signature: int32x4_t vmlaq_s32 (int32x4_t, int32x4_t, int32x4_t)
    - signature: int16x8_t vmlaq_s16 (int16x8_t, int16x8_t, int16x8_t)
    - signature: int8x16_t vmlaq_s8 (int8x16_t, int8x16_t, int8x16_t)
    - signature: float32x4_t vmlaq_f32 (float32x4_t, float32x4_t, float32x4_t)
    - signature: uint64x2_t vmlal_u32 (uint64x2_t, uint32x2_t, uint32x2_t)
    - signature: uint32x4_t vmlal_u16 (uint32x4_t, uint16x4_t, uint16x4_t)
    - signature: uint16x8_t vmlal_u8 (uint16x8_t, uint8x8_t, uint8x8_t)
    - signature: int64x2_t vmlal_s32 (int64x2_t, int32x2_t, int32x2_t)
    - signature: int32x4_t vmlal_s16 (int32x4_t, int16x4_t, int16x4_t)
    - signature: int16x8_t vmlal_s8 (int16x8_t, int8x8_t, int8x8_t)
    - signature: int64x2_t vqdmlal_s32 (int64x2_t, int32x2_t, int32x2_t)
    - signature: int32x4_t vqdmlal_s16 (int32x4_t, int16x4_t, int16x4_t)
    - signature: uint32x2_t vmls_u32 (uint32x2_t, uint32x2_t, uint32x2_t)
    - signature: uint16x4_t vmls_u16 (uint16x4_t, uint16x4_t, uint16x4_t)
    - signature: uint8x8_t vmls_u8 (uint8x8_t, uint8x8_t, uint8x8_t)
    - signature: int32x2_t vmls_s32 (int32x2_t, int32x2_t, int32x2_t)
    - signature: int16x4_t vmls_s16 (int16x4_t, int16x4_t, int16x4_t)
    - signature: int8x8_t vmls_s8 (int8x8_t, int8x8_t, int8x8_t)
    - signature: float32x2_t vmls_f32 (float32x2_t, float32x2_t, float32x2_t)
    - signature: uint32x4_t vmlsq_u32 (uint32x4_t, uint32x4_t, uint32x4_t)
    - signature: uint16x8_t vmlsq_u16 (uint16x8_t, uint16x8_t, uint16x8_t)
    - signature: uint8x16_t vmlsq_u8 (uint8x16_t, uint8x16_t, uint8x16_t)
    - signature: int32x4_t vmlsq_s32 (int32x4_t, int32x4_t, int32x4_t)
    - signature: int16x8_t vmlsq_s16 (int16x8_t, int16x8_t, int16x8_t)
    - signature: int8x16_t vmlsq_s8 (int8x16_t, int8x16_t, int8x16_t)
    - signature: float32x4_t vmlsq_f32 (float32x4_t, float32x4_t, float32x4_t)
    - signature: uint64x2_t vmlsl_u32 (uint64x2_t, uint32x2_t, uint32x2_t)
    - signature: uint32x4_t vmlsl_u16 (uint32x4_t, uint16x4_t, uint16x4_t)
    - signature: uint16x8_t vmlsl_u8 (uint16x8_t, uint8x8_t, uint8x8_t)
    - signature: int64x2_t vmlsl_s32 (int64x2_t, int32x2_t, int32x2_t)
    - signature: int32x4_t vmlsl_s16 (int32x4_t, int16x4_t, int16x4_t)
    - signature: int16x8_t vmlsl_s8 (int16x8_t, int8x8_t, int8x8_t)
    - signature: int64x2_t vqdmlsl_s32 (int64x2_t, int32x2_t, int32x2_t)
    - signature: int32x4_t vqdmlsl_s16 (int32x4_t, int16x4_t, int16x4_t)
    - signature: float32x2_t vfma_f32 (float32x2_t, float32x2_t, float32x2_t)
    - signature: float32x4_t vfmaq_f32 (float32x4_t, float32x4_t, float32x4_t)
    - signature: float32x2_t vfms_f32 (float32x2_t, float32x2_t, float32x2_t)
    - signature: float32x4_t vfmsq_f32 (float32x4_t, float32x4_t, float32x4_t)
    - signature: float32x2_t vrndn_f32 (float32x2_t)
    - signature: float32x4_t vrndqn_f32 (float32x4_t)
    - signature: float32x2_t vrnda_f32 (float32x2_t)
    - signature: float32x4_t vrndqa_f32 (float32x4_t)
    - signature: float32x2_t vrndp_f32 (float32x2_t)
    - signature: float32x4_t vrndqp_f32 (float32x4_t)
    - signature: float32x2_t vrndm_f32 (float32x2_t)
    - signature: float32x4_t vrndqm_f32 (float32x4_t)
    - signature: float32x2_t vrnd_f32 (float32x2_t)
    - signature: float32x4_t vrndq_f32 (float32x4_t)
    - signature: uint32x2_t vsub_u32 (uint32x2_t, uint32x2_t)
    - signature: uint16x4_t vsub_u16 (uint16x4_t, uint16x4_t)
    - signature: uint8x8_t vsub_u8 (uint8x8_t, uint8x8_t)
    - signature: int32x2_t vsub_s32 (int32x2_t, int32x2_t)
    - signature: int16x4_t vsub_s16 (int16x4_t, int16x4_t)
    - signature: int8x8_t vsub_s8 (int8x8_t, int8x8_t)
    - signature: float32x2_t vsub_f32 (float32x2_t, float32x2_t)
    - signature: uint64x1_t vsub_u64 (uint64x1_t, uint64x1_t)
    - signature: int64x1_t vsub_s64 (int64x1_t, int64x1_t)
    - signature: uint32x4_t vsubq_u32 (uint32x4_t, uint32x4_t)
    - signature: uint16x8_t vsubq_u16 (uint16x8_t, uint16x8_t)
    - signature: uint8x16_t vsubq_u8 (uint8x16_t, uint8x16_t)
    - signature: int32x4_t vsubq_s32 (int32x4_t, int32x4_t)
    - signature: int16x8_t vsubq_s16 (int16x8_t, int16x8_t)
    - signature: int8x16_t vsubq_s8 (int8x16_t, int8x16_t)
    - signature: uint64x2_t vsubq_u64 (uint64x2_t, uint64x2_t)
    - signature: int64x2_t vsubq_s64 (int64x2_t, int64x2_t)
    - signature: float32x4_t vsubq_f32 (float32x4_t, float32x4_t)
    - signature: uint64x2_t vsubl_u32 (uint32x2_t, uint32x2_t)
    - signature: uint32x4_t vsubl_u16 (uint16x4_t, uint16x4_t)
    - signature: uint16x8_t vsubl_u8 (uint8x8_t, uint8x8_t)
    - signature: int64x2_t vsubl_s32 (int32x2_t, int32x2_t)
    - signature: int32x4_t vsubl_s16 (int16x4_t, int16x4_t)
    - signature: int16x8_t vsubl_s8 (int8x8_t, int8x8_t)
    - signature: uint64x2_t vsubw_u32 (uint64x2_t, uint32x2_t)
    - signature: uint32x4_t vsubw_u16 (uint32x4_t, uint16x4_t)
    - signature: uint16x8_t vsubw_u8 (uint16x8_t, uint8x8_t)
    - signature: int64x2_t vsubw_s32 (int64x2_t, int32x2_t)
    - signature: int32x4_t vsubw_s16 (int32x4_t, int16x4_t)
    - signature: int16x8_t vsubw_s8 (int16x8_t, int8x8_t)
    - signature: uint32x2_t vhsub_u32 (uint32x2_t, uint32x2_t)
    - signature: uint16x4_t vhsub_u16 (uint16x4_t, uint16x4_t)
    - signature: uint8x8_t vhsub_u8 (uint8x8_t, uint8x8_t)
    - signature: int32x2_t vhsub_s32 (int32x2_t, int32x2_t)
    - signature: int16x4_t vhsub_s16 (int16x4_t, int16x4_t)
    - signature: int8x8_t vhsub_s8 (int8x8_t, int8x8_t)
    - signature: uint32x4_t vhsubq_u32 (uint32x4_t, uint32x4_t)
    - signature: uint16x8_t vhsubq_u16 (uint16x8_t, uint16x8_t)
    - signature: uint8x16_t vhsubq_u8 (uint8x16_t, uint8x16_t)
    - signature: int32x4_t vhsubq_s32 (int32x4_t, int32x4_t)
    - signature: int16x8_t vhsubq_s16 (int16x8_t, int16x8_t)
    - signature: int8x16_t vhsubq_s8 (int8x16_t, int8x16_t)
    - signature: uint32x2_t vqsub_u32 (uint32x2_t, uint32x2_t)
    - signature: uint16x4_t vqsub_u16 (uint16x4_t, uint16x4_t)
    - signature: uint8x8_t vqsub_u8 (uint8x8_t, uint8x8_t)
    - signature: int32x2_t vqsub_s32 (int32x2_t, int32x2_t)
    - signature: int16x4_t vqsub_s16 (int16x4_t, int16x4_t)
    - signature: int8x8_t vqsub_s8 (int8x8_t, int8x8_t)
    - signature: uint64x1_t vqsub_u64 (uint64x1_t, uint64x1_t)
    - signature: int64x1_t vqsub_s64 (int64x1_t, int64x1_t)
    - signature: uint32x4_t vqsubq_u32 (uint32x4_t, uint32x4_t)
    - signature: uint16x8_t vqsubq_u16 (uint16x8_t, uint16x8_t)
    - signature: uint8x16_t vqsubq_u8 (uint8x16_t, uint8x16_t)
    - signature: int32x4_t vqsubq_s32 (int32x4_t, int32x4_t)
    - signature: int16x8_t vqsubq_s16 (int16x8_t, int16x8_t)
    - signature: int8x16_t vqsubq_s8 (int8x16_t, int8x16_t)
    - signature: uint64x2_t vqsubq_u64 (uint64x2_t, uint64x2_t)
    - signature: int64x2_t vqsubq_s64 (int64x2_t, int64x2_t)
    - signature: uint32x2_t vsubhn_u64 (uint64x2_t, uint64x2_t)
    - signature: uint16x4_t vsubhn_u32 (uint32x4_t, uint32x4_t)
    - signature: uint8x8_t vsubhn_u16 (uint16x8_t, uint16x8_t)
    - signature: int32x2_t vsubhn_s64 (int64x2_t, int64x2_t)
    - signature: int16x4_t vsubhn_s32 (int32x4_t, int32x4_t)
    - signature: int8x8_t vsubhn_s16 (int16x8_t, int16x8_t)
    - signature: uint32x2_t vrsubhn_u64 (uint64x2_t, uint64x2_t)
    - signature: uint16x4_t vrsubhn_u32 (uint32x4_t, uint32x4_t)
    - signature: uint8x8_t vrsubhn_u16 (uint16x8_t, uint16x8_t)
    - signature: int32x2_t vrsubhn_s64 (int64x2_t, int64x2_t)
    - signature: int16x4_t vrsubhn_s32 (int32x4_t, int32x4_t)
    - signature: int8x8_t vrsubhn_s16 (int16x8_t, int16x8_t)
    - signature: uint32x2_t vceq_u32 (uint32x2_t, uint32x2_t)
    - signature: uint16x4_t vceq_u16 (uint16x4_t, uint16x4_t)
    - signature: uint8x8_t vceq_u8 (uint8x8_t, uint8x8_t)
    - signature: uint32x2_t vceq_s32 (int32x2_t, int32x2_t)
    - signature: uint16x4_t vceq_s16 (int16x4_t, int16x4_t)
    - signature: uint8x8_t vceq_s8 (int8x8_t, int8x8_t)
    - signature: uint32x2_t vceq_f32 (float32x2_t, float32x2_t)
    - signature: uint8x8_t vceq_p8 (poly8x8_t, poly8x8_t)
    - signature: uint32x4_t vceqq_u32 (uint32x4_t, uint32x4_t)
    - signature: uint16x8_t vceqq_u16 (uint16x8_t, uint16x8_t)
    - signature: uint8x16_t vceqq_u8 (uint8x16_t, uint8x16_t)
    - signature: uint32x4_t vceqq_s32 (int32x4_t, int32x4_t)
    - signature: uint16x8_t vceqq_s16 (int16x8_t, int16x8_t)
    - signature: uint8x16_t vceqq_s8 (int8x16_t, int8x16_t)
    - signature: uint32x4_t vceqq_f32 (float32x4_t, float32x4_t)
    - signature: uint8x16_t vceqq_p8 (poly8x16_t, poly8x16_t)
    - signature: uint32x2_t vcge_s32 (int32x2_t, int32x2_t)
    - signature: uint16x4_t vcge_s16 (int16x4_t, int16x4_t)
    - signature: uint8x8_t vcge_s8 (int8x8_t, int8x8_t)
    - signature: uint32x2_t vcge_f32 (float32x2_t, float32x2_t)
    - signature: uint32x2_t vcge_u32 (uint32x2_t, uint32x2_t)
    - signature: uint16x4_t vcge_u16 (uint16x4_t, uint16x4_t)
    - signature: uint8x8_t vcge_u8 (uint8x8_t, uint8x8_t)
    - signature: uint32x4_t vcgeq_s32 (int32x4_t, int32x4_t)
    - signature: uint16x8_t vcgeq_s16 (int16x8_t, int16x8_t)
    - signature: uint8x16_t vcgeq_s8 (int8x16_t, int8x16_t)
    - signature: uint32x4_t vcgeq_f32 (float32x4_t, float32x4_t)
    - signature: uint32x4_t vcgeq_u32 (uint32x4_t, uint32x4_t)
    - signature: uint16x8_t vcgeq_u16 (uint16x8_t, uint16x8_t)
    - signature: uint8x16_t vcgeq_u8 (uint8x16_t, uint8x16_t)
    - signature: uint32x2_t vcle_s32 (int32x2_t, int32x2_t)
    - signature: uint16x4_t vcle_s16 (int16x4_t, int16x4_t)
    - signature: uint8x8_t vcle_s8 (int8x8_t, int8x8_t)
    - signature: uint32x2_t vcle_f32 (float32x2_t, float32x2_t)
    - signature: uint32x2_t vcle_u32 (uint32x2_t, uint32x2_t)
    - signature: uint16x4_t vcle_u16 (uint16x4_t, uint16x4_t)
    - signature: uint8x8_t vcle_u8 (uint8x8_t, uint8x8_t)
    - signature: uint32x4_t vcleq_s32 (int32x4_t, int32x4_t)
    - signature: uint16x8_t vcleq_s16 (int16x8_t, int16x8_t)
    - signature: uint8x16_t vcleq_s8 (int8x16_t, int8x16_t)
    - signature: uint32x4_t vcleq_f32 (float32x4_t, float32x4_t)
    - signature: uint32x4_t vcleq_u32 (uint32x4_t, uint32x4_t)
    - signature: uint16x8_t vcleq_u16 (uint16x8_t, uint16x8_t)
    - signature: uint8x16_t vcleq_u8 (uint8x16_t, uint8x16_t)
    - signature: uint32x2_t vcgt_s32 (int32x2_t, int32x2_t)
    - signature: uint16x4_t vcgt_s16 (int16x4_t, int16x4_t)
    - signature: uint8x8_t vcgt_s8 (int8x8_t, int8x8_t)
    - signature: uint32x2_t vcgt_f32 (float32x2_t, float32x2_t)
    - signature: uint32x2_t vcgt_u32 (uint32x2_t, uint32x2_t)
    - signature: uint16x4_t vcgt_u16 (uint16x4_t, uint16x4_t)
    - signature: uint8x8_t vcgt_u8 (uint8x8_t, uint8x8_t)
    - signature: uint32x4_t vcgtq_s32 (int32x4_t, int32x4_t)
    - signature: uint16x8_t vcgtq_s16 (int16x8_t, int16x8_t)
    - signature: uint8x16_t vcgtq_s8 (int8x16_t, int8x16_t)
    - signature: uint32x4_t vcgtq_f32 (float32x4_t, float32x4_t)
    - signature: uint32x4_t vcgtq_u32 (uint32x4_t, uint32x4_t)
    - signature: uint16x8_t vcgtq_u16 (uint16x8_t, uint16x8_t)
    - signature: uint8x16_t vcgtq_u8 (uint8x16_t, uint8x16_t)
    - signature: uint32x2_t vclt_s32 (int32x2_t, int32x2_t)
    - signature: uint16x4_t vclt_s16 (int16x4_t, int16x4_t)
    - signature: uint8x8_t vclt_s8 (int8x8_t, int8x8_t)
    - signature: uint32x2_t vclt_f32 (float32x2_t, float32x2_t)
    - signature: uint32x2_t vclt_u32 (uint32x2_t, uint32x2_t)
    - signature: uint16x4_t vclt_u16 (uint16x4_t, uint16x4_t)
    - signature: uint8x8_t vclt_u8 (uint8x8_t, uint8x8_t)
    - signature: uint32x4_t vcltq_s32 (int32x4_t, int32x4_t)
    - signature: uint16x8_t vcltq_s16 (int16x8_t, int16x8_t)
    - signature: uint8x16_t vcltq_s8 (int8x16_t, int8x16_t)
    - signature: uint32x4_t vcltq_f32 (float32x4_t, float32x4_t)
    - signature: uint32x4_t vcltq_u32 (uint32x4_t, uint32x4_t)
    - signature: uint16x8_t vcltq_u16 (uint16x8_t, uint16x8_t)
    - signature: uint8x16_t vcltq_u8 (uint8x16_t, uint8x16_t)
    - signature: uint32x2_t vcage_f32 (float32x2_t, float32x2_t)
    - signature: uint32x4_t vcageq_f32 (float32x4_t, float32x4_t)
    - signature: uint32x2_t vcale_f32 (float32x2_t, float32x2_t)
    - signature: uint32x4_t vcaleq_f32 (float32x4_t, float32x4_t)
    - signature: uint32x2_t vcagt_f32 (float32x2_t, float32x2_t)
    - signature: uint32x4_t vcagtq_f32 (float32x4_t, float32x4_t)
    - signature: uint32x2_t vcalt_f32 (float32x2_t, float32x2_t)
    - signature: uint32x4_t vcaltq_f32 (float32x4_t, float32x4_t)
    - signature: uint32x2_t vtst_u32 (uint32x2_t, uint32x2_t)
    - signature: uint16x4_t vtst_u16 (uint16x4_t, uint16x4_t)
    - signature: uint8x8_t vtst_u8 (uint8x8_t, uint8x8_t)
    - signature: uint32x2_t vtst_s32 (int32x2_t, int32x2_t)
    - signature: uint16x4_t vtst_s16 (int16x4_t, int16x4_t)
    - signature: uint8x8_t vtst_s8 (int8x8_t, int8x8_t)
    - signature: uint8x8_t vtst_p8 (poly8x8_t, poly8x8_t)
    - signature: uint32x4_t vtstq_u32 (uint32x4_t, uint32x4_t)
    - signature: uint16x8_t vtstq_u16 (uint16x8_t, uint16x8_t)
    - signature: uint8x16_t vtstq_u8 (uint8x16_t, uint8x16_t)
    - signature: uint32x4_t vtstq_s32 (int32x4_t, int32x4_t)
    - signature: uint16x8_t vtstq_s16 (int16x8_t, int16x8_t)
    - signature: uint8x16_t vtstq_s8 (int8x16_t, int8x16_t)
    - signature: uint8x16_t vtstq_p8 (poly8x16_t, poly8x16_t)
    - signature: uint32x2_t vabd_u32 (uint32x2_t, uint32x2_t)
    - signature: uint16x4_t vabd_u16 (uint16x4_t, uint16x4_t)
    - signature: uint8x8_t vabd_u8 (uint8x8_t, uint8x8_t)
    - signature: int32x2_t vabd_s32 (int32x2_t, int32x2_t)
    - signature: int16x4_t vabd_s16 (int16x4_t, int16x4_t)
    - signature: int8x8_t vabd_s8 (int8x8_t, int8x8_t)
    - signature: float32x2_t vabd_f32 (float32x2_t, float32x2_t)
    - signature: uint32x4_t vabdq_u32 (uint32x4_t, uint32x4_t)
    - signature: uint16x8_t vabdq_u16 (uint16x8_t, uint16x8_t)
    - signature: uint8x16_t vabdq_u8 (uint8x16_t, uint8x16_t)
    - signature: int32x4_t vabdq_s32 (int32x4_t, int32x4_t)
    - signature: int16x8_t vabdq_s16 (int16x8_t, int16x8_t)
    - signature: int8x16_t vabdq_s8 (int8x16_t, int8x16_t)
    - signature: float32x4_t vabdq_f32 (float32x4_t, float32x4_t)
    - signature: uint64x2_t vabdl_u32 (uint32x2_t, uint32x2_t)
    - signature: uint32x4_t vabdl_u16 (uint16x4_t, uint16x4_t)
    - signature: uint16x8_t vabdl_u8 (uint8x8_t, uint8x8_t)
    - signature: int64x2_t vabdl_s32 (int32x2_t, int32x2_t)
    - signature: int32x4_t vabdl_s16 (int16x4_t, int16x4_t)
    - signature: int16x8_t vabdl_s8 (int8x8_t, int8x8_t)
    - signature: uint32x2_t vaba_u32 (uint32x2_t, uint32x2_t, uint32x2_t)
    - signature: uint16x4_t vaba_u16 (uint16x4_t, uint16x4_t, uint16x4_t)
    - signature: uint8x8_t vaba_u8 (uint8x8_t, uint8x8_t, uint8x8_t)
    - signature: int32x2_t vaba_s32 (int32x2_t, int32x2_t, int32x2_t)
    - signature: int16x4_t vaba_s16 (int16x4_t, int16x4_t, int16x4_t)
    - signature: int8x8_t vaba_s8 (int8x8_t, int8x8_t, int8x8_t)
    - signature: uint32x4_t vabaq_u32 (uint32x4_t, uint32x4_t, uint32x4_t)
    - signature: uint16x8_t vabaq_u16 (uint16x8_t, uint16x8_t, uint16x8_t)
    - signature: uint8x16_t vabaq_u8 (uint8x16_t, uint8x16_t, uint8x16_t)
    - signature: int32x4_t vabaq_s32 (int32x4_t, int32x4_t, int32x4_t)
    - signature: int16x8_t vabaq_s16 (int16x8_t, int16x8_t, int16x8_t)
    - signature: int8x16_t vabaq_s8 (int8x16_t, int8x16_t, int8x16_t)
    - signature: uint64x2_t vabal_u32 (uint64x2_t, uint32x2_t, uint32x2_t)
    - signature: uint32x4_t vabal_u16 (uint32x4_t, uint16x4_t, uint16x4_t)
    - signature: uint16x8_t vabal_u8 (uint16x8_t, uint8x8_t, uint8x8_t)
    - signature: int64x2_t vabal_s32 (int64x2_t, int32x2_t, int32x2_t)
    - signature: int32x4_t vabal_s16 (int32x4_t, int16x4_t, int16x4_t)
    - signature: int16x8_t vabal_s8 (int16x8_t, int8x8_t, int8x8_t)
    - signature: uint32x2_t vmax_u32 (uint32x2_t, uint32x2_t)
    - signature: uint16x4_t vmax_u16 (uint16x4_t, uint16x4_t)
    - signature: uint8x8_t vmax_u8 (uint8x8_t, uint8x8_t)
    - signature: int32x2_t vmax_s32 (int32x2_t, int32x2_t)
    - signature: int16x4_t vmax_s16 (int16x4_t, int16x4_t)
    - signature: int8x8_t vmax_s8 (int8x8_t, int8x8_t)
    - signature: float32x2_t vmax_f32 (float32x2_t, float32x2_t)
    - signature: uint32x4_t vmaxq_u32 (uint32x4_t, uint32x4_t)
    - signature: uint16x8_t vmaxq_u16 (uint16x8_t, uint16x8_t)
    - signature: uint8x16_t vmaxq_u8 (uint8x16_t, uint8x16_t)
    - signature: int32x4_t vmaxq_s32 (int32x4_t, int32x4_t)
    - signature: int16x8_t vmaxq_s16 (int16x8_t, int16x8_t)
    - signature: int8x16_t vmaxq_s8 (int8x16_t, int8x16_t)
    - signature: float32x4_t vmaxq_f32 (float32x4_t, float32x4_t)
    - signature: uint32x2_t vmin_u32 (uint32x2_t, uint32x2_t)
    - signature: uint16x4_t vmin_u16 (uint16x4_t, uint16x4_t)
    - signature: uint8x8_t vmin_u8 (uint8x8_t, uint8x8_t)
    - signature: int32x2_t vmin_s32 (int32x2_t, int32x2_t)
    - signature: int16x4_t vmin_s16 (int16x4_t, int16x4_t)
    - signature: int8x8_t vmin_s8 (int8x8_t, int8x8_t)
    - signature: float32x2_t vmin_f32 (float32x2_t, float32x2_t)
    - signature: uint32x4_t vminq_u32 (uint32x4_t, uint32x4_t)
    - signature: uint16x8_t vminq_u16 (uint16x8_t, uint16x8_t)
    - signature: uint8x16_t vminq_u8 (uint8x16_t, uint8x16_t)
    - signature: int32x4_t vminq_s32 (int32x4_t, int32x4_t)
    - signature: int16x8_t vminq_s16 (int16x8_t, int16x8_t)
    - signature: int8x16_t vminq_s8 (int8x16_t, int8x16_t)
    - signature: float32x4_t vminq_f32 (float32x4_t, float32x4_t)
    - signature: uint32x2_t vpadd_u32 (uint32x2_t, uint32x2_t)
    - signature: uint16x4_t vpadd_u16 (uint16x4_t, uint16x4_t)
    - signature: uint8x8_t vpadd_u8 (uint8x8_t, uint8x8_t)
    - signature: int32x2_t vpadd_s32 (int32x2_t, int32x2_t)
    - signature: int16x4_t vpadd_s16 (int16x4_t, int16x4_t)
    - signature: int8x8_t vpadd_s8 (int8x8_t, int8x8_t)
    - signature: float32x2_t vpadd_f32 (float32x2_t, float32x2_t)
    - signature: uint64x1_t vpaddl_u32 (uint32x2_t)
    - signature: uint32x2_t vpaddl_u16 (uint16x4_t)
    - signature: uint16x4_t vpaddl_u8 (uint8x8_t)
    - signature: int64x1_t vpaddl_s32 (int32x2_t)
    - signature: int32x2_t vpaddl_s16 (int16x4_t)
    - signature: int16x4_t vpaddl_s8 (int8x8_t)
    - signature: uint64x2_t vpaddlq_u32 (uint32x4_t)
    - signature: uint32x4_t vpaddlq_u16 (uint16x8_t)
    - signature: uint16x8_t vpaddlq_u8 (uint8x16_t)
    - signature: int64x2_t vpaddlq_s32 (int32x4_t)
    - signature: int32x4_t vpaddlq_s16 (int16x8_t)
    - signature: int16x8_t vpaddlq_s8 (int8x16_t)
    - signature: uint64x1_t vpadal_u32 (uint64x1_t, uint32x2_t)
    - signature: uint32x2_t vpadal_u16 (uint32x2_t, uint16x4_t)
    - signature: uint16x4_t vpadal_u8 (uint16x4_t, uint8x8_t)
    - signature: int64x1_t vpadal_s32 (int64x1_t, int32x2_t)
    - signature: int32x2_t vpadal_s16 (int32x2_t, int16x4_t)
    - signature: int16x4_t vpadal_s8 (int16x4_t, int8x8_t)
    - signature: uint64x2_t vpadalq_u32 (uint64x2_t, uint32x4_t)
    - signature: uint32x4_t vpadalq_u16 (uint32x4_t, uint16x8_t)
    - signature: uint16x8_t vpadalq_u8 (uint16x8_t, uint8x16_t)
    - signature: int64x2_t vpadalq_s32 (int64x2_t, int32x4_t)
    - signature: int32x4_t vpadalq_s16 (int32x4_t, int16x8_t)
    - signature: int16x8_t vpadalq_s8 (int16x8_t, int8x16_t)
    - signature: uint32x2_t vpmax_u32 (uint32x2_t, uint32x2_t)
    - signature: uint16x4_t vpmax_u16 (uint16x4_t, uint16x4_t)
    - signature: uint8x8_t vpmax_u8 (uint8x8_t, uint8x8_t)
    - signature: int32x2_t vpmax_s32 (int32x2_t, int32x2_t)
    - signature: int16x4_t vpmax_s16 (int16x4_t, int16x4_t)
    - signature: int8x8_t vpmax_s8 (int8x8_t, int8x8_t)
    - signature: float32x2_t vpmax_f32 (float32x2_t, float32x2_t)
    - signature: uint32x2_t vpmin_u32 (uint32x2_t, uint32x2_t)
    - signature: uint16x4_t vpmin_u16 (uint16x4_t, uint16x4_t)
    - signature: uint8x8_t vpmin_u8 (uint8x8_t, uint8x8_t)
    - signature: int32x2_t vpmin_s32 (int32x2_t, int32x2_t)
    - signature: int16x4_t vpmin_s16 (int16x4_t, int16x4_t)
    - signature: int8x8_t vpmin_s8 (int8x8_t, int8x8_t)
    - signature: float32x2_t vpmin_f32 (float32x2_t, float32x2_t)
    - signature: float32x2_t vrecps_f32 (float32x2_t, float32x2_t)
    - signature: float32x4_t vrecpsq_f32 (float32x4_t, float32x4_t)
    - signature: float32x2_t vrsqrts_f32 (float32x2_t, float32x2_t)
    - signature: float32x4_t vrsqrtsq_f32 (float32x4_t, float32x4_t)
    - signature: uint32x2_t vshl_u32 (uint32x2_t, int32x2_t)
    - signature: uint16x4_t vshl_u16 (uint16x4_t, int16x4_t)
    - signature: uint8x8_t vshl_u8 (uint8x8_t, int8x8_t)
    - signature: int32x2_t vshl_s32 (int32x2_t, int32x2_t)
    - signature: int16x4_t vshl_s16 (int16x4_t, int16x4_t)
    - signature: int8x8_t vshl_s8 (int8x8_t, int8x8_t)
    - signature: uint64x1_t vshl_u64 (uint64x1_t, int64x1_t)
    - signature: int64x1_t vshl_s64 (int64x1_t, int64x1_t)
    - signature: uint32x4_t vshlq_u32 (uint32x4_t, int32x4_t)
    - signature: uint16x8_t vshlq_u16 (uint16x8_t, int16x8_t)
    - signature: uint8x16_t vshlq_u8 (uint8x16_t, int8x16_t)
    - signature: int32x4_t vshlq_s32 (int32x4_t, int32x4_t)
    - signature: int16x8_t vshlq_s16 (int16x8_t, int16x8_t)
    - signature: int8x16_t vshlq_s8 (int8x16_t, int8x16_t)
    - signature: uint64x2_t vshlq_u64 (uint64x2_t, int64x2_t)
    - signature: int64x2_t vshlq_s64 (int64x2_t, int64x2_t)
    - signature: uint32x2_t vrshl_u32 (uint32x2_t, int32x2_t)
    - signature: uint16x4_t vrshl_u16 (uint16x4_t, int16x4_t)
    - signature: uint8x8_t vrshl_u8 (uint8x8_t, int8x8_t)
    - signature: int32x2_t vrshl_s32 (int32x2_t, int32x2_t)
    - signature: int16x4_t vrshl_s16 (int16x4_t, int16x4_t)
    - signature: int8x8_t vrshl_s8 (int8x8_t, int8x8_t)
    - signature: uint64x1_t vrshl_u64 (uint64x1_t, int64x1_t)
    - signature: int64x1_t vrshl_s64 (int64x1_t, int64x1_t)
    - signature: uint32x4_t vrshlq_u32 (uint32x4_t, int32x4_t)
    - signature: uint16x8_t vrshlq_u16 (uint16x8_t, int16x8_t)
    - signature: uint8x16_t vrshlq_u8 (uint8x16_t, int8x16_t)
    - signature: int32x4_t vrshlq_s32 (int32x4_t, int32x4_t)
    - signature: int16x8_t vrshlq_s16 (int16x8_t, int16x8_t)
    - signature: int8x16_t vrshlq_s8 (int8x16_t, int8x16_t)
    - signature: uint64x2_t vrshlq_u64 (uint64x2_t, int64x2_t)
    - signature: int64x2_t vrshlq_s64 (int64x2_t, int64x2_t)
    - signature: uint32x2_t vqshl_u32 (uint32x2_t, int32x2_t)
    - signature: uint16x4_t vqshl_u16 (uint16x4_t, int16x4_t)
    - signature: uint8x8_t vqshl_u8 (uint8x8_t, int8x8_t)
    - signature: int32x2_t vqshl_s32 (int32x2_t, int32x2_t)
    - signature: int16x4_t vqshl_s16 (int16x4_t, int16x4_t)
    - signature: int8x8_t vqshl_s8 (int8x8_t, int8x8_t)
    - signature: uint64x1_t vqshl_u64 (uint64x1_t, int64x1_t)
    - signature: int64x1_t vqshl_s64 (int64x1_t, int64x1_t)
    - signature: uint32x4_t vqshlq_u32 (uint32x4_t, int32x4_t)
    - signature: uint16x8_t vqshlq_u16 (uint16x8_t, int16x8_t)
    - signature: uint8x16_t vqshlq_u8 (uint8x16_t, int8x16_t)
    - signature: int32x4_t vqshlq_s32 (int32x4_t, int32x4_t)
    - signature: int16x8_t vqshlq_s16 (int16x8_t, int16x8_t)
    - signature: int8x16_t vqshlq_s8 (int8x16_t, int8x16_t)
    - signature: uint64x2_t vqshlq_u64 (uint64x2_t, int64x2_t)
    - signature: int64x2_t vqshlq_s64 (int64x2_t, int64x2_t)
    - signature: uint32x2_t vqrshl_u32 (uint32x2_t, int32x2_t)
    - signature: uint16x4_t vqrshl_u16 (uint16x4_t, int16x4_t)
    - signature: uint8x8_t vqrshl_u8 (uint8x8_t, int8x8_t)
    - signature: int32x2_t vqrshl_s32 (int32x2_t, int32x2_t)
    - signature: int16x4_t vqrshl_s16 (int16x4_t, int16x4_t)
    - signature: int8x8_t vqrshl_s8 (int8x8_t, int8x8_t)
    - signature: uint64x1_t vqrshl_u64 (uint64x1_t, int64x1_t)
    - signature: int64x1_t vqrshl_s64 (int64x1_t, int64x1_t)
    - signature: uint32x4_t vqrshlq_u32 (uint32x4_t, int32x4_t)
    - signature: uint16x8_t vqrshlq_u16 (uint16x8_t, int16x8_t)
    - signature: uint8x16_t vqrshlq_u8 (uint8x16_t, int8x16_t)
    - signature: int32x4_t vqrshlq_s32 (int32x4_t, int32x4_t)
    - signature: int16x8_t vqrshlq_s16 (int16x8_t, int16x8_t)
    - signature: int8x16_t vqrshlq_s8 (int8x16_t, int8x16_t)
    - signature: uint64x2_t vqrshlq_u64 (uint64x2_t, int64x2_t)
    - signature: int64x2_t vqrshlq_s64 (int64x2_t, int64x2_t)
    - signature: uint32x2_t vshl_n_u32 (uint32x2_t, const int)
    - signature: uint16x4_t vshl_n_u16 (uint16x4_t, const int)
    - signature: uint8x8_t vshl_n_u8 (uint8x8_t, const int)
    - signature: int32x2_t vshl_n_s32 (int32x2_t, const int)
    - signature: int16x4_t vshl_n_s16 (int16x4_t, const int)
    - signature: int8x8_t vshl_n_s8 (int8x8_t, const int)
    - signature: uint64x1_t vshl_n_u64 (uint64x1_t, const int)
    - signature: int64x1_t vshl_n_s64 (int64x1_t, const int)
    - signature: uint32x4_t vshlq_n_u32 (uint32x4_t, const int)
    - signature: uint16x8_t vshlq_n_u16 (uint16x8_t, const int)
    - signature: uint8x16_t vshlq_n_u8 (uint8x16_t, const int)
    - signature: int32x4_t vshlq_n_s32 (int32x4_t, const int)
    - signature: int16x8_t vshlq_n_s16 (int16x8_t, const int)
    - signature: int8x16_t vshlq_n_s8 (int8x16_t, const int)
    - signature: uint64x2_t vshlq_n_u64 (uint64x2_t, const int)
    - signature: int64x2_t vshlq_n_s64 (int64x2_t, const int)
    - signature: uint32x2_t vqshl_n_u32 (uint32x2_t, const int)
    - signature: uint16x4_t vqshl_n_u16 (uint16x4_t, const int)
    - signature: uint8x8_t vqshl_n_u8 (uint8x8_t, const int)
    - signature: int32x2_t vqshl_n_s32 (int32x2_t, const int)
    - signature: int16x4_t vqshl_n_s16 (int16x4_t, const int)
    - signature: int8x8_t vqshl_n_s8 (int8x8_t, const int)
    - signature: uint64x1_t vqshl_n_u64 (uint64x1_t, const int)
    - signature: int64x1_t vqshl_n_s64 (int64x1_t, const int)
    - signature: uint32x4_t vqshlq_n_u32 (uint32x4_t, const int)
    - signature: uint16x8_t vqshlq_n_u16 (uint16x8_t, const int)
    - signature: uint8x16_t vqshlq_n_u8 (uint8x16_t, const int)
    - signature: int32x4_t vqshlq_n_s32 (int32x4_t, const int)
    - signature: int16x8_t vqshlq_n_s16 (int16x8_t, const int)
    - signature: int8x16_t vqshlq_n_s8 (int8x16_t, const int)
    - signature: uint64x2_t vqshlq_n_u64 (uint64x2_t, const int)
    - signature: int64x2_t vqshlq_n_s64 (int64x2_t, const int)
    - signature: uint64x1_t vqshlu_n_s64 (int64x1_t, const int)
    - signature: uint32x2_t vqshlu_n_s32 (int32x2_t, const int)
    - signature: uint16x4_t vqshlu_n_s16 (int16x4_t, const int)
    - signature: uint8x8_t vqshlu_n_s8 (int8x8_t, const int)
    - signature: uint64x2_t vqshluq_n_s64 (int64x2_t, const int)
    - signature: uint32x4_t vqshluq_n_s32 (int32x4_t, const int)
    - signature: uint16x8_t vqshluq_n_s16 (int16x8_t, const int)
    - signature: uint8x16_t vqshluq_n_s8 (int8x16_t, const int)
    - signature: uint64x2_t vshll_n_u32 (uint32x2_t, const int)
    - signature: uint32x4_t vshll_n_u16 (uint16x4_t, const int)
    - signature: uint16x8_t vshll_n_u8 (uint8x8_t, const int)
    - signature: int64x2_t vshll_n_s32 (int32x2_t, const int)
    - signature: int32x4_t vshll_n_s16 (int16x4_t, const int)
    - signature: int16x8_t vshll_n_s8 (int8x8_t, const int)
    - signature: uint32x2_t vshr_n_u32 (uint32x2_t, const int)
    - signature: uint16x4_t vshr_n_u16 (uint16x4_t, const int)
    - signature: uint8x8_t vshr_n_u8 (uint8x8_t, const int)
    - signature: int32x2_t vshr_n_s32 (int32x2_t, const int)
    - signature: int16x4_t vshr_n_s16 (int16x4_t, const int)
    - signature: int8x8_t vshr_n_s8 (int8x8_t, const int)
    - signature: uint64x1_t vshr_n_u64 (uint64x1_t, const int)
    - signature: int64x1_t vshr_n_s64 (int64x1_t, const int)
    - signature: uint32x4_t vshrq_n_u32 (uint32x4_t, const int)
    - signature: uint16x8_t vshrq_n_u16 (uint16x8_t, const int)
    - signature: uint8x16_t vshrq_n_u8 (uint8x16_t, const int)
    - signature: int32x4_t vshrq_n_s32 (int32x4_t, const int)
    - signature: int16x8_t vshrq_n_s16 (int16x8_t, const int)
    - signature: int8x16_t vshrq_n_s8 (int8x16_t, const int)
    - signature: uint64x2_t vshrq_n_u64 (uint64x2_t, const int)
    - signature: int64x2_t vshrq_n_s64 (int64x2_t, const int)
    - signature: uint32x2_t vrshr_n_u32 (uint32x2_t, const int)
    - signature: uint16x4_t vrshr_n_u16 (uint16x4_t, const int)
    - signature: uint8x8_t vrshr_n_u8 (uint8x8_t, const int)
    - signature: int32x2_t vrshr_n_s32 (int32x2_t, const int)
    - signature: int16x4_t vrshr_n_s16 (int16x4_t, const int)
    - signature: int8x8_t vrshr_n_s8 (int8x8_t, const int)
    - signature: uint64x1_t vrshr_n_u64 (uint64x1_t, const int)
    - signature: int64x1_t vrshr_n_s64 (int64x1_t, const int)
    - signature: uint32x4_t vrshrq_n_u32 (uint32x4_t, const int)
    - signature: uint16x8_t vrshrq_n_u16 (uint16x8_t, const int)
    - signature: uint8x16_t vrshrq_n_u8 (uint8x16_t, const int)
    - signature: int32x4_t vrshrq_n_s32 (int32x4_t, const int)
    - signature: int16x8_t vrshrq_n_s16 (int16x8_t, const int)
    - signature: int8x16_t vrshrq_n_s8 (int8x16_t, const int)
    - signature: uint64x2_t vrshrq_n_u64 (uint64x2_t, const int)
    - signature: int64x2_t vrshrq_n_s64 (int64x2_t, const int)
    - signature: uint32x2_t vshrn_n_u64 (uint64x2_t, const int)
    - signature: uint16x4_t vshrn_n_u32 (uint32x4_t, const int)
    - signature: uint8x8_t vshrn_n_u16 (uint16x8_t, const int)
    - signature: int32x2_t vshrn_n_s64 (int64x2_t, const int)
    - signature: int16x4_t vshrn_n_s32 (int32x4_t, const int)
    - signature: int8x8_t vshrn_n_s16 (int16x8_t, const int)
    - signature: uint32x2_t vrshrn_n_u64 (uint64x2_t, const int)
    - signature: uint16x4_t vrshrn_n_u32 (uint32x4_t, const int)
    - signature: uint8x8_t vrshrn_n_u16 (uint16x8_t, const int)
    - signature: int32x2_t vrshrn_n_s64 (int64x2_t, const int)
    - signature: int16x4_t vrshrn_n_s32 (int32x4_t, const int)
    - signature: int8x8_t vrshrn_n_s16 (int16x8_t, const int)
    - signature: uint32x2_t vqshrn_n_u64 (uint64x2_t, const int)
    - signature: uint16x4_t vqshrn_n_u32 (uint32x4_t, const int)
    - signature: uint8x8_t vqshrn_n_u16 (uint16x8_t, const int)
    - signature: int32x2_t vqshrn_n_s64 (int64x2_t, const int)
    - signature: int16x4_t vqshrn_n_s32 (int32x4_t, const int)
    - signature: int8x8_t vqshrn_n_s16 (int16x8_t, const int)
    - signature: uint32x2_t vqrshrn_n_u64 (uint64x2_t, const int)
    - signature: uint16x4_t vqrshrn_n_u32 (uint32x4_t, const int)
    - signature: uint8x8_t vqrshrn_n_u16 (uint16x8_t, const int)
    - signature: int32x2_t vqrshrn_n_s64 (int64x2_t, const int)
    - signature: int16x4_t vqrshrn_n_s32 (int32x4_t, const int)
    - signature: int8x8_t vqrshrn_n_s16 (int16x8_t, const int)
    - signature: uint32x2_t vqshrun_n_s64 (int64x2_t, const int)
    - signature: uint16x4_t vqshrun_n_s32 (int32x4_t, const int)
    - signature: uint8x8_t vqshrun_n_s16 (int16x8_t, const int)
    - signature: uint32x2_t vqrshrun_n_s64 (int64x2_t, const int)
    - signature: uint16x4_t vqrshrun_n_s32 (int32x4_t, const int)
    - signature: uint8x8_t vqrshrun_n_s16 (int16x8_t, const int)
    - signature: uint32x2_t vsra_n_u32 (uint32x2_t, uint32x2_t, const int)
    - signature: uint16x4_t vsra_n_u16 (uint16x4_t, uint16x4_t, const int)
    - signature: uint8x8_t vsra_n_u8 (uint8x8_t, uint8x8_t, const int)
    - signature: int32x2_t vsra_n_s32 (int32x2_t, int32x2_t, const int)
    - signature: int16x4_t vsra_n_s16 (int16x4_t, int16x4_t, const int)
    - signature: int8x8_t vsra_n_s8 (int8x8_t, int8x8_t, const int)
    - signature: uint64x1_t vsra_n_u64 (uint64x1_t, uint64x1_t, const int)
    - signature: int64x1_t vsra_n_s64 (int64x1_t, int64x1_t, const int)
    - signature: uint32x4_t vsraq_n_u32 (uint32x4_t, uint32x4_t, const int)
    - signature: uint16x8_t vsraq_n_u16 (uint16x8_t, uint16x8_t, const int)
    - signature: uint8x16_t vsraq_n_u8 (uint8x16_t, uint8x16_t, const int)
    - signature: int32x4_t vsraq_n_s32 (int32x4_t, int32x4_t, const int)
    - signature: int16x8_t vsraq_n_s16 (int16x8_t, int16x8_t, const int)
    - signature: int8x16_t vsraq_n_s8 (int8x16_t, int8x16_t, const int)
    - signature: uint64x2_t vsraq_n_u64 (uint64x2_t, uint64x2_t, const int)
    - signature: int64x2_t vsraq_n_s64 (int64x2_t, int64x2_t, const int)
    - signature: uint32x2_t vrsra_n_u32 (uint32x2_t, uint32x2_t, const int)
    - signature: uint16x4_t vrsra_n_u16 (uint16x4_t, uint16x4_t, const int)
    - signature: uint8x8_t vrsra_n_u8 (uint8x8_t, uint8x8_t, const int)
    - signature: int32x2_t vrsra_n_s32 (int32x2_t, int32x2_t, const int)
    - signature: int16x4_t vrsra_n_s16 (int16x4_t, int16x4_t, const int)
    - signature: int8x8_t vrsra_n_s8 (int8x8_t, int8x8_t, const int)
    - signature: uint64x1_t vrsra_n_u64 (uint64x1_t, uint64x1_t, const int)
    - signature: int64x1_t vrsra_n_s64 (int64x1_t, int64x1_t, const int)
    - signature: uint32x4_t vrsraq_n_u32 (uint32x4_t, uint32x4_t, const int)
    - signature: uint16x8_t vrsraq_n_u16 (uint16x8_t, uint16x8_t, const int)
    - signature: uint8x16_t vrsraq_n_u8 (uint8x16_t, uint8x16_t, const int)
    - signature: int32x4_t vrsraq_n_s32 (int32x4_t, int32x4_t, const int)
    - signature: int16x8_t vrsraq_n_s16 (int16x8_t, int16x8_t, const int)
    - signature: int8x16_t vrsraq_n_s8 (int8x16_t, int8x16_t, const int)
    - signature: uint64x2_t vrsraq_n_u64 (uint64x2_t, uint64x2_t, const int)
    - signature: int64x2_t vrsraq_n_s64 (int64x2_t, int64x2_t, const int)
    - signature: uint32x2_t vsri_n_u32 (uint32x2_t, uint32x2_t, const int)
    - signature: uint16x4_t vsri_n_u16 (uint16x4_t, uint16x4_t, const int)
    - signature: uint8x8_t vsri_n_u8 (uint8x8_t, uint8x8_t, const int)
    - signature: int32x2_t vsri_n_s32 (int32x2_t, int32x2_t, const int)
    - signature: int16x4_t vsri_n_s16 (int16x4_t, int16x4_t, const int)
    - signature: int8x8_t vsri_n_s8 (int8x8_t, int8x8_t, const int)
    - signature: uint64x1_t vsri_n_u64 (uint64x1_t, uint64x1_t, const int)
    - signature: int64x1_t vsri_n_s64 (int64x1_t, int64x1_t, const int)
    - signature: poly16x4_t vsri_n_p16 (poly16x4_t, poly16x4_t, const int)
    - signature: poly8x8_t vsri_n_p8 (poly8x8_t, poly8x8_t, const int)
    - signature: uint32x4_t vsriq_n_u32 (uint32x4_t, uint32x4_t, const int)
    - signature: uint16x8_t vsriq_n_u16 (uint16x8_t, uint16x8_t, const int)
    - signature: uint8x16_t vsriq_n_u8 (uint8x16_t, uint8x16_t, const int)
    - signature: int32x4_t vsriq_n_s32 (int32x4_t, int32x4_t, const int)
    - signature: int16x8_t vsriq_n_s16 (int16x8_t, int16x8_t, const int)
    - signature: int8x16_t vsriq_n_s8 (int8x16_t, int8x16_t, const int)
    - signature: uint64x2_t vsriq_n_u64 (uint64x2_t, uint64x2_t, const int)
    - signature: int64x2_t vsriq_n_s64 (int64x2_t, int64x2_t, const int)
    - signature: poly16x8_t vsriq_n_p16 (poly16x8_t, poly16x8_t, const int)
    - signature: poly8x16_t vsriq_n_p8 (poly8x16_t, poly8x16_t, const int)
    - signature: uint32x2_t vsli_n_u32 (uint32x2_t, uint32x2_t, const int)
    - signature: uint16x4_t vsli_n_u16 (uint16x4_t, uint16x4_t, const int)
    - signature: uint8x8_t vsli_n_u8 (uint8x8_t, uint8x8_t, const int)
    - signature: int32x2_t vsli_n_s32 (int32x2_t, int32x2_t, const int)
    - signature: int16x4_t vsli_n_s16 (int16x4_t, int16x4_t, const int)
    - signature: int8x8_t vsli_n_s8 (int8x8_t, int8x8_t, const int)
    - signature: uint64x1_t vsli_n_u64 (uint64x1_t, uint64x1_t, const int)
    - signature: int64x1_t vsli_n_s64 (int64x1_t, int64x1_t, const int)
    - signature: poly16x4_t vsli_n_p16 (poly16x4_t, poly16x4_t, const int)
    - signature: poly8x8_t vsli_n_p8 (poly8x8_t, poly8x8_t, const int)
    - signature: uint32x4_t vsliq_n_u32 (uint32x4_t, uint32x4_t, const int)
    - signature: uint16x8_t vsliq_n_u16 (uint16x8_t, uint16x8_t, const int)
    - signature: uint8x16_t vsliq_n_u8 (uint8x16_t, uint8x16_t, const int)
    - signature: int32x4_t vsliq_n_s32 (int32x4_t, int32x4_t, const int)
    - signature: int16x8_t vsliq_n_s16 (int16x8_t, int16x8_t, const int)
    - signature: int8x16_t vsliq_n_s8 (int8x16_t, int8x16_t, const int)
    - signature: uint64x2_t vsliq_n_u64 (uint64x2_t, uint64x2_t, const int)
    - signature: int64x2_t vsliq_n_s64 (int64x2_t, int64x2_t, const int)
    - signature: poly16x8_t vsliq_n_p16 (poly16x8_t, poly16x8_t, const int)
    - signature: poly8x16_t vsliq_n_p8 (poly8x16_t, poly8x16_t, const int)
    - signature: float32x2_t vabs_f32 (float32x2_t)
    - signature: int32x2_t vabs_s32 (int32x2_t)
    - signature: int16x4_t vabs_s16 (int16x4_t)
    - signature: int8x8_t vabs_s8 (int8x8_t)
    - signature: float32x4_t vabsq_f32 (float32x4_t)
    - signature: int32x4_t vabsq_s32 (int32x4_t)
    - signature: int16x8_t vabsq_s16 (int16x8_t)
    - signature: int8x16_t vabsq_s8 (int8x16_t)
    - signature: int32x2_t vqabs_s32 (int32x2_t)
    - signature: int16x4_t vqabs_s16 (int16x4_t)
    - signature: int8x8_t vqabs_s8 (int8x8_t)
    - signature: int32x4_t vqabsq_s32 (int32x4_t)
    - signature: int16x8_t vqabsq_s16 (int16x8_t)
    - signature: int8x16_t vqabsq_s8 (int8x16_t)
    - signature: float32x2_t vneg_f32 (float32x2_t)
    - signature: int32x2_t vneg_s32 (int32x2_t)
    - signature: int16x4_t vneg_s16 (int16x4_t)
    - signature: int8x8_t vneg_s8 (int8x8_t)
    - signature: float32x4_t vnegq_f32 (float32x4_t)
    - signature: int32x4_t vnegq_s32 (int32x4_t)
    - signature: int16x8_t vnegq_s16 (int16x8_t)
    - signature: int8x16_t vnegq_s8 (int8x16_t)
    - signature: int32x2_t vqneg_s32 (int32x2_t)
    - signature: int16x4_t vqneg_s16 (int16x4_t)
    - signature: int8x8_t vqneg_s8 (int8x8_t)
    - signature: int32x4_t vqnegq_s32 (int32x4_t)
    - signature: int16x8_t vqnegq_s16 (int16x8_t)
    - signature: int8x16_t vqnegq_s8 (int8x16_t)
    - signature: uint32x2_t vmvn_u32 (uint32x2_t)
    - signature: uint16x4_t vmvn_u16 (uint16x4_t)
    - signature: uint8x8_t vmvn_u8 (uint8x8_t)
    - signature: int32x2_t vmvn_s32 (int32x2_t)
    - signature: int16x4_t vmvn_s16 (int16x4_t)
    - signature: int8x8_t vmvn_s8 (int8x8_t)
    - signature: poly8x8_t vmvn_p8 (poly8x8_t)
    - signature: uint32x4_t vmvnq_u32 (uint32x4_t)
    - signature: uint16x8_t vmvnq_u16 (uint16x8_t)
    - signature: uint8x16_t vmvnq_u8 (uint8x16_t)
    - signature: int32x4_t vmvnq_s32 (int32x4_t)
    - signature: int16x8_t vmvnq_s16 (int16x8_t)
    - signature: int8x16_t vmvnq_s8 (int8x16_t)
    - signature: poly8x16_t vmvnq_p8 (poly8x16_t)
    - signature: int32x2_t vcls_s32 (int32x2_t)
    - signature: int16x4_t vcls_s16 (int16x4_t)
    - signature: int8x8_t vcls_s8 (int8x8_t)
    - signature: int32x4_t vclsq_s32 (int32x4_t)
    - signature: int16x8_t vclsq_s16 (int16x8_t)
    - signature: int8x16_t vclsq_s8 (int8x16_t)
    - signature: uint32x2_t vclz_u32 (uint32x2_t)
    - signature: uint16x4_t vclz_u16 (uint16x4_t)
    - signature: uint8x8_t vclz_u8 (uint8x8_t)
    - signature: int32x2_t vclz_s32 (int32x2_t)
    - signature: int16x4_t vclz_s16 (int16x4_t)
    - signature: int8x8_t vclz_s8 (int8x8_t)
    - signature: uint32x4_t vclzq_u32 (uint32x4_t)
    - signature: uint16x8_t vclzq_u16 (uint16x8_t)
    - signature: uint8x16_t vclzq_u8 (uint8x16_t)
    - signature: int32x4_t vclzq_s32 (int32x4_t)
    - signature: int16x8_t vclzq_s16 (int16x8_t)
    - signature: int8x16_t vclzq_s8 (int8x16_t)
    - signature: uint8x8_t vcnt_u8 (uint8x8_t)
    - signature: int8x8_t vcnt_s8 (int8x8_t)
    - signature: poly8x8_t vcnt_p8 (poly8x8_t)
    - signature: uint8x16_t vcntq_u8 (uint8x16_t)
    - signature: int8x16_t vcntq_s8 (int8x16_t)
    - signature: poly8x16_t vcntq_p8 (poly8x16_t)
    - signature: float32x2_t vrecpe_f32 (float32x2_t)
    - signature: uint32x2_t vrecpe_u32 (uint32x2_t)
    - signature: float32x4_t vrecpeq_f32 (float32x4_t)
    - signature: uint32x4_t vrecpeq_u32 (uint32x4_t)
    - signature: float32x2_t vrsqrte_f32 (float32x2_t)
    - signature: uint32x2_t vrsqrte_u32 (uint32x2_t)
    - signature: float32x4_t vrsqrteq_f32 (float32x4_t)
    - signature: uint32x4_t vrsqrteq_u32 (uint32x4_t)
    - signature: uint32_t vget_lane_u32 (uint32x2_t, const int)
    - signature: uint16_t vget_lane_u16 (uint16x4_t, const int)
    - signature: uint8_t vget_lane_u8 (uint8x8_t, const int)
    - signature: int32_t vget_lane_s32 (int32x2_t, const int)
    - signature: int16_t vget_lane_s16 (int16x4_t, const int)
    - signature: int8_t vget_lane_s8 (int8x8_t, const int)
    - signature: float32_t vget_lane_f32 (float32x2_t, const int)
    - signature: poly16_t vget_lane_p16 (poly16x4_t, const int)
    - signature: poly8_t vget_lane_p8 (poly8x8_t, const int)
    - signature: uint64_t vget_lane_u64 (uint64x1_t, const int)
    - signature: int64_t vget_lane_s64 (int64x1_t, const int)
    - signature: uint32_t vgetq_lane_u32 (uint32x4_t, const int)
    - signature: uint16_t vgetq_lane_u16 (uint16x8_t, const int)
    - signature: uint8_t vgetq_lane_u8 (uint8x16_t, const int)
    - signature: int32_t vgetq_lane_s32 (int32x4_t, const int)
    - signature: int16_t vgetq_lane_s16 (int16x8_t, const int)
    - signature: int8_t vgetq_lane_s8 (int8x16_t, const int)
    - signature: float32_t vgetq_lane_f32 (float32x4_t, const int)
    - signature: poly16_t vgetq_lane_p16 (poly16x8_t, const int)
    - signature: poly8_t vgetq_lane_p8 (poly8x16_t, const int)
    - signature: uint64_t vgetq_lane_u64 (uint64x2_t, const int)
    - signature: int64_t vgetq_lane_s64 (int64x2_t, const int)
    - signature: uint32x2_t vset_lane_u32 (uint32_t, uint32x2_t, const int)
    - signature: uint16x4_t vset_lane_u16 (uint16_t, uint16x4_t, const int)
    - signature: uint8x8_t vset_lane_u8 (uint8_t, uint8x8_t, const int)
    - signature: int32x2_t vset_lane_s32 (int32_t, int32x2_t, const int)
    - signature: int16x4_t vset_lane_s16 (int16_t, int16x4_t, const int)
    - signature: int8x8_t vset_lane_s8 (int8_t, int8x8_t, const int)
    - signature: float32x2_t vset_lane_f32 (float32_t, float32x2_t, const int)
    - signature: poly16x4_t vset_lane_p16 (poly16_t, poly16x4_t, const int)
    - signature: poly8x8_t vset_lane_p8 (poly8_t, poly8x8_t, const int)
    - signature: uint64x1_t vset_lane_u64 (uint64_t, uint64x1_t, const int)
    - signature: int64x1_t vset_lane_s64 (int64_t, int64x1_t, const int)
    - signature: uint32x4_t vsetq_lane_u32 (uint32_t, uint32x4_t, const int)
    - signature: uint16x8_t vsetq_lane_u16 (uint16_t, uint16x8_t, const int)
    - signature: uint8x16_t vsetq_lane_u8 (uint8_t, uint8x16_t, const int)
    - signature: int32x4_t vsetq_lane_s32 (int32_t, int32x4_t, const int)
    - signature: int16x8_t vsetq_lane_s16 (int16_t, int16x8_t, const int)
    - signature: int8x16_t vsetq_lane_s8 (int8_t, int8x16_t, const int)
    - signature: float32x4_t vsetq_lane_f32 (float32_t, float32x4_t, const int)
    - signature: poly16x8_t vsetq_lane_p16 (poly16_t, poly16x8_t, const int)
    - signature: poly8x16_t vsetq_lane_p8 (poly8_t, poly8x16_t, const int)
    - signature: uint64x2_t vsetq_lane_u64 (uint64_t, uint64x2_t, const int)
    - signature: int64x2_t vsetq_lane_s64 (int64_t, int64x2_t, const int)
    - signature: uint32x2_t vcreate_u32 (uint64_t)
    - signature: uint16x4_t vcreate_u16 (uint64_t)
    - signature: uint8x8_t vcreate_u8 (uint64_t)
    - signature: int32x2_t vcreate_s32 (uint64_t)
    - signature: int16x4_t vcreate_s16 (uint64_t)
    - signature: int8x8_t vcreate_s8 (uint64_t)
    - signature: uint64x1_t vcreate_u64 (uint64_t)
    - signature: int64x1_t vcreate_s64 (uint64_t)
    - signature: float32x2_t vcreate_f32 (uint64_t)
    - signature: poly16x4_t vcreate_p16 (uint64_t)
    - signature: poly8x8_t vcreate_p8 (uint64_t)
    - signature: uint32x2_t vdup_n_u32 (uint32_t)
    - signature: uint16x4_t vdup_n_u16 (uint16_t)
    - signature: uint8x8_t vdup_n_u8 (uint8_t)
    - signature: int32x2_t vdup_n_s32 (int32_t)
    - signature: int16x4_t vdup_n_s16 (int16_t)
    - signature: int8x8_t vdup_n_s8 (int8_t)
    - signature: float32x2_t vdup_n_f32 (float32_t)
    - signature: poly16x4_t vdup_n_p16 (poly16_t)
    - signature: poly8x8_t vdup_n_p8 (poly8_t)
    - signature: uint64x1_t vdup_n_u64 (uint64_t)
    - signature: int64x1_t vdup_n_s64 (int64_t)
    - signature: uint32x4_t vdupq_n_u32 (uint32_t)
    - signature: uint16x8_t vdupq_n_u16 (uint16_t)
    - signature: uint8x16_t vdupq_n_u8 (uint8_t)
    - signature: int32x4_t vdupq_n_s32 (int32_t)
    - signature: int16x8_t vdupq_n_s16 (int16_t)
    - signature: int8x16_t vdupq_n_s8 (int8_t)
    - signature: float32x4_t vdupq_n_f32 (float32_t)
    - signature: poly16x8_t vdupq_n_p16 (poly16_t)
    - signature: poly8x16_t vdupq_n_p8 (poly8_t)
    - signature: uint64x2_t vdupq_n_u64 (uint64_t)
    - signature: int64x2_t vdupq_n_s64 (int64_t)
    - signature: uint32x2_t vmov_n_u32 (uint32_t)
    - signature: uint16x4_t vmov_n_u16 (uint16_t)
    - signature: uint8x8_t vmov_n_u8 (uint8_t)
    - signature: int32x2_t vmov_n_s32 (int32_t)
    - signature: int16x4_t vmov_n_s16 (int16_t)
    - signature: int8x8_t vmov_n_s8 (int8_t)
    - signature: float32x2_t vmov_n_f32 (float32_t)
    - signature: poly16x4_t vmov_n_p16 (poly16_t)
    - signature: poly8x8_t vmov_n_p8 (poly8_t)
    - signature: uint64x1_t vmov_n_u64 (uint64_t)
    - signature: int64x1_t vmov_n_s64 (int64_t)
    - signature: uint32x4_t vmovq_n_u32 (uint32_t)
    - signature: uint16x8_t vmovq_n_u16 (uint16_t)
    - signature: uint8x16_t vmovq_n_u8 (uint8_t)
    - signature: int32x4_t vmovq_n_s32 (int32_t)
    - signature: int16x8_t vmovq_n_s16 (int16_t)
    - signature: int8x16_t vmovq_n_s8 (int8_t)
    - signature: float32x4_t vmovq_n_f32 (float32_t)
    - signature: poly16x8_t vmovq_n_p16 (poly16_t)
    - signature: poly8x16_t vmovq_n_p8 (poly8_t)
    - signature: uint64x2_t vmovq_n_u64 (uint64_t)
    - signature: int64x2_t vmovq_n_s64 (int64_t)
    - signature: uint32x2_t vdup_lane_u32 (uint32x2_t, const int)
    - signature: uint16x4_t vdup_lane_u16 (uint16x4_t, const int)
    - signature: uint8x8_t vdup_lane_u8 (uint8x8_t, const int)
    - signature: int32x2_t vdup_lane_s32 (int32x2_t, const int)
    - signature: int16x4_t vdup_lane_s16 (int16x4_t, const int)
    - signature: int8x8_t vdup_lane_s8 (int8x8_t, const int)
    - signature: float32x2_t vdup_lane_f32 (float32x2_t, const int)
    - signature: poly16x4_t vdup_lane_p16 (poly16x4_t, const int)
    - signature: poly8x8_t vdup_lane_p8 (poly8x8_t, const int)
    - signature: uint64x1_t vdup_lane_u64 (uint64x1_t, const int)
    - signature: int64x1_t vdup_lane_s64 (int64x1_t, const int)
    - signature: uint32x4_t vdupq_lane_u32 (uint32x2_t, const int)
    - signature: uint16x8_t vdupq_lane_u16 (uint16x4_t, const int)
    - signature: uint8x16_t vdupq_lane_u8 (uint8x8_t, const int)
    - signature: int32x4_t vdupq_lane_s32 (int32x2_t, const int)
    - signature: int16x8_t vdupq_lane_s16 (int16x4_t, const int)
    - signature: int8x16_t vdupq_lane_s8 (int8x8_t, const int)
    - signature: float32x4_t vdupq_lane_f32 (float32x2_t, const int)
    - signature: poly16x8_t vdupq_lane_p16 (poly16x4_t, const int)
    - signature: poly8x16_t vdupq_lane_p8 (poly8x8_t, const int)
    - signature: uint64x2_t vdupq_lane_u64 (uint64x1_t, const int)
    - signature: int64x2_t vdupq_lane_s64 (int64x1_t, const int)
    - signature: uint32x4_t vcombine_u32 (uint32x2_t, uint32x2_t)
    - signature: uint16x8_t vcombine_u16 (uint16x4_t, uint16x4_t)
    - signature: uint8x16_t vcombine_u8 (uint8x8_t, uint8x8_t)
    - signature: int32x4_t vcombine_s32 (int32x2_t, int32x2_t)
    - signature: int16x8_t vcombine_s16 (int16x4_t, int16x4_t)
    - signature: int8x16_t vcombine_s8 (int8x8_t, int8x8_t)
    - signature: uint64x2_t vcombine_u64 (uint64x1_t, uint64x1_t)
    - signature: int64x2_t vcombine_s64 (int64x1_t, int64x1_t)
    - signature: float32x4_t vcombine_f32 (float32x2_t, float32x2_t)
    - signature: poly16x8_t vcombine_p16 (poly16x4_t, poly16x4_t)
    - signature: poly8x16_t vcombine_p8 (poly8x8_t, poly8x8_t)
    - signature: uint32x2_t vget_high_u32 (uint32x4_t)
    - signature: uint16x4_t vget_high_u16 (uint16x8_t)
    - signature: uint8x8_t vget_high_u8 (uint8x16_t)
    - signature: int32x2_t vget_high_s32 (int32x4_t)
    - signature: int16x4_t vget_high_s16 (int16x8_t)
    - signature: int8x8_t vget_high_s8 (int8x16_t)
    - signature: uint64x1_t vget_high_u64 (uint64x2_t)
    - signature: int64x1_t vget_high_s64 (int64x2_t)
    - signature: float32x2_t vget_high_f32 (float32x4_t)
    - signature: poly16x4_t vget_high_p16 (poly16x8_t)
    - signature: poly8x8_t vget_high_p8 (poly8x16_t)
    - signature: uint32x2_t vget_low_u32 (uint32x4_t)
    - signature: uint16x4_t vget_low_u16 (uint16x8_t)
    - signature: uint8x8_t vget_low_u8 (uint8x16_t)
    - signature: int32x2_t vget_low_s32 (int32x4_t)
    - signature: int16x4_t vget_low_s16 (int16x8_t)
    - signature: int8x8_t vget_low_s8 (int8x16_t)
    - signature: float32x2_t vget_low_f32 (float32x4_t)
    - signature: poly16x4_t vget_low_p16 (poly16x8_t)
    - signature: poly8x8_t vget_low_p8 (poly8x16_t)
    - signature: uint64x1_t vget_low_u64 (uint64x2_t)
    - signature: int64x1_t vget_low_s64 (int64x2_t)
    - signature: float32x2_t vcvt_f32_u32 (uint32x2_t)
    - signature: float32x2_t vcvt_f32_s32 (int32x2_t)
    - signature: uint32x2_t vcvt_u32_f32 (float32x2_t)
    - signature: int32x2_t vcvt_s32_f32 (float32x2_t)
    - signature: float32x4_t vcvtq_f32_u32 (uint32x4_t)
    - signature: float32x4_t vcvtq_f32_s32 (int32x4_t)
    - signature: uint32x4_t vcvtq_u32_f32 (float32x4_t)
    - signature: int32x4_t vcvtq_s32_f32 (float32x4_t)
    - signature: float32x2_t vcvt_n_f32_u32 (uint32x2_t, const int)
    - signature: float32x2_t vcvt_n_f32_s32 (int32x2_t, const int)
    - signature: uint32x2_t vcvt_n_u32_f32 (float32x2_t, const int)
    - signature: int32x2_t vcvt_n_s32_f32 (float32x2_t, const int)
    - signature: float32x4_t vcvtq_n_f32_u32 (uint32x4_t, const int)
    - signature: float32x4_t vcvtq_n_f32_s32 (int32x4_t, const int)
    - signature: uint32x4_t vcvtq_n_u32_f32 (float32x4_t, const int)
    - signature: int32x4_t vcvtq_n_s32_f32 (float32x4_t, const int)
    - signature: uint32x2_t vmovn_u64 (uint64x2_t)
    - signature: uint16x4_t vmovn_u32 (uint32x4_t)
    - signature: uint8x8_t vmovn_u16 (uint16x8_t)
    - signature: int32x2_t vmovn_s64 (int64x2_t)
    - signature: int16x4_t vmovn_s32 (int32x4_t)
    - signature: int8x8_t vmovn_s16 (int16x8_t)
    - signature: uint32x2_t vqmovn_u64 (uint64x2_t)
    - signature: uint16x4_t vqmovn_u32 (uint32x4_t)
    - signature: uint8x8_t vqmovn_u16 (uint16x8_t)
    - signature: int32x2_t vqmovn_s64 (int64x2_t)
    - signature: int16x4_t vqmovn_s32 (int32x4_t)
    - signature: int8x8_t vqmovn_s16 (int16x8_t)
    - signature: uint32x2_t vqmovun_s64 (int64x2_t)
    - signature: uint16x4_t vqmovun_s32 (int32x4_t)
    - signature: uint8x8_t vqmovun_s16 (int16x8_t)
    - signature: uint64x2_t vmovl_u32 (uint32x2_t)
    - signature: uint32x4_t vmovl_u16 (uint16x4_t)
    - signature: uint16x8_t vmovl_u8 (uint8x8_t)
    - signature: int64x2_t vmovl_s32 (int32x2_t)
    - signature: int32x4_t vmovl_s16 (int16x4_t)
    - signature: int16x8_t vmovl_s8 (int8x8_t)
    - signature: poly8x8_t vtbl1_p8 (poly8x8_t, uint8x8_t)
    - signature: int8x8_t vtbl1_s8 (int8x8_t, int8x8_t)
    - signature: uint8x8_t vtbl1_u8 (uint8x8_t, uint8x8_t)
    - signature: poly8x8_t vtbl2_p8 (poly8x8x2_t, uint8x8_t)
    - signature: int8x8_t vtbl2_s8 (int8x8x2_t, int8x8_t)
    - signature: uint8x8_t vtbl2_u8 (uint8x8x2_t, uint8x8_t)
    - signature: poly8x8_t vtbl3_p8 (poly8x8x3_t, uint8x8_t)
    - signature: int8x8_t vtbl3_s8 (int8x8x3_t, int8x8_t)
    - signature: uint8x8_t vtbl3_u8 (uint8x8x3_t, uint8x8_t)
    - signature: poly8x8_t vtbl4_p8 (poly8x8x4_t, uint8x8_t)
    - signature: int8x8_t vtbl4_s8 (int8x8x4_t, int8x8_t)
    - signature: uint8x8_t vtbl4_u8 (uint8x8x4_t, uint8x8_t)
    - signature: poly8x8_t vtbx1_p8 (poly8x8_t, poly8x8_t, uint8x8_t)
    - signature: int8x8_t vtbx1_s8 (int8x8_t, int8x8_t, int8x8_t)
    - signature: uint8x8_t vtbx1_u8 (uint8x8_t, uint8x8_t, uint8x8_t)
    - signature: poly8x8_t vtbx2_p8 (poly8x8_t, poly8x8x2_t, uint8x8_t)
    - signature: int8x8_t vtbx2_s8 (int8x8_t, int8x8x2_t, int8x8_t)
    - signature: uint8x8_t vtbx2_u8 (uint8x8_t, uint8x8x2_t, uint8x8_t)
    - signature: poly8x8_t vtbx3_p8 (poly8x8_t, poly8x8x3_t, uint8x8_t)
    - signature: int8x8_t vtbx3_s8 (int8x8_t, int8x8x3_t, int8x8_t)
    - signature: uint8x8_t vtbx3_u8 (uint8x8_t, uint8x8x3_t, uint8x8_t)
    - signature: poly8x8_t vtbx4_p8 (poly8x8_t, poly8x8x4_t, uint8x8_t)
    - signature: int8x8_t vtbx4_s8 (int8x8_t, int8x8x4_t, int8x8_t)
    - signature: uint8x8_t vtbx4_u8 (uint8x8_t, uint8x8x4_t, uint8x8_t)
    - signature: float32x2_t vmul_lane_f32 (float32x2_t, float32x2_t, const int)
    - signature: uint32x2_t vmul_lane_u32 (uint32x2_t, uint32x2_t, const int)
    - signature: uint16x4_t vmul_lane_u16 (uint16x4_t, uint16x4_t, const int)
    - signature: int32x2_t vmul_lane_s32 (int32x2_t, int32x2_t, const int)
    - signature: int16x4_t vmul_lane_s16 (int16x4_t, int16x4_t, const int)
    - signature: float32x4_t vmulq_lane_f32 (float32x4_t, float32x2_t, const int)
    - signature: uint32x4_t vmulq_lane_u32 (uint32x4_t, uint32x2_t, const int)
    - signature: uint16x8_t vmulq_lane_u16 (uint16x8_t, uint16x4_t, const int)
    - signature: int32x4_t vmulq_lane_s32 (int32x4_t, int32x2_t, const int)
    - signature: int16x8_t vmulq_lane_s16 (int16x8_t, int16x4_t, const int)
    - signature: uint64x2_t vmull_lane_u32 (uint32x2_t, uint32x2_t, const int)
    - signature: uint32x4_t vmull_lane_u16 (uint16x4_t, uint16x4_t, const int)
    - signature: int64x2_t vmull_lane_s32 (int32x2_t, int32x2_t, const int)
    - signature: int32x4_t vmull_lane_s16 (int16x4_t, int16x4_t, const int)
    - signature: int64x2_t vqdmull_lane_s32 (int32x2_t, int32x2_t, const int)
    - signature: int32x4_t vqdmull_lane_s16 (int16x4_t, int16x4_t, const int)
    - signature: int32x4_t vqdmulhq_lane_s32 (int32x4_t, int32x2_t, const int)
    - signature: int16x8_t vqdmulhq_lane_s16 (int16x8_t, int16x4_t, const int)
    - signature: int32x2_t vqdmulh_lane_s32 (int32x2_t, int32x2_t, const int)
    - signature: int16x4_t vqdmulh_lane_s16 (int16x4_t, int16x4_t, const int)
    - signature: int32x4_t vqrdmulhq_lane_s32 (int32x4_t, int32x2_t, const int)
    - signature: int16x8_t vqrdmulhq_lane_s16 (int16x8_t, int16x4_t, const int)
    - signature: int32x2_t vqrdmulh_lane_s32 (int32x2_t, int32x2_t, const int)
    - signature: int16x4_t vqrdmulh_lane_s16 (int16x4_t, int16x4_t, const int)
    - signature: float32x2_t vmla_lane_f32 (float32x2_t, float32x2_t, float32x2_t, const int)
    - signature: uint32x2_t vmla_lane_u32 (uint32x2_t, uint32x2_t, uint32x2_t, const int)
    - signature: uint16x4_t vmla_lane_u16 (uint16x4_t, uint16x4_t, uint16x4_t, const int)
    - signature: int32x2_t vmla_lane_s32 (int32x2_t, int32x2_t, int32x2_t, const int)
    - signature: int16x4_t vmla_lane_s16 (int16x4_t, int16x4_t, int16x4_t, const int)
    - signature: float32x4_t vmlaq_lane_f32 (float32x4_t, float32x4_t, float32x2_t, const int)
    - signature: uint32x4_t vmlaq_lane_u32 (uint32x4_t, uint32x4_t, uint32x2_t, const int)
    - signature: uint16x8_t vmlaq_lane_u16 (uint16x8_t, uint16x8_t, uint16x4_t, const int)
    - signature: int32x4_t vmlaq_lane_s32 (int32x4_t, int32x4_t, int32x2_t, const int)
    - signature: int16x8_t vmlaq_lane_s16 (int16x8_t, int16x8_t, int16x4_t, const int)
    - signature: uint64x2_t vmlal_lane_u32 (uint64x2_t, uint32x2_t, uint32x2_t, const int)
    - signature: uint32x4_t vmlal_lane_u16 (uint32x4_t, uint16x4_t, uint16x4_t, const int)
    - signature: int64x2_t vmlal_lane_s32 (int64x2_t, int32x2_t, int32x2_t, const int)
    - signature: int32x4_t vmlal_lane_s16 (int32x4_t, int16x4_t, int16x4_t, const int)
    - signature: int64x2_t vqdmlal_lane_s32 (int64x2_t, int32x2_t, int32x2_t, const int)
    - signature: int32x4_t vqdmlal_lane_s16 (int32x4_t, int16x4_t, int16x4_t, const int)
    - signature: float32x2_t vmls_lane_f32 (float32x2_t, float32x2_t, float32x2_t, const int)
    - signature: uint32x2_t vmls_lane_u32 (uint32x2_t, uint32x2_t, uint32x2_t, const int)
    - signature: uint16x4_t vmls_lane_u16 (uint16x4_t, uint16x4_t, uint16x4_t, const int)
    - signature: int32x2_t vmls_lane_s32 (int32x2_t, int32x2_t, int32x2_t, const int)
    - signature: int16x4_t vmls_lane_s16 (int16x4_t, int16x4_t, int16x4_t, const int)
    - signature: float32x4_t vmlsq_lane_f32 (float32x4_t, float32x4_t, float32x2_t, const int)
    - signature: uint32x4_t vmlsq_lane_u32 (uint32x4_t, uint32x4_t, uint32x2_t, const int)
    - signature: uint16x8_t vmlsq_lane_u16 (uint16x8_t, uint16x8_t, uint16x4_t, const int)
    - signature: int32x4_t vmlsq_lane_s32 (int32x4_t, int32x4_t, int32x2_t, const int)
    - signature: int16x8_t vmlsq_lane_s16 (int16x8_t, int16x8_t, int16x4_t, const int)
    - signature: uint64x2_t vmlsl_lane_u32 (uint64x2_t, uint32x2_t, uint32x2_t, const int)
    - signature: uint32x4_t vmlsl_lane_u16 (uint32x4_t, uint16x4_t, uint16x4_t, const int)
    - signature: int64x2_t vmlsl_lane_s32 (int64x2_t, int32x2_t, int32x2_t, const int)
    - signature: int32x4_t vmlsl_lane_s16 (int32x4_t, int16x4_t, int16x4_t, const int)
    - signature: int64x2_t vqdmlsl_lane_s32 (int64x2_t, int32x2_t, int32x2_t, const int)
    - signature: int32x4_t vqdmlsl_lane_s16 (int32x4_t, int16x4_t, int16x4_t, const int)
    - signature: float32x2_t vmul_n_f32 (float32x2_t, float32_t)
    - signature: uint32x2_t vmul_n_u32 (uint32x2_t, uint32_t)
    - signature: uint16x4_t vmul_n_u16 (uint16x4_t, uint16_t)
    - signature: int32x2_t vmul_n_s32 (int32x2_t, int32_t)
    - signature: int16x4_t vmul_n_s16 (int16x4_t, int16_t)
    - signature: float32x4_t vmulq_n_f32 (float32x4_t, float32_t)
    - signature: uint32x4_t vmulq_n_u32 (uint32x4_t, uint32_t)
    - signature: uint16x8_t vmulq_n_u16 (uint16x8_t, uint16_t)
    - signature: int32x4_t vmulq_n_s32 (int32x4_t, int32_t)
    - signature: int16x8_t vmulq_n_s16 (int16x8_t, int16_t)
    - signature: uint64x2_t vmull_n_u32 (uint32x2_t, uint32_t)
    - signature: uint32x4_t vmull_n_u16 (uint16x4_t, uint16_t)
    - signature: int64x2_t vmull_n_s32 (int32x2_t, int32_t)
    - signature: int32x4_t vmull_n_s16 (int16x4_t, int16_t)
    - signature: int64x2_t vqdmull_n_s32 (int32x2_t, int32_t)
    - signature: int32x4_t vqdmull_n_s16 (int16x4_t, int16_t)
    - signature: int32x4_t vqdmulhq_n_s32 (int32x4_t, int32_t)
    - signature: int16x8_t vqdmulhq_n_s16 (int16x8_t, int16_t)
    - signature: int32x2_t vqdmulh_n_s32 (int32x2_t, int32_t)
    - signature: int16x4_t vqdmulh_n_s16 (int16x4_t, int16_t)
    - signature: int32x4_t vqrdmulhq_n_s32 (int32x4_t, int32_t)
    - signature: int16x8_t vqrdmulhq_n_s16 (int16x8_t, int16_t)
    - signature: int32x2_t vqrdmulh_n_s32 (int32x2_t, int32_t)
    - signature: int16x4_t vqrdmulh_n_s16 (int16x4_t, int16_t)
    - signature: float32x2_t vmla_n_f32 (float32x2_t, float32x2_t, float32_t)
    - signature: uint32x2_t vmla_n_u32 (uint32x2_t, uint32x2_t, uint32_t)
    - signature: uint16x4_t vmla_n_u16 (uint16x4_t, uint16x4_t, uint16_t)
    - signature: int32x2_t vmla_n_s32 (int32x2_t, int32x2_t, int32_t)
    - signature: int16x4_t vmla_n_s16 (int16x4_t, int16x4_t, int16_t)
    - signature: float32x4_t vmlaq_n_f32 (float32x4_t, float32x4_t, float32_t)
    - signature: uint32x4_t vmlaq_n_u32 (uint32x4_t, uint32x4_t, uint32_t)
    - signature: uint16x8_t vmlaq_n_u16 (uint16x8_t, uint16x8_t, uint16_t)
    - signature: int32x4_t vmlaq_n_s32 (int32x4_t, int32x4_t, int32_t)
    - signature: int16x8_t vmlaq_n_s16 (int16x8_t, int16x8_t, int16_t)
    - signature: uint64x2_t vmlal_n_u32 (uint64x2_t, uint32x2_t, uint32_t)
    - signature: uint32x4_t vmlal_n_u16 (uint32x4_t, uint16x4_t, uint16_t)
    - signature: int64x2_t vmlal_n_s32 (int64x2_t, int32x2_t, int32_t)
    - signature: int32x4_t vmlal_n_s16 (int32x4_t, int16x4_t, int16_t)
    - signature: int64x2_t vqdmlal_n_s32 (int64x2_t, int32x2_t, int32_t)
    - signature: int32x4_t vqdmlal_n_s16 (int32x4_t, int16x4_t, int16_t)
    - signature: float32x2_t vmls_n_f32 (float32x2_t, float32x2_t, float32_t)
    - signature: uint32x2_t vmls_n_u32 (uint32x2_t, uint32x2_t, uint32_t)
    - signature: uint16x4_t vmls_n_u16 (uint16x4_t, uint16x4_t, uint16_t)
    - signature: int32x2_t vmls_n_s32 (int32x2_t, int32x2_t, int32_t)
    - signature: int16x4_t vmls_n_s16 (int16x4_t, int16x4_t, int16_t)
    - signature: float32x4_t vmlsq_n_f32 (float32x4_t, float32x4_t, float32_t)
    - signature: uint32x4_t vmlsq_n_u32 (uint32x4_t, uint32x4_t, uint32_t)
    - signature: uint16x8_t vmlsq_n_u16 (uint16x8_t, uint16x8_t, uint16_t)
    - signature: int32x4_t vmlsq_n_s32 (int32x4_t, int32x4_t, int32_t)
    - signature: int16x8_t vmlsq_n_s16 (int16x8_t, int16x8_t, int16_t)
    - signature: uint64x2_t vmlsl_n_u32 (uint64x2_t, uint32x2_t, uint32_t)
    - signature: uint32x4_t vmlsl_n_u16 (uint32x4_t, uint16x4_t, uint16_t)
    - signature: int64x2_t vmlsl_n_s32 (int64x2_t, int32x2_t, int32_t)
    - signature: int32x4_t vmlsl_n_s16 (int32x4_t, int16x4_t, int16_t)
    - signature: int64x2_t vqdmlsl_n_s32 (int64x2_t, int32x2_t, int32_t)
    - signature: int32x4_t vqdmlsl_n_s16 (int32x4_t, int16x4_t, int16_t)
    - signature: uint32x2_t vext_u32 (uint32x2_t, uint32x2_t, const int)
    - signature: uint16x4_t vext_u16 (uint16x4_t, uint16x4_t, const int)
    - signature: uint8x8_t vext_u8 (uint8x8_t, uint8x8_t, const int)
    - signature: int32x2_t vext_s32 (int32x2_t, int32x2_t, const int)
    - signature: int16x4_t vext_s16 (int16x4_t, int16x4_t, const int)
    - signature: int8x8_t vext_s8 (int8x8_t, int8x8_t, const int)
    - signature: uint64x1_t vext_u64 (uint64x1_t, uint64x1_t, const int)
    - signature: int64x1_t vext_s64 (int64x1_t, int64x1_t, const int)
    - signature: float32x2_t vext_f32 (float32x2_t, float32x2_t, const int)
    - signature: poly16x4_t vext_p16 (poly16x4_t, poly16x4_t, const int)
    - signature: poly8x8_t vext_p8 (poly8x8_t, poly8x8_t, const int)
    - signature: uint32x4_t vextq_u32 (uint32x4_t, uint32x4_t, const int)
    - signature: uint16x8_t vextq_u16 (uint16x8_t, uint16x8_t, const int)
    - signature: uint8x16_t vextq_u8 (uint8x16_t, uint8x16_t, const int)
    - signature: int32x4_t vextq_s32 (int32x4_t, int32x4_t, const int)
    - signature: int16x8_t vextq_s16 (int16x8_t, int16x8_t, const int)
    - signature: int8x16_t vextq_s8 (int8x16_t, int8x16_t, const int)
    - signature: uint64x2_t vextq_u64 (uint64x2_t, uint64x2_t, const int)
    - signature: int64x2_t vextq_s64 (int64x2_t, int64x2_t, const int)
    - signature: float32x4_t vextq_f32 (float32x4_t, float32x4_t, const int)
    - signature: poly16x8_t vextq_p16 (poly16x8_t, poly16x8_t, const int)
    - signature: poly8x16_t vextq_p8 (poly8x16_t, poly8x16_t, const int)
    - signature: uint32x2_t vrev64_u32 (uint32x2_t)
    - signature: uint16x4_t vrev64_u16 (uint16x4_t)
    - signature: uint8x8_t vrev64_u8 (uint8x8_t)
    - signature: int32x2_t vrev64_s32 (int32x2_t)
    - signature: int16x4_t vrev64_s16 (int16x4_t)
    - signature: int8x8_t vrev64_s8 (int8x8_t)
    - signature: float32x2_t vrev64_f32 (float32x2_t)
    - signature: poly16x4_t vrev64_p16 (poly16x4_t)
    - signature: poly8x8_t vrev64_p8 (poly8x8_t)
    - signature: uint32x4_t vrev64q_u32 (uint32x4_t)
    - signature: uint16x8_t vrev64q_u16 (uint16x8_t)
    - signature: uint8x16_t vrev64q_u8 (uint8x16_t)
    - signature: int32x4_t vrev64q_s32 (int32x4_t)
    - signature: int16x8_t vrev64q_s16 (int16x8_t)
    - signature: int8x16_t vrev64q_s8 (int8x16_t)
    - signature: float32x4_t vrev64q_f32 (float32x4_t)
    - signature: poly16x8_t vrev64q_p16 (poly16x8_t)
    - signature: poly8x16_t vrev64q_p8 (poly8x16_t)
    - signature: uint16x4_t vrev32_u16 (uint16x4_t)
    - signature: int16x4_t vrev32_s16 (int16x4_t)
    - signature: uint8x8_t vrev32_u8 (uint8x8_t)
    - signature: int8x8_t vrev32_s8 (int8x8_t)
    - signature: poly16x4_t vrev32_p16 (poly16x4_t)
    - signature: poly8x8_t vrev32_p8 (poly8x8_t)
    - signature: uint16x8_t vrev32q_u16 (uint16x8_t)
    - signature: int16x8_t vrev32q_s16 (int16x8_t)
    - signature: uint8x16_t vrev32q_u8 (uint8x16_t)
    - signature: int8x16_t vrev32q_s8 (int8x16_t)
    - signature: poly16x8_t vrev32q_p16 (poly16x8_t)
    - signature: poly8x16_t vrev32q_p8 (poly8x16_t)
    - signature: uint8x8_t vrev16_u8 (uint8x8_t)
    - signature: int8x8_t vrev16_s8 (int8x8_t)
    - signature: poly8x8_t vrev16_p8 (poly8x8_t)
    - signature: uint8x16_t vrev16q_u8 (uint8x16_t)
    - signature: int8x16_t vrev16q_s8 (int8x16_t)
    - signature: poly8x16_t vrev16q_p8 (poly8x16_t)
    - signature: uint32x2_t vbsl_u32 (uint32x2_t, uint32x2_t, uint32x2_t)
    - signature: uint16x4_t vbsl_u16 (uint16x4_t, uint16x4_t, uint16x4_t)
    - signature: uint8x8_t vbsl_u8 (uint8x8_t, uint8x8_t, uint8x8_t)
    - signature: int32x2_t vbsl_s32 (uint32x2_t, int32x2_t, int32x2_t)
    - signature: int16x4_t vbsl_s16 (uint16x4_t, int16x4_t, int16x4_t)
    - signature: int8x8_t vbsl_s8 (uint8x8_t, int8x8_t, int8x8_t)
    - signature: uint64x1_t vbsl_u64 (uint64x1_t, uint64x1_t, uint64x1_t)
    - signature: int64x1_t vbsl_s64 (uint64x1_t, int64x1_t, int64x1_t)
    - signature: float32x2_t vbsl_f32 (uint32x2_t, float32x2_t, float32x2_t)
    - signature: poly16x4_t vbsl_p16 (uint16x4_t, poly16x4_t, poly16x4_t)
    - signature: poly8x8_t vbsl_p8 (uint8x8_t, poly8x8_t, poly8x8_t)
    - signature: uint32x4_t vbslq_u32 (uint32x4_t, uint32x4_t, uint32x4_t)
    - signature: uint16x8_t vbslq_u16 (uint16x8_t, uint16x8_t, uint16x8_t)
    - signature: uint8x16_t vbslq_u8 (uint8x16_t, uint8x16_t, uint8x16_t)
    - signature: int32x4_t vbslq_s32 (uint32x4_t, int32x4_t, int32x4_t)
    - signature: int16x8_t vbslq_s16 (uint16x8_t, int16x8_t, int16x8_t)
    - signature: int8x16_t vbslq_s8 (uint8x16_t, int8x16_t, int8x16_t)
    - signature: uint64x2_t vbslq_u64 (uint64x2_t, uint64x2_t, uint64x2_t)
    - signature: int64x2_t vbslq_s64 (uint64x2_t, int64x2_t, int64x2_t)
    - signature: float32x4_t vbslq_f32 (uint32x4_t, float32x4_t, float32x4_t)
    - signature: poly16x8_t vbslq_p16 (uint16x8_t, poly16x8_t, poly16x8_t)
    - signature: poly8x16_t vbslq_p8 (uint8x16_t, poly8x16_t, poly8x16_t)
    - signature: uint16x4x2_t vtrn_u16 (uint16x4_t, uint16x4_t)
    - signature: uint8x8x2_t vtrn_u8 (uint8x8_t, uint8x8_t)
    - signature: int16x4x2_t vtrn_s16 (int16x4_t, int16x4_t)
    - signature: int8x8x2_t vtrn_s8 (int8x8_t, int8x8_t)
    - signature: poly16x4x2_t vtrn_p16 (poly16x4_t, poly16x4_t)
    - signature: poly8x8x2_t vtrn_p8 (poly8x8_t, poly8x8_t)
    - signature: float32x2x2_t vtrn_f32 (float32x2_t, float32x2_t)
    - signature: uint32x2x2_t vtrn_u32 (uint32x2_t, uint32x2_t)
    - signature: int32x2x2_t vtrn_s32 (int32x2_t, int32x2_t)
    - signature: uint32x4x2_t vtrnq_u32 (uint32x4_t, uint32x4_t)
    - signature: uint16x8x2_t vtrnq_u16 (uint16x8_t, uint16x8_t)
    - signature: uint8x16x2_t vtrnq_u8 (uint8x16_t, uint8x16_t)
    - signature: int32x4x2_t vtrnq_s32 (int32x4_t, int32x4_t)
    - signature: int16x8x2_t vtrnq_s16 (int16x8_t, int16x8_t)
    - signature: int8x16x2_t vtrnq_s8 (int8x16_t, int8x16_t)
    - signature: float32x4x2_t vtrnq_f32 (float32x4_t, float32x4_t)
    - signature: poly16x8x2_t vtrnq_p16 (poly16x8_t, poly16x8_t)
    - signature: poly8x16x2_t vtrnq_p8 (poly8x16_t, poly8x16_t)
    - signature: uint16x4x2_t vzip_u16 (uint16x4_t, uint16x4_t)
    - signature: uint8x8x2_t vzip_u8 (uint8x8_t, uint8x8_t)
    - signature: int16x4x2_t vzip_s16 (int16x4_t, int16x4_t)
    - signature: int8x8x2_t vzip_s8 (int8x8_t, int8x8_t)
    - signature: poly16x4x2_t vzip_p16 (poly16x4_t, poly16x4_t)
    - signature: poly8x8x2_t vzip_p8 (poly8x8_t, poly8x8_t)
    - signature: float32x2x2_t vzip_f32 (float32x2_t, float32x2_t)
    - signature: uint32x2x2_t vzip_u32 (uint32x2_t, uint32x2_t)
    - signature: int32x2x2_t vzip_s32 (int32x2_t, int32x2_t)
    - signature: uint32x4x2_t vzipq_u32 (uint32x4_t, uint32x4_t)
    - signature: uint16x8x2_t vzipq_u16 (uint16x8_t, uint16x8_t)
    - signature: uint8x16x2_t vzipq_u8 (uint8x16_t, uint8x16_t)
    - signature: int32x4x2_t vzipq_s32 (int32x4_t, int32x4_t)
    - signature: int16x8x2_t vzipq_s16 (int16x8_t, int16x8_t)
    - signature: int8x16x2_t vzipq_s8 (int8x16_t, int8x16_t)
    - signature: float32x4x2_t vzipq_f32 (float32x4_t, float32x4_t)
    - signature: poly16x8x2_t vzipq_p16 (poly16x8_t, poly16x8_t)
    - signature: poly8x16x2_t vzipq_p8 (poly8x16_t, poly8x16_t)
    - signature: uint32x2x2_t vuzp_u32 (uint32x2_t, uint32x2_t)
    - signature: uint16x4x2_t vuzp_u16 (uint16x4_t, uint16x4_t)
    - signature: uint8x8x2_t vuzp_u8 (uint8x8_t, uint8x8_t)
    - signature: int32x2x2_t vuzp_s32 (int32x2_t, int32x2_t)
    - signature: int16x4x2_t vuzp_s16 (int16x4_t, int16x4_t)
    - signature: int8x8x2_t vuzp_s8 (int8x8_t, int8x8_t)
    - signature: float32x2x2_t vuzp_f32 (float32x2_t, float32x2_t)
    - signature: poly16x4x2_t vuzp_p16 (poly16x4_t, poly16x4_t)
    - signature: poly8x8x2_t vuzp_p8 (poly8x8_t, poly8x8_t)
    - signature: uint32x4x2_t vuzpq_u32 (uint32x4_t, uint32x4_t)
    - signature: uint16x8x2_t vuzpq_u16 (uint16x8_t, uint16x8_t)
    - signature: uint8x16x2_t vuzpq_u8 (uint8x16_t, uint8x16_t)
    - signature: int32x4x2_t vuzpq_s32 (int32x4_t, int32x4_t)
    - signature: int16x8x2_t vuzpq_s16 (int16x8_t, int16x8_t)
    - signature: int8x16x2_t vuzpq_s8 (int8x16_t, int8x16_t)
    - signature: float32x4x2_t vuzpq_f32 (float32x4_t, float32x4_t)
    - signature: poly16x8x2_t vuzpq_p16 (poly16x8_t, poly16x8_t)
    - signature: poly8x16x2_t vuzpq_p8 (poly8x16_t, poly8x16_t)
    - signature: uint32x2_t vld1_u32 (const uint32_t *)
    - signature: uint16x4_t vld1_u16 (const uint16_t *)
    - signature: uint8x8_t vld1_u8 (const uint8_t *)
    - signature: int32x2_t vld1_s32 (const int32_t *)
    - signature: int16x4_t vld1_s16 (const int16_t *)
    - signature: int8x8_t vld1_s8 (const int8_t *)
    - signature: uint64x1_t vld1_u64 (const uint64_t *)
    - signature: int64x1_t vld1_s64 (const int64_t *)
    - signature: float32x2_t vld1_f32 (const float32_t *)
    - signature: poly16x4_t vld1_p16 (const poly16_t *)
    - signature: poly8x8_t vld1_p8 (const poly8_t *)
    - signature: uint32x4_t vld1q_u32 (const uint32_t *)
    - signature: uint16x8_t vld1q_u16 (const uint16_t *)
    - signature: uint8x16_t vld1q_u8 (const uint8_t *)
    - signature: int32x4_t vld1q_s32 (const int32_t *)
    - signature: int16x8_t vld1q_s16 (const int16_t *)
    - signature: int8x16_t vld1q_s8 (const int8_t *)
    - signature: uint64x2_t vld1q_u64 (const uint64_t *)
    - signature: int64x2_t vld1q_s64 (const int64_t *)
    - signature: float32x4_t vld1q_f32 (const float32_t *)
    - signature: poly16x8_t vld1q_p16 (const poly16_t *)
    - signature: poly8x16_t vld1q_p8 (const poly8_t *)
    - signature: uint32x2_t vld1_lane_u32 (const uint32_t *, uint32x2_t, const int)
    - signature: uint16x4_t vld1_lane_u16 (const uint16_t *, uint16x4_t, const int)
    - signature: uint8x8_t vld1_lane_u8 (const uint8_t *, uint8x8_t, const int)
    - signature: int32x2_t vld1_lane_s32 (const int32_t *, int32x2_t, const int)
    - signature: int16x4_t vld1_lane_s16 (const int16_t *, int16x4_t, const int)
    - signature: int8x8_t vld1_lane_s8 (const int8_t *, int8x8_t, const int)
    - signature: float32x2_t vld1_lane_f32 (const float32_t *, float32x2_t, const int)
    - signature: poly16x4_t vld1_lane_p16 (const poly16_t *, poly16x4_t, const int)
    - signature: poly8x8_t vld1_lane_p8 (const poly8_t *, poly8x8_t, const int)
    - signature: uint64x1_t vld1_lane_u64 (const uint64_t *, uint64x1_t, const int)
    - signature: int64x1_t vld1_lane_s64 (const int64_t *, int64x1_t, const int)
    - signature: uint32x4_t vld1q_lane_u32 (const uint32_t *, uint32x4_t, const int)
    - signature: uint16x8_t vld1q_lane_u16 (const uint16_t *, uint16x8_t, const int)
    - signature: uint8x16_t vld1q_lane_u8 (const uint8_t *, uint8x16_t, const int)
    - signature: int32x4_t vld1q_lane_s32 (const int32_t *, int32x4_t, const int)
    - signature: int16x8_t vld1q_lane_s16 (const int16_t *, int16x8_t, const int)
    - signature: int8x16_t vld1q_lane_s8 (const int8_t *, int8x16_t, const int)
    - signature: float32x4_t vld1q_lane_f32 (const float32_t *, float32x4_t, const int)
    - signature: poly16x8_t vld1q_lane_p16 (const poly16_t *, poly16x8_t, const int)
    - signature: poly8x16_t vld1q_lane_p8 (const poly8_t *, poly8x16_t, const int)
    - signature: uint64x2_t vld1q_lane_u64 (const uint64_t *, uint64x2_t, const int)
    - signature: int64x2_t vld1q_lane_s64 (const int64_t *, int64x2_t, const int)
    - signature: uint32x2_t vld1_dup_u32 (const uint32_t *)
    - signature: uint16x4_t vld1_dup_u16 (const uint16_t *)
    - signature: uint8x8_t vld1_dup_u8 (const uint8_t *)
    - signature: int32x2_t vld1_dup_s32 (const int32_t *)
    - signature: int16x4_t vld1_dup_s16 (const int16_t *)
    - signature: int8x8_t vld1_dup_s8 (const int8_t *)
    - signature: float32x2_t vld1_dup_f32 (const float32_t *)
    - signature: poly16x4_t vld1_dup_p16 (const poly16_t *)
    - signature: poly8x8_t vld1_dup_p8 (const poly8_t *)
    - signature: uint64x1_t vld1_dup_u64 (const uint64_t *)
    - signature: int64x1_t vld1_dup_s64 (const int64_t *)
    - signature: uint32x4_t vld1q_dup_u32 (const uint32_t *)
    - signature: uint16x8_t vld1q_dup_u16 (const uint16_t *)
    - signature: uint8x16_t vld1q_dup_u8 (const uint8_t *)
    - signature: int32x4_t vld1q_dup_s32 (const int32_t *)
    - signature: int16x8_t vld1q_dup_s16 (const int16_t *)
    - signature: int8x16_t vld1q_dup_s8 (const int8_t *)
    - signature: float32x4_t vld1q_dup_f32 (const float32_t *)
    - signature: poly16x8_t vld1q_dup_p16 (const poly16_t *)
    - signature: poly8x16_t vld1q_dup_p8 (const poly8_t *)
    - signature: uint64x2_t vld1q_dup_u64 (const uint64_t *)
    - signature: int64x2_t vld1q_dup_s64 (const int64_t *)
    - signature: void vst1_u32 (uint32_t *, uint32x2_t)
    - signature: void vst1_u16 (uint16_t *, uint16x4_t)
    - signature: void vst1_u8 (uint8_t *, uint8x8_t)
    - signature: void vst1_s32 (int32_t *, int32x2_t)
    - signature: void vst1_s16 (int16_t *, int16x4_t)
    - signature: void vst1_s8 (int8_t *, int8x8_t)
    - signature: void vst1_u64 (uint64_t *, uint64x1_t)
    - signature: void vst1_s64 (int64_t *, int64x1_t)
    - signature: void vst1_f32 (float32_t *, float32x2_t)
    - signature: void vst1_p16 (poly16_t *, poly16x4_t)
    - signature: void vst1_p8 (poly8_t *, poly8x8_t)
    - signature: void vst1q_u32 (uint32_t *, uint32x4_t)
    - signature: void vst1q_u16 (uint16_t *, uint16x8_t)
    - signature: void vst1q_u8 (uint8_t *, uint8x16_t)
    - signature: void vst1q_s32 (int32_t *, int32x4_t)
    - signature: void vst1q_s16 (int16_t *, int16x8_t)
    - signature: void vst1q_s8 (int8_t *, int8x16_t)
    - signature: void vst1q_u64 (uint64_t *, uint64x2_t)
    - signature: void vst1q_s64 (int64_t *, int64x2_t)
    - signature: void vst1q_f32 (float32_t *, float32x4_t)
    - signature: void vst1q_p16 (poly16_t *, poly16x8_t)
    - signature: void vst1q_p8 (poly8_t *, poly8x16_t)
    - signature: void vst1_lane_u32 (uint32_t *, uint32x2_t, const int)
    - signature: void vst1_lane_u16 (uint16_t *, uint16x4_t, const int)
    - signature: void vst1_lane_u8 (uint8_t *, uint8x8_t, const int)
    - signature: void vst1_lane_s32 (int32_t *, int32x2_t, const int)
    - signature: void vst1_lane_s16 (int16_t *, int16x4_t, const int)
    - signature: void vst1_lane_s8 (int8_t *, int8x8_t, const int)
    - signature: void vst1_lane_f32 (float32_t *, float32x2_t, const int)
    - signature: void vst1_lane_p16 (poly16_t *, poly16x4_t, const int)
    - signature: void vst1_lane_p8 (poly8_t *, poly8x8_t, const int)
    - signature: void vst1_lane_s64 (int64_t *, int64x1_t, const int)
    - signature: void vst1_lane_u64 (uint64_t *, uint64x1_t, const int)
    - signature: void vst1q_lane_u32 (uint32_t *, uint32x4_t, const int)
    - signature: void vst1q_lane_u16 (uint16_t *, uint16x8_t, const int)
    - signature: void vst1q_lane_u8 (uint8_t *, uint8x16_t, const int)
    - signature: void vst1q_lane_s32 (int32_t *, int32x4_t, const int)
    - signature: void vst1q_lane_s16 (int16_t *, int16x8_t, const int)
    - signature: void vst1q_lane_s8 (int8_t *, int8x16_t, const int)
    - signature: void vst1q_lane_f32 (float32_t *, float32x4_t, const int)
    - signature: void vst1q_lane_p16 (poly16_t *, poly16x8_t, const int)
    - signature: void vst1q_lane_p8 (poly8_t *, poly8x16_t, const int)
    - signature: void vst1q_lane_s64 (int64_t *, int64x2_t, const int)
    - signature: void vst1q_lane_u64 (uint64_t *, uint64x2_t, const int)
    - signature: uint32x2x2_t vld2_u32 (const uint32_t *)
    - signature: uint16x4x2_t vld2_u16 (const uint16_t *)
    - signature: uint8x8x2_t vld2_u8 (const uint8_t *)
    - signature: int32x2x2_t vld2_s32 (const int32_t *)
    - signature: int16x4x2_t vld2_s16 (const int16_t *)
    - signature: int8x8x2_t vld2_s8 (const int8_t *)
    - signature: float32x2x2_t vld2_f32 (const float32_t *)
    - signature: poly16x4x2_t vld2_p16 (const poly16_t *)
    - signature: poly8x8x2_t vld2_p8 (const poly8_t *)
    - signature: uint64x1x2_t vld2_u64 (const uint64_t *)
    - signature: int64x1x2_t vld2_s64 (const int64_t *)
    - signature: uint32x4x2_t vld2q_u32 (const uint32_t *)
    - signature: uint16x8x2_t vld2q_u16 (const uint16_t *)
    - signature: uint8x16x2_t vld2q_u8 (const uint8_t *)
    - signature: int32x4x2_t vld2q_s32 (const int32_t *)
    - signature: int16x8x2_t vld2q_s16 (const int16_t *)
    - signature: int8x16x2_t vld2q_s8 (const int8_t *)
    - signature: float32x4x2_t vld2q_f32 (const float32_t *)
    - signature: poly16x8x2_t vld2q_p16 (const poly16_t *)
    - signature: poly8x16x2_t vld2q_p8 (const poly8_t *)
    - signature: uint32x2x2_t vld2_lane_u32 (const uint32_t *, uint32x2x2_t, const int)
    - signature: uint16x4x2_t vld2_lane_u16 (const uint16_t *, uint16x4x2_t, const int)
    - signature: uint8x8x2_t vld2_lane_u8 (const uint8_t *, uint8x8x2_t, const int)
    - signature: int32x2x2_t vld2_lane_s32 (const int32_t *, int32x2x2_t, const int)
    - signature: int16x4x2_t vld2_lane_s16 (const int16_t *, int16x4x2_t, const int)
    - signature: int8x8x2_t vld2_lane_s8 (const int8_t *, int8x8x2_t, const int)
    - signature: float32x2x2_t vld2_lane_f32 (const float32_t *, float32x2x2_t, const int)
    - signature: poly16x4x2_t vld2_lane_p16 (const poly16_t *, poly16x4x2_t, const int)
    - signature: poly8x8x2_t vld2_lane_p8 (const poly8_t *, poly8x8x2_t, const int)
    - signature: int32x4x2_t vld2q_lane_s32 (const int32_t *, int32x4x2_t, const int)
    - signature: int16x8x2_t vld2q_lane_s16 (const int16_t *, int16x8x2_t, const int)
    - signature: uint32x4x2_t vld2q_lane_u32 (const uint32_t *, uint32x4x2_t, const int)
    - signature: uint16x8x2_t vld2q_lane_u16 (const uint16_t *, uint16x8x2_t, const int)
    - signature: float32x4x2_t vld2q_lane_f32 (const float32_t *, float32x4x2_t, const int)
    - signature: poly16x8x2_t vld2q_lane_p16 (const poly16_t *, poly16x8x2_t, const int)
    - signature: uint32x2x2_t vld2_dup_u32 (const uint32_t *)
    - signature: uint16x4x2_t vld2_dup_u16 (const uint16_t *)
    - signature: uint8x8x2_t vld2_dup_u8 (const uint8_t *)
    - signature: int32x2x2_t vld2_dup_s32 (const int32_t *)
    - signature: int16x4x2_t vld2_dup_s16 (const int16_t *)
    - signature: int8x8x2_t vld2_dup_s8 (const int8_t *)
    - signature: float32x2x2_t vld2_dup_f32 (const float32_t *)
    - signature: poly16x4x2_t vld2_dup_p16 (const poly16_t *)
    - signature: poly8x8x2_t vld2_dup_p8 (const poly8_t *)
    - signature: uint64x1x2_t vld2_dup_u64 (const uint64_t *)
    - signature: int64x1x2_t vld2_dup_s64 (const int64_t *)
    - signature: void vst2_u32 (uint32_t *, uint32x2x2_t)
    - signature: void vst2_u16 (uint16_t *, uint16x4x2_t)
    - signature: void vst2_u8 (uint8_t *, uint8x8x2_t)
    - signature: void vst2_s32 (int32_t *, int32x2x2_t)
    - signature: void vst2_s16 (int16_t *, int16x4x2_t)
    - signature: void vst2_s8 (int8_t *, int8x8x2_t)
    - signature: void vst2_f32 (float32_t *, float32x2x2_t)
    - signature: void vst2_p16 (poly16_t *, poly16x4x2_t)
    - signature: void vst2_p8 (poly8_t *, poly8x8x2_t)
    - signature: void vst2_u64 (uint64_t *, uint64x1x2_t)
    - signature: void vst2_s64 (int64_t *, int64x1x2_t)
    - signature: void vst2q_u32 (uint32_t *, uint32x4x2_t)
    - signature: void vst2q_u16 (uint16_t *, uint16x8x2_t)
    - signature: void vst2q_u8 (uint8_t *, uint8x16x2_t)
    - signature: void vst2q_s32 (int32_t *, int32x4x2_t)
    - signature: void vst2q_s16 (int16_t *, int16x8x2_t)
    - signature: void vst2q_s8 (int8_t *, int8x16x2_t)
    - signature: void vst2q_f32 (float32_t *, float32x4x2_t)
    - signature: void vst2q_p16 (poly16_t *, poly16x8x2_t)
    - signature: void vst2q_p8 (poly8_t *, poly8x16x2_t)
    - signature: void vst2_lane_u32 (uint32_t *, uint32x2x2_t, const int)
    - signature: void vst2_lane_u16 (uint16_t *, uint16x4x2_t, const int)
    - signature: void vst2_lane_u8 (uint8_t *, uint8x8x2_t, const int)
    - signature: void vst2_lane_s32 (int32_t *, int32x2x2_t, const int)
    - signature: void vst2_lane_s16 (int16_t *, int16x4x2_t, const int)
    - signature: void vst2_lane_s8 (int8_t *, int8x8x2_t, const int)
    - signature: void vst2_lane_f32 (float32_t *, float32x2x2_t, const int)
    - signature: void vst2_lane_p16 (poly16_t *, poly16x4x2_t, const int)
    - signature: void vst2_lane_p8 (poly8_t *, poly8x8x2_t, const int)
    - signature: void vst2q_lane_s32 (int32_t *, int32x4x2_t, const int)
    - signature: void vst2q_lane_s16 (int16_t *, int16x8x2_t, const int)
    - signature: void vst2q_lane_u32 (uint32_t *, uint32x4x2_t, const int)
    - signature: void vst2q_lane_u16 (uint16_t *, uint16x8x2_t, const int)
    - signature: void vst2q_lane_f32 (float32_t *, float32x4x2_t, const int)
    - signature: void vst2q_lane_p16 (poly16_t *, poly16x8x2_t, const int)
    - signature: uint32x2x3_t vld3_u32 (const uint32_t *)
    - signature: uint16x4x3_t vld3_u16 (const uint16_t *)
    - signature: uint8x8x3_t vld3_u8 (const uint8_t *)
    - signature: int32x2x3_t vld3_s32 (const int32_t *)
    - signature: int16x4x3_t vld3_s16 (const int16_t *)
    - signature: int8x8x3_t vld3_s8 (const int8_t *)
    - signature: float32x2x3_t vld3_f32 (const float32_t *)
    - signature: poly16x4x3_t vld3_p16 (const poly16_t *)
    - signature: poly8x8x3_t vld3_p8 (const poly8_t *)
    - signature: uint64x1x3_t vld3_u64 (const uint64_t *)
    - signature: int64x1x3_t vld3_s64 (const int64_t *)
    - signature: uint32x4x3_t vld3q_u32 (const uint32_t *)
    - signature: uint16x8x3_t vld3q_u16 (const uint16_t *)
    - signature: uint8x16x3_t vld3q_u8 (const uint8_t *)
    - signature: int32x4x3_t vld3q_s32 (const int32_t *)
    - signature: int16x8x3_t vld3q_s16 (const int16_t *)
    - signature: int8x16x3_t vld3q_s8 (const int8_t *)
    - signature: float32x4x3_t vld3q_f32 (const float32_t *)
    - signature: poly16x8x3_t vld3q_p16 (const poly16_t *)
    - signature: poly8x16x3_t vld3q_p8 (const poly8_t *)
    - signature: uint32x2x3_t vld3_lane_u32 (const uint32_t *, uint32x2x3_t, const int)
    - signature: uint16x4x3_t vld3_lane_u16 (const uint16_t *, uint16x4x3_t, const int)
    - signature: uint8x8x3_t vld3_lane_u8 (const uint8_t *, uint8x8x3_t, const int)
    - signature: int32x2x3_t vld3_lane_s32 (const int32_t *, int32x2x3_t, const int)
    - signature: int16x4x3_t vld3_lane_s16 (const int16_t *, int16x4x3_t, const int)
    - signature: int8x8x3_t vld3_lane_s8 (const int8_t *, int8x8x3_t, const int)
    - signature: float32x2x3_t vld3_lane_f32 (const float32_t *, float32x2x3_t, const int)
    - signature: poly16x4x3_t vld3_lane_p16 (const poly16_t *, poly16x4x3_t, const int)
    - signature: poly8x8x3_t vld3_lane_p8 (const poly8_t *, poly8x8x3_t, const int)
    - signature: int32x4x3_t vld3q_lane_s32 (const int32_t *, int32x4x3_t, const int)
    - signature: int16x8x3_t vld3q_lane_s16 (const int16_t *, int16x8x3_t, const int)
    - signature: uint32x4x3_t vld3q_lane_u32 (const uint32_t *, uint32x4x3_t, const int)
    - signature: uint16x8x3_t vld3q_lane_u16 (const uint16_t *, uint16x8x3_t, const int)
    - signature: float32x4x3_t vld3q_lane_f32 (const float32_t *, float32x4x3_t, const int)
    - signature: poly16x8x3_t vld3q_lane_p16 (const poly16_t *, poly16x8x3_t, const int)
    - signature: uint32x2x3_t vld3_dup_u32 (const uint32_t *)
    - signature: uint16x4x3_t vld3_dup_u16 (const uint16_t *)
    - signature: uint8x8x3_t vld3_dup_u8 (const uint8_t *)
    - signature: int32x2x3_t vld3_dup_s32 (const int32_t *)
    - signature: int16x4x3_t vld3_dup_s16 (const int16_t *)
    - signature: int8x8x3_t vld3_dup_s8 (const int8_t *)
    - signature: float32x2x3_t vld3_dup_f32 (const float32_t *)
    - signature: poly16x4x3_t vld3_dup_p16 (const poly16_t *)
    - signature: poly8x8x3_t vld3_dup_p8 (const poly8_t *)
    - signature: uint64x1x3_t vld3_dup_u64 (const uint64_t *)
    - signature: int64x1x3_t vld3_dup_s64 (const int64_t *)
    - signature: void vst3_u32 (uint32_t *, uint32x2x3_t)
    - signature: void vst3_u16 (uint16_t *, uint16x4x3_t)
    - signature: void vst3_u8 (uint8_t *, uint8x8x3_t)
    - signature: void vst3_s32 (int32_t *, int32x2x3_t)
    - signature: void vst3_s16 (int16_t *, int16x4x3_t)
    - signature: void vst3_s8 (int8_t *, int8x8x3_t)
    - signature: void vst3_f32 (float32_t *, float32x2x3_t)
    - signature: void vst3_p16 (poly16_t *, poly16x4x3_t)
    - signature: void vst3_p8 (poly8_t *, poly8x8x3_t)
    - signature: void vst3_u64 (uint64_t *, uint64x1x3_t)
    - signature: void vst3_s64 (int64_t *, int64x1x3_t)
    - signature: void vst3q_u32 (uint32_t *, uint32x4x3_t)
    - signature: void vst3q_u16 (uint16_t *, uint16x8x3_t)
    - signature: void vst3q_u8 (uint8_t *, uint8x16x3_t)
    - signature: void vst3q_s32 (int32_t *, int32x4x3_t)
    - signature: void vst3q_s16 (int16_t *, int16x8x3_t)
    - signature: void vst3q_s8 (int8_t *, int8x16x3_t)
    - signature: void vst3q_f32 (float32_t *, float32x4x3_t)
    - signature: void vst3q_p16 (poly16_t *, poly16x8x3_t)
    - signature: void vst3q_p8 (poly8_t *, poly8x16x3_t)
    - signature: void vst3_lane_u32 (uint32_t *, uint32x2x3_t, const int)
    - signature: void vst3_lane_u16 (uint16_t *, uint16x4x3_t, const int)
    - signature: void vst3_lane_u8 (uint8_t *, uint8x8x3_t, const int)
    - signature: void vst3_lane_s32 (int32_t *, int32x2x3_t, const int)
    - signature: void vst3_lane_s16 (int16_t *, int16x4x3_t, const int)
    - signature: void vst3_lane_s8 (int8_t *, int8x8x3_t, const int)
    - signature: void vst3_lane_f32 (float32_t *, float32x2x3_t, const int)
    - signature: void vst3_lane_p16 (poly16_t *, poly16x4x3_t, const int)
    - signature: void vst3_lane_p8 (poly8_t *, poly8x8x3_t, const int)
    - signature: void vst3q_lane_s32 (int32_t *, int32x4x3_t, const int)
    - signature: void vst3q_lane_s16 (int16_t *, int16x8x3_t, const int)
    - signature: void vst3q_lane_u32 (uint32_t *, uint32x4x3_t, const int)
    - signature: void vst3q_lane_u16 (uint16_t *, uint16x8x3_t, const int)
    - signature: void vst3q_lane_f32 (float32_t *, float32x4x3_t, const int)
    - signature: void vst3q_lane_p16 (poly16_t *, poly16x8x3_t, const int)
    - signature: uint32x2x4_t vld4_u32 (const uint32_t *)
    - signature: uint16x4x4_t vld4_u16 (const uint16_t *)
    - signature: uint8x8x4_t vld4_u8 (const uint8_t *)
    - signature: int32x2x4_t vld4_s32 (const int32_t *)
    - signature: int16x4x4_t vld4_s16 (const int16_t *)
    - signature: int8x8x4_t vld4_s8 (const int8_t *)
    - signature: float32x2x4_t vld4_f32 (const float32_t *)
    - signature: poly16x4x4_t vld4_p16 (const poly16_t *)
    - signature: poly8x8x4_t vld4_p8 (const poly8_t *)
    - signature: uint64x1x4_t vld4_u64 (const uint64_t *)
    - signature: int64x1x4_t vld4_s64 (const int64_t *)
    - signature: uint32x4x4_t vld4q_u32 (const uint32_t *)
    - signature: uint16x8x4_t vld4q_u16 (const uint16_t *)
    - signature: uint8x16x4_t vld4q_u8 (const uint8_t *)
    - signature: int32x4x4_t vld4q_s32 (const int32_t *)
    - signature: int16x8x4_t vld4q_s16 (const int16_t *)
    - signature: int8x16x4_t vld4q_s8 (const int8_t *)
    - signature: float32x4x4_t vld4q_f32 (const float32_t *)
    - signature: poly16x8x4_t vld4q_p16 (const poly16_t *)
    - signature: poly8x16x4_t vld4q_p8 (const poly8_t *)
    - signature: uint32x2x4_t vld4_lane_u32 (const uint32_t *, uint32x2x4_t, const int)
    - signature: uint16x4x4_t vld4_lane_u16 (const uint16_t *, uint16x4x4_t, const int)
    - signature: uint8x8x4_t vld4_lane_u8 (const uint8_t *, uint8x8x4_t, const int)
    - signature: int32x2x4_t vld4_lane_s32 (const int32_t *, int32x2x4_t, const int)
    - signature: int16x4x4_t vld4_lane_s16 (const int16_t *, int16x4x4_t, const int)
    - signature: int8x8x4_t vld4_lane_s8 (const int8_t *, int8x8x4_t, const int)
    - signature: float32x2x4_t vld4_lane_f32 (const float32_t *, float32x2x4_t, const int)
    - signature: poly16x4x4_t vld4_lane_p16 (const poly16_t *, poly16x4x4_t, const int)
    - signature: poly8x8x4_t vld4_lane_p8 (const poly8_t *, poly8x8x4_t, const int)
    - signature: int32x4x4_t vld4q_lane_s32 (const int32_t *, int32x4x4_t, const int)
    - signature: int16x8x4_t vld4q_lane_s16 (const int16_t *, int16x8x4_t, const int)
    - signature: uint32x4x4_t vld4q_lane_u32 (const uint32_t *, uint32x4x4_t, const int)
    - signature: uint16x8x4_t vld4q_lane_u16 (const uint16_t *, uint16x8x4_t, const int)
    - signature: float32x4x4_t vld4q_lane_f32 (const float32_t *, float32x4x4_t, const int)
    - signature: poly16x8x4_t vld4q_lane_p16 (const poly16_t *, poly16x8x4_t, const int)
    - signature: uint32x2x4_t vld4_dup_u32 (const uint32_t *)
    - signature: uint16x4x4_t vld4_dup_u16 (const uint16_t *)
    - signature: uint8x8x4_t vld4_dup_u8 (const uint8_t *)
    - signature: int32x2x4_t vld4_dup_s32 (const int32_t *)
    - signature: int16x4x4_t vld4_dup_s16 (const int16_t *)
    - signature: int8x8x4_t vld4_dup_s8 (const int8_t *)
    - signature: float32x2x4_t vld4_dup_f32 (const float32_t *)
    - signature: poly16x4x4_t vld4_dup_p16 (const poly16_t *)
    - signature: poly8x8x4_t vld4_dup_p8 (const poly8_t *)
    - signature: uint64x1x4_t vld4_dup_u64 (const uint64_t *)
    - signature: int64x1x4_t vld4_dup_s64 (const int64_t *)
    - signature: void vst4_u32 (uint32_t *, uint32x2x4_t)
    - signature: void vst4_u16 (uint16_t *, uint16x4x4_t)
    - signature: void vst4_u8 (uint8_t *, uint8x8x4_t)
    - signature: void vst4_s32 (int32_t *, int32x2x4_t)
    - signature: void vst4_s16 (int16_t *, int16x4x4_t)
    - signature: void vst4_s8 (int8_t *, int8x8x4_t)
    - signature: void vst4_f32 (float32_t *, float32x2x4_t)
    - signature: void vst4_p16 (poly16_t *, poly16x4x4_t)
    - signature: void vst4_p8 (poly8_t *, poly8x8x4_t)
    - signature: void vst4_u64 (uint64_t *, uint64x1x4_t)
    - signature: void vst4_s64 (int64_t *, int64x1x4_t)
    - signature: void vst4q_u32 (uint32_t *, uint32x4x4_t)
    - signature: void vst4q_u16 (uint16_t *, uint16x8x4_t)
    - signature: void vst4q_u8 (uint8_t *, uint8x16x4_t)
    - signature: void vst4q_s32 (int32_t *, int32x4x4_t)
    - signature: void vst4q_s16 (int16_t *, int16x8x4_t)
    - signature: void vst4q_s8 (int8_t *, int8x16x4_t)
    - signature: void vst4q_f32 (float32_t *, float32x4x4_t)
    - signature: void vst4q_p16 (poly16_t *, poly16x8x4_t)
    - signature: void vst4q_p8 (poly8_t *, poly8x16x4_t)
    - signature: void vst4_lane_u32 (uint32_t *, uint32x2x4_t, const int)
    - signature: void vst4_lane_u16 (uint16_t *, uint16x4x4_t, const int)
    - signature: void vst4_lane_u8 (uint8_t *, uint8x8x4_t, const int)
    - signature: void vst4_lane_s32 (int32_t *, int32x2x4_t, const int)
    - signature: void vst4_lane_s16 (int16_t *, int16x4x4_t, const int)
    - signature: void vst4_lane_s8 (int8_t *, int8x8x4_t, const int)
    - signature: void vst4_lane_f32 (float32_t *, float32x2x4_t, const int)
    - signature: void vst4_lane_p16 (poly16_t *, poly16x4x4_t, const int)
    - signature: void vst4_lane_p8 (poly8_t *, poly8x8x4_t, const int)
    - signature: void vst4q_lane_s32 (int32_t *, int32x4x4_t, const int)
    - signature: void vst4q_lane_s16 (int16_t *, int16x8x4_t, const int)
    - signature: void vst4q_lane_u32 (uint32_t *, uint32x4x4_t, const int)
    - signature: void vst4q_lane_u16 (uint16_t *, uint16x8x4_t, const int)
    - signature: void vst4q_lane_f32 (float32_t *, float32x4x4_t, const int)
    - signature: void vst4q_lane_p16 (poly16_t *, poly16x8x4_t, const int)
    - signature: uint32x2_t vand_u32 (uint32x2_t, uint32x2_t)
    - signature: uint16x4_t vand_u16 (uint16x4_t, uint16x4_t)
    - signature: uint8x8_t vand_u8 (uint8x8_t, uint8x8_t)
    - signature: int32x2_t vand_s32 (int32x2_t, int32x2_t)
    - signature: int16x4_t vand_s16 (int16x4_t, int16x4_t)
    - signature: int8x8_t vand_s8 (int8x8_t, int8x8_t)
    - signature: uint64x1_t vand_u64 (uint64x1_t, uint64x1_t)
    - signature: int64x1_t vand_s64 (int64x1_t, int64x1_t)
    - signature: uint32x4_t vandq_u32 (uint32x4_t, uint32x4_t)
    - signature: uint16x8_t vandq_u16 (uint16x8_t, uint16x8_t)
    - signature: uint8x16_t vandq_u8 (uint8x16_t, uint8x16_t)
    - signature: int32x4_t vandq_s32 (int32x4_t, int32x4_t)
    - signature: int16x8_t vandq_s16 (int16x8_t, int16x8_t)
    - signature: int8x16_t vandq_s8 (int8x16_t, int8x16_t)
    - signature: uint64x2_t vandq_u64 (uint64x2_t, uint64x2_t)
    - signature: int64x2_t vandq_s64 (int64x2_t, int64x2_t)
    - signature: uint32x2_t vorr_u32 (uint32x2_t, uint32x2_t)
    - signature: uint16x4_t vorr_u16 (uint16x4_t, uint16x4_t)
    - signature: uint8x8_t vorr_u8 (uint8x8_t, uint8x8_t)
    - signature: int32x2_t vorr_s32 (int32x2_t, int32x2_t)
    - signature: int16x4_t vorr_s16 (int16x4_t, int16x4_t)
    - signature: int8x8_t vorr_s8 (int8x8_t, int8x8_t)
    - signature: uint64x1_t vorr_u64 (uint64x1_t, uint64x1_t)
    - signature: int64x1_t vorr_s64 (int64x1_t, int64x1_t)
    - signature: uint32x4_t vorrq_u32 (uint32x4_t, uint32x4_t)
    - signature: uint16x8_t vorrq_u16 (uint16x8_t, uint16x8_t)
    - signature: uint8x16_t vorrq_u8 (uint8x16_t, uint8x16_t)
    - signature: int32x4_t vorrq_s32 (int32x4_t, int32x4_t)
    - signature: int16x8_t vorrq_s16 (int16x8_t, int16x8_t)
    - signature: int8x16_t vorrq_s8 (int8x16_t, int8x16_t)
    - signature: uint64x2_t vorrq_u64 (uint64x2_t, uint64x2_t)
    - signature: int64x2_t vorrq_s64 (int64x2_t, int64x2_t)
    - signature: uint32x2_t veor_u32 (uint32x2_t, uint32x2_t)
    - signature: uint16x4_t veor_u16 (uint16x4_t, uint16x4_t)
    - signature: uint8x8_t veor_u8 (uint8x8_t, uint8x8_t)
    - signature: int32x2_t veor_s32 (int32x2_t, int32x2_t)
    - signature: int16x4_t veor_s16 (int16x4_t, int16x4_t)
    - signature: int8x8_t veor_s8 (int8x8_t, int8x8_t)
    - signature: uint64x1_t veor_u64 (uint64x1_t, uint64x1_t)
    - signature: int64x1_t veor_s64 (int64x1_t, int64x1_t)
    - signature: uint32x4_t veorq_u32 (uint32x4_t, uint32x4_t)
    - signature: uint16x8_t veorq_u16 (uint16x8_t, uint16x8_t)
    - signature: uint8x16_t veorq_u8 (uint8x16_t, uint8x16_t)
    - signature: int32x4_t veorq_s32 (int32x4_t, int32x4_t)
    - signature: int16x8_t veorq_s16 (int16x8_t, int16x8_t)
    - signature: int8x16_t veorq_s8 (int8x16_t, int8x16_t)
    - signature: uint64x2_t veorq_u64 (uint64x2_t, uint64x2_t)
    - signature: int64x2_t veorq_s64 (int64x2_t, int64x2_t)
    - signature: uint32x2_t vbic_u32 (uint32x2_t, uint32x2_t)
    - signature: uint16x4_t vbic_u16 (uint16x4_t, uint16x4_t)
    - signature: uint8x8_t vbic_u8 (uint8x8_t, uint8x8_t)
    - signature: int32x2_t vbic_s32 (int32x2_t, int32x2_t)
    - signature: int16x4_t vbic_s16 (int16x4_t, int16x4_t)
    - signature: int8x8_t vbic_s8 (int8x8_t, int8x8_t)
    - signature: uint64x1_t vbic_u64 (uint64x1_t, uint64x1_t)
    - signature: int64x1_t vbic_s64 (int64x1_t, int64x1_t)
    - signature: uint32x4_t vbicq_u32 (uint32x4_t, uint32x4_t)
    - signature: uint16x8_t vbicq_u16 (uint16x8_t, uint16x8_t)
    - signature: uint8x16_t vbicq_u8 (uint8x16_t, uint8x16_t)
    - signature: int32x4_t vbicq_s32 (int32x4_t, int32x4_t)
    - signature: int16x8_t vbicq_s16 (int16x8_t, int16x8_t)
    - signature: int8x16_t vbicq_s8 (int8x16_t, int8x16_t)
    - signature: uint64x2_t vbicq_u64 (uint64x2_t, uint64x2_t)
    - signature: int64x2_t vbicq_s64 (int64x2_t, int64x2_t)
    - signature: uint32x2_t vorn_u32 (uint32x2_t, uint32x2_t)
    - signature: uint16x4_t vorn_u16 (uint16x4_t, uint16x4_t)
    - signature: uint8x8_t vorn_u8 (uint8x8_t, uint8x8_t)
    - signature: int32x2_t vorn_s32 (int32x2_t, int32x2_t)
    - signature: int16x4_t vorn_s16 (int16x4_t, int16x4_t)
    - signature: int8x8_t vorn_s8 (int8x8_t, int8x8_t)
    - signature: uint64x1_t vorn_u64 (uint64x1_t, uint64x1_t)
    - signature: int64x1_t vorn_s64 (int64x1_t, int64x1_t)
    - signature: uint32x4_t vornq_u32 (uint32x4_t, uint32x4_t)
    - signature: uint16x8_t vornq_u16 (uint16x8_t, uint16x8_t)
    - signature: uint8x16_t vornq_u8 (uint8x16_t, uint8x16_t)
    - signature: int32x4_t vornq_s32 (int32x4_t, int32x4_t)
    - signature: int16x8_t vornq_s16 (int16x8_t, int16x8_t)
    - signature: int8x16_t vornq_s8 (int8x16_t, int8x16_t)
    - signature: uint64x2_t vornq_u64 (uint64x2_t, uint64x2_t)
    - signature: int64x2_t vornq_s64 (int64x2_t, int64x2_t)
    - signature: poly8x8_t vreinterpret_p8_u32 (uint32x2_t)
    - signature: poly8x8_t vreinterpret_p8_u16 (uint16x4_t)
    - signature: poly8x8_t vreinterpret_p8_u8 (uint8x8_t)
    - signature: poly8x8_t vreinterpret_p8_s32 (int32x2_t)
    - signature: poly8x8_t vreinterpret_p8_s16 (int16x4_t)
    - signature: poly8x8_t vreinterpret_p8_s8 (int8x8_t)
    - signature: poly8x8_t vreinterpret_p8_u64 (uint64x1_t)
    - signature: poly8x8_t vreinterpret_p8_s64 (int64x1_t)
    - signature: poly8x8_t vreinterpret_p8_f32 (float32x2_t)
    - signature: poly8x8_t vreinterpret_p8_p16 (poly16x4_t)
    - signature: poly8x16_t vreinterpretq_p8_u32 (uint32x4_t)
    - signature: poly8x16_t vreinterpretq_p8_u16 (uint16x8_t)
    - signature: poly8x16_t vreinterpretq_p8_u8 (uint8x16_t)
    - signature: poly8x16_t vreinterpretq_p8_s32 (int32x4_t)
    - signature: poly8x16_t vreinterpretq_p8_s16 (int16x8_t)
    - signature: poly8x16_t vreinterpretq_p8_s8 (int8x16_t)
    - signature: poly8x16_t vreinterpretq_p8_u64 (uint64x2_t)
    - signature: poly8x16_t vreinterpretq_p8_s64 (int64x2_t)
    - signature: poly8x16_t vreinterpretq_p8_f32 (float32x4_t)
    - signature: poly8x16_t vreinterpretq_p8_p16 (poly16x8_t)
    - signature: poly16x4_t vreinterpret_p16_u32 (uint32x2_t)
    - signature: poly16x4_t vreinterpret_p16_u16 (uint16x4_t)
    - signature: poly16x4_t vreinterpret_p16_u8 (uint8x8_t)
    - signature: poly16x4_t vreinterpret_p16_s32 (int32x2_t)
    - signature: poly16x4_t vreinterpret_p16_s16 (int16x4_t)
    - signature: poly16x4_t vreinterpret_p16_s8 (int8x8_t)
    - signature: poly16x4_t vreinterpret_p16_u64 (uint64x1_t)
    - signature: poly16x4_t vreinterpret_p16_s64 (int64x1_t)
    - signature: poly16x4_t vreinterpret_p16_f32 (float32x2_t)
    - signature: poly16x4_t vreinterpret_p16_p8 (poly8x8_t)
    - signature: poly16x8_t vreinterpretq_p16_u32 (uint32x4_t)
    - signature: poly16x8_t vreinterpretq_p16_u16 (uint16x8_t)
    - signature: poly16x8_t vreinterpretq_p16_u8 (uint8x16_t)
    - signature: poly16x8_t vreinterpretq_p16_s32 (int32x4_t)
    - signature: poly16x8_t vreinterpretq_p16_s16 (int16x8_t)
    - signature: poly16x8_t vreinterpretq_p16_s8 (int8x16_t)
    - signature: poly16x8_t vreinterpretq_p16_u64 (uint64x2_t)
    - signature: poly16x8_t vreinterpretq_p16_s64 (int64x2_t)
    - signature: poly16x8_t vreinterpretq_p16_f32 (float32x4_t)
    - signature: poly16x8_t vreinterpretq_p16_p8 (poly8x16_t)
    - signature: float32x2_t vreinterpret_f32_u32 (uint32x2_t)
    - signature: float32x2_t vreinterpret_f32_u16 (uint16x4_t)
    - signature: float32x2_t vreinterpret_f32_u8 (uint8x8_t)
    - signature: float32x2_t vreinterpret_f32_s32 (int32x2_t)
    - signature: float32x2_t vreinterpret_f32_s16 (int16x4_t)
    - signature: float32x2_t vreinterpret_f32_s8 (int8x8_t)
    - signature: float32x2_t vreinterpret_f32_u64 (uint64x1_t)
    - signature: float32x2_t vreinterpret_f32_s64 (int64x1_t)
    - signature: float32x2_t vreinterpret_f32_p16 (poly16x4_t)
    - signature: float32x2_t vreinterpret_f32_p8 (poly8x8_t)
    - signature: float32x4_t vreinterpretq_f32_u32 (uint32x4_t)
    - signature: float32x4_t vreinterpretq_f32_u16 (uint16x8_t)
    - signature: float32x4_t vreinterpretq_f32_u8 (uint8x16_t)
    - signature: float32x4_t vreinterpretq_f32_s32 (int32x4_t)
    - signature: float32x4_t vreinterpretq_f32_s16 (int16x8_t)
    - signature: float32x4_t vreinterpretq_f32_s8 (int8x16_t)
    - signature: float32x4_t vreinterpretq_f32_u64 (uint64x2_t)
    - signature: float32x4_t vreinterpretq_f32_s64 (int64x2_t)
    - signature: float32x4_t vreinterpretq_f32_p16 (poly16x8_t)
    - signature: float32x4_t vreinterpretq_f32_p8 (poly8x16_t)
    - signature: int64x1_t vreinterpret_s64_u32 (uint32x2_t)
    - signature: int64x1_t vreinterpret_s64_u16 (uint16x4_t)
    - signature: int64x1_t vreinterpret_s64_u8 (uint8x8_t)
    - signature: int64x1_t vreinterpret_s64_s32 (int32x2_t)
    - signature: int64x1_t vreinterpret_s64_s16 (int16x4_t)
    - signature: int64x1_t vreinterpret_s64_s8 (int8x8_t)
    - signature: int64x1_t vreinterpret_s64_u64 (uint64x1_t)
    - signature: int64x1_t vreinterpret_s64_f32 (float32x2_t)
    - signature: int64x1_t vreinterpret_s64_p16 (poly16x4_t)
    - signature: int64x1_t vreinterpret_s64_p8 (poly8x8_t)
    - signature: int64x2_t vreinterpretq_s64_u32 (uint32x4_t)
    - signature: int64x2_t vreinterpretq_s64_u16 (uint16x8_t)
    - signature: int64x2_t vreinterpretq_s64_u8 (uint8x16_t)
    - signature: int64x2_t vreinterpretq_s64_s32 (int32x4_t)
    - signature: int64x2_t vreinterpretq_s64_s16 (int16x8_t)
    - signature: int64x2_t vreinterpretq_s64_s8 (int8x16_t)
    - signature: int64x2_t vreinterpretq_s64_u64 (uint64x2_t)
    - signature: int64x2_t vreinterpretq_s64_f32 (float32x4_t)
    - signature: int64x2_t vreinterpretq_s64_p16 (poly16x8_t)
    - signature: int64x2_t vreinterpretq_s64_p8 (poly8x16_t)
    - signature: uint64x1_t vreinterpret_u64_u32 (uint32x2_t)
    - signature: uint64x1_t vreinterpret_u64_u16 (uint16x4_t)
    - signature: uint64x1_t vreinterpret_u64_u8 (uint8x8_t)
    - signature: uint64x1_t vreinterpret_u64_s32 (int32x2_t)
    - signature: uint64x1_t vreinterpret_u64_s16 (int16x4_t)
    - signature: uint64x1_t vreinterpret_u64_s8 (int8x8_t)
    - signature: uint64x1_t vreinterpret_u64_s64 (int64x1_t)
    - signature: uint64x1_t vreinterpret_u64_f32 (float32x2_t)
    - signature: uint64x1_t vreinterpret_u64_p16 (poly16x4_t)
    - signature: uint64x1_t vreinterpret_u64_p8 (poly8x8_t)
    - signature: uint64x2_t vreinterpretq_u64_u32 (uint32x4_t)
    - signature: uint64x2_t vreinterpretq_u64_u16 (uint16x8_t)
    - signature: uint64x2_t vreinterpretq_u64_u8 (uint8x16_t)
    - signature: uint64x2_t vreinterpretq_u64_s32 (int32x4_t)
    - signature: uint64x2_t vreinterpretq_u64_s16 (int16x8_t)
    - signature: uint64x2_t vreinterpretq_u64_s8 (int8x16_t)
    - signature: uint64x2_t vreinterpretq_u64_s64 (int64x2_t)
    - signature: uint64x2_t vreinterpretq_u64_f32 (float32x4_t)
    - signature: uint64x2_t vreinterpretq_u64_p16 (poly16x8_t)
    - signature: uint64x2_t vreinterpretq_u64_p8 (poly8x16_t)
    - signature: int8x8_t vreinterpret_s8_u32 (uint32x2_t)
    - signature: int8x8_t vreinterpret_s8_u16 (uint16x4_t)
    - signature: int8x8_t vreinterpret_s8_u8 (uint8x8_t)
    - signature: int8x8_t vreinterpret_s8_s32 (int32x2_t)
    - signature: int8x8_t vreinterpret_s8_s16 (int16x4_t)
    - signature: int8x8_t vreinterpret_s8_u64 (uint64x1_t)
    - signature: int8x8_t vreinterpret_s8_s64 (int64x1_t)
    - signature: int8x8_t vreinterpret_s8_f32 (float32x2_t)
    - signature: int8x8_t vreinterpret_s8_p16 (poly16x4_t)
    - signature: int8x8_t vreinterpret_s8_p8 (poly8x8_t)
    - signature: int8x16_t vreinterpretq_s8_u32 (uint32x4_t)
    - signature: int8x16_t vreinterpretq_s8_u16 (uint16x8_t)
    - signature: int8x16_t vreinterpretq_s8_u8 (uint8x16_t)
    - signature: int8x16_t vreinterpretq_s8_s32 (int32x4_t)
    - signature: int8x16_t vreinterpretq_s8_s16 (int16x8_t)
    - signature: int8x16_t vreinterpretq_s8_u64 (uint64x2_t)
    - signature: int8x16_t vreinterpretq_s8_s64 (int64x2_t)
    - signature: int8x16_t vreinterpretq_s8_f32 (float32x4_t)
    - signature: int8x16_t vreinterpretq_s8_p16 (poly16x8_t)
    - signature: int8x16_t vreinterpretq_s8_p8 (poly8x16_t)
    - signature: int16x4_t vreinterpret_s16_u32 (uint32x2_t)
    - signature: int16x4_t vreinterpret_s16_u16 (uint16x4_t)
    - signature: int16x4_t vreinterpret_s16_u8 (uint8x8_t)
    - signature: int16x4_t vreinterpret_s16_s32 (int32x2_t)
    - signature: int16x4_t vreinterpret_s16_s8 (int8x8_t)
    - signature: int16x4_t vreinterpret_s16_u64 (uint64x1_t)
    - signature: int16x4_t vreinterpret_s16_s64 (int64x1_t)
    - signature: int16x4_t vreinterpret_s16_f32 (float32x2_t)
    - signature: int16x4_t vreinterpret_s16_p16 (poly16x4_t)
    - signature: int16x4_t vreinterpret_s16_p8 (poly8x8_t)
    - signature: int16x8_t vreinterpretq_s16_u32 (uint32x4_t)
    - signature: int16x8_t vreinterpretq_s16_u16 (uint16x8_t)
    - signature: int16x8_t vreinterpretq_s16_u8 (uint8x16_t)
    - signature: int16x8_t vreinterpretq_s16_s32 (int32x4_t)
    - signature: int16x8_t vreinterpretq_s16_s8 (int8x16_t)
    - signature: int16x8_t vreinterpretq_s16_u64 (uint64x2_t)
    - signature: int16x8_t vreinterpretq_s16_s64 (int64x2_t)
    - signature: int16x8_t vreinterpretq_s16_f32 (float32x4_t)
    - signature: int16x8_t vreinterpretq_s16_p16 (poly16x8_t)
    - signature: int16x8_t vreinterpretq_s16_p8 (poly8x16_t)
    - signature: int32x2_t vreinterpret_s32_u32 (uint32x2_t)
    - signature: int32x2_t vreinterpret_s32_u16 (uint16x4_t)
    - signature: int32x2_t vreinterpret_s32_u8 (uint8x8_t)
    - signature: int32x2_t vreinterpret_s32_s16 (int16x4_t)
    - signature: int32x2_t vreinterpret_s32_s8 (int8x8_t)
    - signature: int32x2_t vreinterpret_s32_u64 (uint64x1_t)
    - signature: int32x2_t vreinterpret_s32_s64 (int64x1_t)
    - signature: int32x2_t vreinterpret_s32_f32 (float32x2_t)
    - signature: int32x2_t vreinterpret_s32_p16 (poly16x4_t)
    - signature: int32x2_t vreinterpret_s32_p8 (poly8x8_t)
    - signature: int32x4_t vreinterpretq_s32_u32 (uint32x4_t)
    - signature: int32x4_t vreinterpretq_s32_u16 (uint16x8_t)
    - signature: int32x4_t vreinterpretq_s32_u8 (uint8x16_t)
    - signature: int32x4_t vreinterpretq_s32_s16 (int16x8_t)
    - signature: int32x4_t vreinterpretq_s32_s8 (int8x16_t)
    - signature: int32x4_t vreinterpretq_s32_u64 (uint64x2_t)
    - signature: int32x4_t vreinterpretq_s32_s64 (int64x2_t)
    - signature: int32x4_t vreinterpretq_s32_f32 (float32x4_t)
    - signature: int32x4_t vreinterpretq_s32_p16 (poly16x8_t)
    - signature: int32x4_t vreinterpretq_s32_p8 (poly8x16_t)
    - signature: uint8x8_t vreinterpret_u8_u32 (uint32x2_t)
    - signature: uint8x8_t vreinterpret_u8_u16 (uint16x4_t)
    - signature: uint8x8_t vreinterpret_u8_s32 (int32x2_t)
    - signature: uint8x8_t vreinterpret_u8_s16 (int16x4_t)
    - signature: uint8x8_t vreinterpret_u8_s8 (int8x8_t)
    - signature: uint8x8_t vreinterpret_u8_u64 (uint64x1_t)
    - signature: uint8x8_t vreinterpret_u8_s64 (int64x1_t)
    - signature: uint8x8_t vreinterpret_u8_f32 (float32x2_t)
    - signature: uint8x8_t vreinterpret_u8_p16 (poly16x4_t)
    - signature: uint8x8_t vreinterpret_u8_p8 (poly8x8_t)
    - signature: uint8x16_t vreinterpretq_u8_u32 (uint32x4_t)
    - signature: uint8x16_t vreinterpretq_u8_u16 (uint16x8_t)
    - signature: uint8x16_t vreinterpretq_u8_s32 (int32x4_t)
    - signature: uint8x16_t vreinterpretq_u8_s16 (int16x8_t)
    - signature: uint8x16_t vreinterpretq_u8_s8 (int8x16_t)
    - signature: uint8x16_t vreinterpretq_u8_u64 (uint64x2_t)
    - signature: uint8x16_t vreinterpretq_u8_s64 (int64x2_t)
    - signature: uint8x16_t vreinterpretq_u8_f32 (float32x4_t)
    - signature: uint8x16_t vreinterpretq_u8_p16 (poly16x8_t)
    - signature: uint8x16_t vreinterpretq_u8_p8 (poly8x16_t)
    - signature: uint16x4_t vreinterpret_u16_u32 (uint32x2_t)
    - signature: uint16x4_t vreinterpret_u16_u8 (uint8x8_t)
    - signature: uint16x4_t vreinterpret_u16_s32 (int32x2_t)
    - signature: uint16x4_t vreinterpret_u16_s16 (int16x4_t)
    - signature: uint16x4_t vreinterpret_u16_s8 (int8x8_t)
    - signature: uint16x4_t vreinterpret_u16_u64 (uint64x1_t)
    - signature: uint16x4_t vreinterpret_u16_s64 (int64x1_t)
    - signature: uint16x4_t vreinterpret_u16_f32 (float32x2_t)
    - signature: uint16x4_t vreinterpret_u16_p16 (poly16x4_t)
    - signature: uint16x4_t vreinterpret_u16_p8 (poly8x8_t)
    - signature: uint16x8_t vreinterpretq_u16_u32 (uint32x4_t)
    - signature: uint16x8_t vreinterpretq_u16_u8 (uint8x16_t)
    - signature: uint16x8_t vreinterpretq_u16_s32 (int32x4_t)
    - signature: uint16x8_t vreinterpretq_u16_s16 (int16x8_t)
    - signature: uint16x8_t vreinterpretq_u16_s8 (int8x16_t)
    - signature: uint16x8_t vreinterpretq_u16_u64 (uint64x2_t)
    - signature: uint16x8_t vreinterpretq_u16_s64 (int64x2_t)
    - signature: uint16x8_t vreinterpretq_u16_f32 (float32x4_t)
    - signature: uint16x8_t vreinterpretq_u16_p16 (poly16x8_t)
    - signature: uint16x8_t vreinterpretq_u16_p8 (poly8x16_t)
    - signature: uint32x2_t vreinterpret_u32_u16 (uint16x4_t)
    - signature: uint32x2_t vreinterpret_u32_u8 (uint8x8_t)
    - signature: uint32x2_t vreinterpret_u32_s32 (int32x2_t)
    - signature: uint32x2_t vreinterpret_u32_s16 (int16x4_t)
    - signature: uint32x2_t vreinterpret_u32_s8 (int8x8_t)
    - signature: uint32x2_t vreinterpret_u32_u64 (uint64x1_t)
    - signature: uint32x2_t vreinterpret_u32_s64 (int64x1_t)
    - signature: uint32x2_t vreinterpret_u32_f32 (float32x2_t)
    - signature: uint32x2_t vreinterpret_u32_p16 (poly16x4_t)
    - signature: uint32x2_t vreinterpret_u32_p8 (poly8x8_t)
    - signature: uint32x4_t vreinterpretq_u32_u16 (uint16x8_t)
    - signature: uint32x4_t vreinterpretq_u32_u8 (uint8x16_t)
    - signature: uint32x4_t vreinterpretq_u32_s32 (int32x4_t)
    - signature: uint32x4_t vreinterpretq_u32_s16 (int16x8_t)
    - signature: uint32x4_t vreinterpretq_u32_s8 (int8x16_t)
    - signature: uint32x4_t vreinterpretq_u32_u64 (uint64x2_t)
    - signature: uint32x4_t vreinterpretq_u32_s64 (int64x2_t)
    - signature: uint32x4_t vreinterpretq_u32_f32 (float32x4_t)
    - signature: uint32x4_t vreinterpretq_u32_p16 (poly16x8_t)
    - signature: uint32x4_t vreinterpretq_u32_p8 (poly8x16_t)
    - signature: __int64 _arm_smlal(__int64 _RdHiLo, int _Rn, int _Rm)
    - signature: unsigned __int64 _arm_umlal(unsigned __int64 _RdHiLo, unsigned int _Rn, unsigned int _Rm)
    - signature: unsigned int _arm_clz(unsigned int _Rm)
    - signature: int _arm_qadd(int _Rm, int _Rn)
    - signature: int _arm_qdadd(int _Rm, int _Rn)
    - signature: int _arm_qdsub(int _Rm, int _Rn)
    - signature: int _arm_qsub(int _Rm, int _Rn)
    - signature: int _arm_smlabb(int _Rn, int _Rm, int _Ra)
    - signature: int _arm_smlabt(int _Rn, int _Rm, int _Ra)
    - signature: int _arm_smlatb(int _Rn, int _Rm, int _Ra)
    - signature: int _arm_smlatt(int _Rn, int _Rm, int _Ra)
    - signature: __int64 _arm_smlalbb(__int64 _RdHiLo, int _Rn, int _Rm)
    - signature: __int64 _arm_smlalbt(__int64 _RdHiLo, int _Rn, int _Rm)
    - signature: __int64 _arm_smlaltb(__int64 _RdHiLo, int _Rn, int _Rm)
    - signature: __int64 _arm_smlaltt(__int64 _RdHiLo, int _Rn, int _Rm)
    - signature: int _arm_smlawb(int _Rn, int _Rm, int _Ra)
    - signature: int _arm_smlawt(int _Rn, int _Rm, int _Ra)
    - signature: int _arm_smulbb(int _Rn, int _Rm)
    - signature: int _arm_smulbt(int _Rn, int _Rm)
    - signature: int _arm_smultb(int _Rn, int _Rm)
    - signature: int _arm_smultt(int _Rn, int _Rm)
    - signature: int _arm_smulwb(int _Rn, int _Rm)
    - signature: int _arm_smulwt(int _Rn, int _Rm)
    - signature: int _arm_sadd16(int _Rn, int _Rm)
    - signature: int _arm_sadd8(int _Rn, int _Rm)
    - signature: int _arm_sasx(int _Rn, int _Rm)
    - signature: int _arm_ssax(int _Rn, int _Rm)
    - signature: int _arm_ssub16(int _Rn, int _Rm)
    - signature: int _arm_ssub8(int _Rn, int _Rm)
    - signature: int _arm_shadd16(int _Rn, int _Rm)
    - signature: int _arm_shadd8(int _Rn, int _Rm)
    - signature: int _arm_shasx(int _Rn, int _Rm)
    - signature: int _arm_shsax(int _Rn, int _Rm)
    - signature: int _arm_shsub16(int _Rn, int _Rm)
    - signature: int _arm_shsub8(int _Rn, int _Rm)
    - signature: int _arm_qadd16(int _Rn, int _Rm)
    - signature: int _arm_qadd8(int _Rn, int _Rm)
    - signature: int _arm_qasx(int _Rn, int _Rm)
    - signature: int _arm_qsax(int _Rn, int _Rm)
    - signature: int _arm_qsub16(int _Rn, int _Rm)
    - signature: int _arm_qsub8(int _Rn, int _Rm)
    - signature: unsigned int _arm_uadd16(unsigned int _Rn, unsigned int _Rm)
    - signature: unsigned int _arm_uadd8(unsigned int _Rn, unsigned int _Rm)
    - signature: unsigned int _arm_uasx(unsigned int _Rn, unsigned int _Rm)
    - signature: unsigned int _arm_usax(unsigned int _Rn, unsigned int _Rm)
    - signature: unsigned int _arm_usub16(unsigned int _Rn, unsigned int _Rm)
    - signature: unsigned int _arm_usub8(unsigned int _Rn, unsigned int _Rm)
    - signature: unsigned int _arm_uhadd16(unsigned int _Rn, unsigned int _Rm)
    - signature: unsigned int _arm_uhadd8(unsigned int _Rn, unsigned int _Rm)
    - signature: unsigned int _arm_uhasx(unsigned int _Rn, unsigned int _Rm)
    - signature: unsigned int _arm_uhsax(unsigned int _Rn, unsigned int _Rm)
    - signature: unsigned int _arm_uhsub16(unsigned int _Rn, unsigned int _Rm)
    - signature: unsigned int _arm_uhsub8(unsigned int _Rn, unsigned int _Rm)
    - signature: unsigned int _arm_uqadd16(unsigned int _Rn, unsigned int _Rm)
    - signature: unsigned int _arm_uqadd8(unsigned int _Rn, unsigned int _Rm)
    - signature: unsigned int _arm_uqasx(unsigned int _Rn, unsigned int _Rm)
    - signature: unsigned int _arm_uqsax(unsigned int _Rn, unsigned int _Rm)
    - signature: unsigned int _arm_uqsub16(unsigned int _Rn, unsigned int _Rm)
    - signature: unsigned int _arm_uqsub8(unsigned int _Rn, unsigned int _Rm)
    - signature: int _arm_sxtab(int _Rn, int _Rm, unsigned int _Rotation)
    - signature: int _arm_sxtab16(int _Rn, int _Rm, unsigned int _Rotation)
    - signature: int _arm_sxtah(int _Rn, int _Rm, unsigned int _Rotation)
    - signature: unsigned int _arm_uxtab(unsigned int _Rn, unsigned int _Rm, unsigned int _Rotation)
    - signature: unsigned int _arm_uxtab16(unsigned int _Rn, unsigned int _Rm, unsigned int _Rotation)
    - signature: unsigned int _arm_uxtah(unsigned int _Rn, unsigned int _Rm, unsigned int _Rotation)
    - signature: int _arm_sxtb(int _Rn, unsigned int _Rotation)
    - signature: int _arm_sxtb16(int _Rn, unsigned int _Rotation)
    - signature: int _arm_sxth(int _Rn, unsigned int _Rotation)
    - signature: unsigned int _arm_uxtb(unsigned int _Rn, unsigned int _Rotation)
    - signature: unsigned int _arm_uxtb16(unsigned int _Rn, unsigned int _Rotation)
    - signature: unsigned int _arm_uxth(unsigned int _Rn, unsigned int _Rotation)
    - signature: int _arm_pkhbt(int _Rn, int _Rm, unsigned int _Lsl_imm)
    - signature: int _arm_pkhtb(int _Rn, int _Rm, unsigned int _Asr_imm)
    - signature: unsigned int _arm_usad8(unsigned int _Rn, unsigned int _Rm)
    - signature: unsigned int _arm_usada8(unsigned int _Rn, unsigned int _Rm, unsigned int _Ra)
    - signature: int _arm_ssat(unsigned int _Sat_imm, _int _Rn, _ARMINTR_SHIFT_T _Shift_type, unsigned int _Shift_imm)
    - signature: int _arm_usat(unsigned int _Sat_imm, _int _Rn, _ARMINTR_SHIFT_T _Shift_type, unsigned int _Shift_imm)
    - signature: int _arm_ssat16(unsigned int _Sat_imm, _int _Rn)
    - signature: int _arm_usat16(unsigned int _Sat_imm, _int _Rn)
    - signature: unsigned int _arm_rev(unsigned int _Rm)
    - signature: unsigned int _arm_rev16(unsigned int _Rm)
    - signature: unsigned int _arm_revsh(unsigned int _Rm)
    - signature: int _arm_smlad(int _Rn, int _Rm, int _Ra)
    - signature: int _arm_smladx(int _Rn, int _Rm, int _Ra)
    - signature: int _arm_smlsd(int _Rn, int _Rm, int _Ra)
    - signature: int _arm_smlsdx(int _Rn, int _Rm, int _Ra)
    - signature: int _arm_smmla(int _Rn, int _Rm, int _Ra)
    - signature: int _arm_smmlar(int _Rn, int _Rm, int _Ra)
    - signature: int _arm_smmls(int _Rn, int _Rm, int _Ra)
    - signature: int _arm_smmlsr(int _Rn, int _Rm, int _Ra)
    - signature: int _arm_smmul(int _Rn, int _Rm)
    - signature: int _arm_smmulr(int _Rn, int _Rm)
    - signature: __int64 _arm_smlald(__int64 _RdHiLo, int _Rn, int _Rm)
    - signature: __int64 _arm_smlaldx(__int64 _RdHiLo, int _Rn, int _Rm)
    - signature: __int64 _arm_smlsld(__int64 _RdHiLo, int _Rn, int _Rm)
    - signature: __int64 _arm_smlsldx(__int64 _RdHiLo, int _Rn, int _Rm)
    - signature: int _arm_smuad(int _Rn, int _Rm)
    - signature: int _arm_smuadx(int _Rn, int _Rm)
    - signature: int _arm_smusd(int _Rn, int _Rm)
    - signature: int _arm_smusdx(int _Rn, int _Rm)
    - signature: __int64 _arm_smull(int _Rn, int _Rm)
    - signature: unsigned __int64 _arm_umaal(unsigned int _RdLo, unsigned int _RdHi, unsigned int _Rn, unsigned int _Rm)
    - signature: unsigned int _arm_bfc(unsigned int _Rd, unsigned int _Lsb, unsigned int _Width)
    - signature: unsigned int _arm_bfi(unsigned int _Rd, unsigned int _Rn, unsigned int _Lsb, unsigned int _Width)
    - signature: unsigned int _arm_rbit(unsigned int _Rm)
    - signature: int _arm_sbfx(int _Rn, unsigned int _Lsb, unsigned int _Width)
    - signature: unsigned int _arm_ubfx(unsigned int _Rn, unsigned int _Lsb, unsigned int _Width)
    - signature: int _arm_sdiv(int _Rn, int _Rm)
    - signature: unsigned int _arm_udiv(unsigned int _Rn, unsigned int _Rm)
    - signature: void __cps(unsigned int _Ops, unsigned int _Flags, unsigned int _Mode)
    - signature: void __dmb(unsigned int _Type )
    - signature: void __dsb(unsigned int _Type)
    - signature: void __isb(unsigned int _Type)
    - signature: void __emit(unsigned __int32 opcode)
    - signature: unsigned int __hvc(unsigned int, ...)
    - signature: __int16 __iso_volatile_load16(const volatile__int16 *)
    - signature: __int32 __iso_volatile_load32(const volatile__int32 *)
    - signature: __int64 __iso_volatile_load64(const volatile__int64 *)
    - signature: __int8 __iso_volatile_load8(const volatile __int8 *)
    - signature: void __iso_volatile_store16(volatile __int16 *, __int16)
    - signature: void __iso_volatile_store32(volatile __int32 *, __int32)
    - signature: void __iso_volatile_store64(volatile __int64 *, __int64)
    - signature: void __iso_volatile_store8(volatile__int8 *, __int8)
    - signature: __int64 __ldrexd(const volatile__int64 *)
    - signature: void __cdecl __prefetch(const void *)
    - signature: unsigned __int64 __rdpmccntr64(void)
    - signature: void __sev(void)
    - signature: void __static_assert(int, const char *)
    - signature: unsigned int __swi(unsigned int, ...)
    - signature: int __trap(int, ...)
    - signature: void __wfe(void)
    - signature: void __wfi(void)
    - signature: int _AddSatInt(int, int)
    - signature: double _CopyDoubleFromInt64(__int64)
    - signature: float _CopyFloatFromInt32(__int32)
    - signature: __int32 _CopyInt32FromFloat(float)
    - signature: __int64 _CopyInt64FromDouble(double)
    - signature: unsigned int _CountLeadingOnes(unsigned long)
    - signature: unsigned int _CountLeadingOnes64(unsigned __int64)
    - signature: unsigned int _CountLeadingSigns(long)
    - signature: unsigned int _CountLeadingSigns64(__int64)
    - signature: unsigned int _CountLeadingZeros(unsigned long)
    - signature: unsigned int _CountLeadingZeros64(unsigned __int64)
    - signature: unsigned int _CountOneBits(unsigned long)
    - signature: unsigned int _CountOneBits64(unsigned __int64)
    - signature: int _DAddSatInt(int, int)
    - signature: int _DSubSatInt(int, int)
    - signature: int _isunordered(double, double)
    - signature: int _isunorderedf(float, float)
    - signature: unsigned int _MoveFromCoprocessor(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
    - signature: unsigned int _MoveFromCoprocessor2(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
    - signature: unsigned __int64 _MoveFromCoprocessor64(unsigned int, unsigned int, unsigned int)
    - signature: void _MoveToCoprocessor(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
    - signature: void _MoveToCoprocessor2(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
    - signature: void _MoveToCoprocessor64(unsigned __int64, unsigned int, unsigned int, unsigned int)
    - signature: long _MulHigh(long, long)
    - signature: unsigned long _MulUnsignedHigh(unsigned long, unsigned long)
    - signature: int _ReadBankedReg(int _Reg)
    - signature: int _ReadStatusReg(int)
    - signature: int _SubSatInt(int, int)
    - signature: void _WriteBankedReg(int _Value, int _Reg)
    - signature: void _WriteStatusReg(int, int, int)
    # Begin of ARM Support for Intrinsics from Other Architectures
    - signature: void __assume(int)
    - signature: void __code_seg(const char *)
    - signature: void __cdecl __debugbreak(void)
    - signature: void __fastfail(unsigned int)
    - signature: void __nop(void)
    - signature: void __yield(void)
    - signature: void * _AddressOfReturnAddress(void)
    - signature: unsigned char _BitScanForward(unsigned long *, unsigned long)
    - signature: unsigned char _BitScanForward64(unsigned long *, unsigned __int64)
    - signature: unsigned char _BitScanReverse(unsigned long *, unsigned long)
    - signature: unsigned char _BitScanReverse64(unsigned long *, unsigned __int64)
    - signature: unsigned char _bittest(long const *, long)
    - signature: unsigned char _bittest64(__int64 const *, __int64)
    - signature: unsigned char _bittestandcomplement(long *, long)
    - signature: unsigned char _bittestandreset(long *, long)
    - signature: unsigned char _bittestandset(long *, long)
    - signature: unsigned __int64 __cdecl _byteswap_uint64(unsigned __int64)
    - signature: unsigned long __cdecl _byteswap_ulong(unsigned long)
    - signature: unsigned short __cdecl _byteswap_ushort(unsigned short)
    - signature: void __cdecl _disable(void)
    - signature: void __cdecl _enable(void)
    - signature: unsigned long __cdecl _lrotl(unsigned long, int)
    - signature: unsigned long __cdecl _lrotr(unsigned long, int)
    - signature: void _ReadBarrier(void)
    - signature: void _ReadWriteBarrier(void)
    - signature: void * _ReturnAddress(void)
    - signature: unsigned int __cdecl _rotl(unsigned int _Value, int _Shift)
    - signature: unsigned short _rotl16(unsigned short _Value, unsigned char _Shift)
    - signature: unsigned __int64 __cdecl _rotl64(unsigned __int64 _Value, int _Shift)
    - signature: unsigned char _rotl8(unsigned char _Value, unsigned char _Shift)
    - signature: unsigned int __cdecl _rotr(unsigned int _Value, int _Shift)
    - signature: unsigned short _rotr16(unsigned short _Value, unsigned char _Shift)
    - signature: unsigned __int64 __cdecl _rotr64(unsigned __int64 _Value, int _Shift)
    - signature: unsigned char _rotr8(unsigned char _Value, unsigned char _Shift)
    - signature: int __cdecl _setjmpex(jmp_buf)
    - signature: void _WriteBarrier(void)
    # End of ARM Support for Intrinsics from Other Architectures
    - signature: long _InterlockedAdd(long _volatile*, long)
    - signature: __int64 _InterlockedAdd64(__int64 volatile*, __int64)
    - signature: __int64 _InterlockedAdd64_acq(__int64 volatile*, __int64)
    - signature: __int64 _InterlockedAdd64_nf(__int64 volatile*, __int64)
    - signature: __int64 _InterlockedAdd64_rel(__int64 volatile*, __int64)
    - signature: long _InterlockedAdd_acq(long volatile*, long)
    - signature: long _InterlockedAdd_nf(long volatile*, long)
    - signature: long _InterlockedAdd_rel(long volatile*, long)
    - signature: long _InterlockedAnd(long volatile*, long)
    - signature: short _InterlockedAnd16(short volatile*, short)
    - signature: short _InterlockedAnd16_acq(short volatile*, short)
    - signature: short _InterlockedAnd16_nf(short volatile*, short)
    - signature: short _InterlockedAnd16_rel(short volatile*, short)
    - signature: __int64 _InterlockedAnd64(__int64 volatile*, __int64)
    - signature: __int64 _InterlockedAnd64_acq(__int64 volatile*, __int64)
    - signature: __int64 _InterlockedAnd64_nf(__int64 volatile*, __int64)
    - signature: __int64 _InterlockedAnd64_rel(__int64 volatile*, __int64)
    - signature: char _InterlockedAnd8(char volatile*, char)
    - signature: char _InterlockedAnd8_acq(char volatile*, char)
    - signature: char _InterlockedAnd8_nf(char volatile*, char)
    - signature: char _InterlockedAnd8_rel(char volatile*, char)
    - signature: long _InterlockedAnd_acq(long volatile*, long)
    - signature: long _InterlockedAnd_nf(long volatile*, long)
    - signature: long _InterlockedAnd_rel(long volatile*, long)
    - signature: long __cdecl _InterlockedCompareExchange(long volatile*, long, long)
    - signature: short _InterlockedCompareExchange16(short volatile*, short, short)
    - signature: short _InterlockedCompareExchange16_acq(short volatile*, short, short)
    - signature: short _InterlockedCompareExchange16_nf(short volatile*, short, short)
    - signature: short _InterlockedCompareExchange16_rel(short volatile*, short, short)
    - signature: __int64 _InterlockedCompareExchange64(__int64 volatile*, __int64, __int64)
    - signature: __int64 _InterlockedCompareExchange64_acq(__int64 volatile *, __int64, __int64)
    - signature: __int64 _InterlockedCompareExchange64_nf(__int64 volatile*, __int64, __int64)
    - signature: __int64 _InterlockedCompareExchange64_rel(__int64 volatile*, __int64, __int64)
    - signature: char _InterlockedCompareExchange8(char volatile*, char, char)
    - signature: char _InterlockedCompareExchange8_acq(char volatile*, char, char)
    - signature: char _InterlockedCompareExchange8_nf(char volatile*, char, char)
    - signature: char _InterlockedCompareExchange8_rel(char volatile*, char, char)
    - signature: void * _InterlockedCompareExchangePointer(void * volatile*, void *, void *)
    - signature: void * _InterlockedCompareExchangePointer_acq(void * volatile*, void *, void *)
    - signature: void * _InterlockedCompareExchangePointer_nf(void * volatile *, void *, void *)
    - signature: void * _InterlockedCompareExchangePointer_rel(void * volatile *, void *, void *)
    - signature: long _InterlockedCompareExchange_acq(long volatile*, long, long)
    - signature: long _InterlockedCompareExchange_nf(long volatile*, long, long)
    - signature: long _InterlockedCompareExchange_rel(long volatile*, long, long)
    - signature: long __cdecl _InterlockedDecrement(long volatile*)
    - signature: short _InterlockedDecrement16(short volatile*)
    - signature: short _InterlockedDecrement16_acq(short volatile*)
    - signature: short _InterlockedDecrement16_nf(short volatile*)
    - signature: short _InterlockedDecrement16_rel(short volatile*)
    - signature: __int64 _InterlockedDecrement64(__int64 volatile*)
    - signature: __int64 _InterlockedDecrement64_acq(__int64 volatile*)
    - signature: __int64 _InterlockedDecrement64_nf(__int64 volatile*)
    - signature: __int64 _InterlockedDecrement64_rel(__int64 volatile*)
    - signature: long _InterlockedDecrement_acq(long volatile*)
    - signature: long _InterlockedDecrement_nf(long volatile*)
    - signature: long _InterlockedDecrement_rel(long volatile*)
    - signature: long __cdecl _InterlockedExchange(long volatile* _Target, long)
    - signature: short _InterlockedExchange16(short volatile* _Target, short)
    - signature: short _InterlockedExchange16_acq(short volatile* _Target, short)
    - signature: short _InterlockedExchange16_nf(short volatile* _Target, short)
    - signature: __int64 _InterlockedExchange64(__int64 volatile* _Target, __int64)
    - signature: __int64 _InterlockedExchange64_acq(__int64 volatile* _Target, __int64)
    - signature: __int64 _InterlockedExchange64_nf(__int64 volatile* _Target, __int64)
    - signature: char _InterlockedExchange8(char volatile* _Target, char)
    - signature: char _InterlockedExchange8_acq(char volatile* _Target, char)
    - signature: char _InterlockedExchange8_nf(char volatile* _Target, char)
    - signature: ong __cdecl _InterlockedExchangeAdd(long volatile*, long)
    - signature: short _InterlockedExchangeAdd16(short volatile*, short)
    - signature: short _InterlockedExchangeAdd16_acq(short volatile*, short)
    - signature: short _InterlockedExchangeAdd16_nf(short volatile*, short)
    - signature: short _InterlockedExchangeAdd16_rel(short volatile*, short)
    - signature: __int64 _InterlockedExchangeAdd64(__int64 volatile*, __int64)
    - signature: __int64 _InterlockedExchangeAdd64_acq(__int64 volatile*, __int64)
    - signature: __int64 _InterlockedExchangeAdd64_nf(__int64 volatile*, __int64)
    - signature: __int64 _InterlockedExchangeAdd64_rel(__int64 volatile*, __int64)
    - signature: char _InterlockedExchangeAdd8(char volatile*, char)
    - signature: char _InterlockedExchangeAdd8_acq(char volatile*, char)
    - signature: char _InterlockedExchangeAdd8_nf(char volatile*, char)
    - signature: char _InterlockedExchangeAdd8_rel(char volatile*, char)
    - signature: long _InterlockedExchangeAdd_acq(long volatile*, long)
    - signature: long _InterlockedExchangeAdd_nf(long volatile*, long)
    - signature: long _InterlockedExchangeAdd_rel(long volatile*, long)
    - signature: void * _InterlockedExchangePointer(void * volatile* _Target, void *)
    - signature: void * _InterlockedExchangePointer_acq(void * volatile* _Target, void *)
    - signature: void * _InterlockedExchangePointer_nf(void * volatile* _Target, void *)
    - signature: long _InterlockedExchange_acq(long volatile* _Target, long)
    - signature: long _InterlockedExchange_nf(long volatile* _Target, long)
    - signature: long __cdecl _InterlockedIncrement(long volatile*)
    - signature: short _InterlockedIncrement16(short volatile*)
    - signature: short _InterlockedIncrement16_acq(short volatile*)
    - signature: short _InterlockedIncrement16_nf(short volatile*)
    - signature: short _InterlockedIncrement16_rel(short volatile*)
    - signature: __int64 _InterlockedIncrement64(__int64 volatile*)
    - signature: __int64 _InterlockedIncrement64_acq(__int64 volatile*)
    - signature: __int64 _InterlockedIncrement64_nf(__int64 volatile*)
    - signature: __int64 _InterlockedIncrement64_rel(__int64 volatile*)
    - signature: long _InterlockedIncrement_acq(long volatile*)
    - signature: long _InterlockedIncrement_nf(long volatile*)
    - signature: long _InterlockedIncrement_rel(long volatile*)
    - signature: long _InterlockedOr(long volatile*, long)
    - signature: short _InterlockedOr16(short volatile*, short)
    - signature: short _InterlockedOr16_acq(short volatile*, short)
    - signature: short _InterlockedOr16_nf(short volatile*, short)
    - signature: short _InterlockedOr16_rel(short volatile*, short)
    - signature: __int64 _InterlockedOr64(__int64 volatile*, __int64)
    - signature: __int64 _InterlockedOr64_acq(__int64 volatile*, __int64)
    - signature: __int64 _InterlockedOr64_nf(__int64 volatile*, __int64)
    - signature: __int64 _InterlockedOr64_rel(__int64 volatile*, __int64)
    - signature: char _InterlockedOr8(char volatile*, char)
    - signature: char _InterlockedOr8_acq(char volatile*, char)
    - signature: char _InterlockedOr8_nf(char volatile*, char)
    - signature: char _InterlockedOr8_rel(char volatile*, char)
    - signature: long _InterlockedOr_acq(long volatile*, long)
    - signature: long _InterlockedOr_nf(long volatile*, long)
    - signature: long _InterlockedOr_rel(long volatile*, long)
    - signature: long _InterlockedXor(long volatile*, long)
    - signature: short _InterlockedXor16(short volatile*, short)
    - signature: short _InterlockedXor16_acq(short volatile*, short)
    - signature: short _InterlockedXor16_nf(short volatile*, short)
    - signature: short _InterlockedXor16_rel(short volatile*, short)
    - signature: __int64 _InterlockedXor64(__int64 volatile*, __int64)
    - signature: __int64 _InterlockedXor64_acq(__int64 volatile*, __int64)
    - signature: __int64 _InterlockedXor64_nf(__int64 volatile*, __int64)
    - signature: __int64 _InterlockedXor64_rel(__int64 volatile*, __int64)
    - signature: char _InterlockedXor8(char volatile*, char)
    - signature: char _InterlockedXor8_acq(char volatile*, char)
    - signature: char _InterlockedXor8_nf(char volatile*, char)
    - signature: char _InterlockedXor8_rel(char volatile*, char)
    - signature: long _InterlockedXor_acq(long volatile*, long)
    - signature: long _InterlockedXor_nf(long volatile*, long)
    - signature: long _InterlockedXor_rel(long volatile*, long)
    - signature: unsigned char _interlockedbittestandreset(long volatile*, long)
    - signature: unsigned char _interlockedbittestandreset_acq(long volatile*, long)
    - signature: unsigned char _interlockedbittestandreset_nf(long volatile*, long)
    - signature: unsigned char _interlockedbittestandreset_rel(long volatile*, long)
    - signature: unsigned char _interlockedbittestandset(long volatile*, long)
    - signature: unsigned char _interlockedbittestandset_acq(long volatile*, long)
    - signature: unsigned char _interlockedbittestandset_nf(long volatile*, long)
    - signature: unsigned char _interlockedbittestandset_rel(long volatile*, long)
    - pattern: (?:\s|^)v\w+_[bfsu](?:8|16|32|64)\W
    - pattern: (?:\s|^)sv\w+_[bfsu](?:8|16|32|64)\W
    - pattern: (?:\s|^)svu?int(?:32|64)_t\W
    - pattern: (?:\s|^)svfloat(?:32|64)_t\W
    - pattern: (?:\s|^)svbool_t\W
    - pattern: (?:\s|^)_arm_\w+
    - pattern: (?:\s|^)_ARM_BARRIER_SY\W
    - pattern: (?:\s|^)_ARM_BARRIER_ST\W
    - pattern: (?:\s|^)_ARM_BARRIER_ISH\W
    - pattern: (?:\s|^)_ARM_BARRIER_ISHST\W
    - pattern: (?:\s|^)_ARM_BARRIER_NSH\W
    - pattern: (?:\s|^)_ARM_BARRIER_NSHST\W
    - pattern: (?:\s|^)_ARM_BARRIER_OSH\W
    - pattern: (?:\s|^)_ARM_BARRIER_OSHST\W

AARCH64_COMPILER_OPTION_CHECKPOINTS:
    - pattern: .*[= "]+-m64[ \n"]+.*
      help: |+
          -m64 是 x86 64 位应用编译选项, m64 选项设置 int 为 32 bits 及 long 指针为 64 bits, 为 AMD 的 x86 64 架构生成代码.在 ARM64 平台无法支持.

          解决方法:

            将 ARM64 平台对应的编译选项设置为 "-mabi=lp64".

          详细指导请参考: https://gcc.gnu.org/onlinedocs/gcc/AArch64-Options.html；https://gcc.gnu.org/onlinedocs/gcc/x86-Options.html

    - pattern: .*[= "]+-march=.*
      help: |+
          Makefile 中包含 "-march" 与 -mtune 编译参数, 提示参数不兼容.

          解决方法:

            兼容的调整后参数为:

            -march=armv8.1-a -tune=cortex-a72

          参数设置指导请参考:https://gcc.gnu.org/onlinedocs/gcc/ARM-Options.html；https://gcc.gnu.org/onlinedocs/gcc/AArch64-Options.html；https://gcc.gnu.org/onlinedocs/gcc/x86-Options.html

    - pattern: .*[= "]+-mtune=.*
      help: |+
          如果使用了 gcc 9.1 以上的版本, 在编译时增加编译选项指定使用 tsv110 流水线, 使编译器按照 Kunpeng 处理器的流水线编排指令执行顺序, 充分利用流水线的指令集并行, 提升性能.

          解决方法:

            编译选项中添加 "-mtune=tsv110".

          详细指导请参考: https://gcc.gnu.org/onlinedocs/gcc/AArch64-Options.html；https://gcc.gnu.org/onlinedocs/gcc/x86-Options.html

    - pattern: .*[= "]+-O2[ \n"]+.*
      help: |+
          编译优化选项设置 "-O2" 级别及以上时, 相同的浮点数乘加运算在 x86 平台和 ARM64 平台的运算结果, 在小数点后16位存在差异.

          原因:

            ARM64 平台编译优化选项设置为 "-O2" 级别及以上, 进行浮点数的乘加运算 (a+=b*c), 运算结果的精度只能精确到小数点后16位.在配置 "-O2" 选项时, gcc 使用融合指令 fmadd 完成乘加运算, 而不是 fadd 和 fmul.

            fmadd 将浮点数的乘法和加法看成不可分的一个操作, 不对中间结果进行舍入, 从而导致计算结果有所差别.

          对系统的影响:

            编译优化选项设置 "-O2" 级别及以上时, 浮点乘加运算的性能有提升, 但是运算的精度受到影响.

          解决方法:

            添加编译选项 "-ffp-contract=off" 可以关闭该优化.

          详细指导请参考:https://gcc.gnu.org/onlinedocs/gcc/AArch64-Options.html；https://gcc.gnu.org/onlinedocs/gcc/x86-Options.html

    - pattern: .*[= "]+-msse2[ \n"]+.*
      help: |+
          ARM 不支持通过 -msse2, -msse4.1 等选项开启 SSE 浮点标量相关指令集.

          For the x86-32 compiler, you must use -march=cpu-type, -msse or -msse2 switches to enable SSE extensions and make this option effective. For the x86-64 compiler, these extensions are enabled by default.

          在编译时增加编译选项指定处理器架构为 ARMv8, 使编译器按照 ARMv8 处理器的架构和微架构生成可执行程序, 提升性能.

          解决方法:

            编译选项中添加 "-march=armv8-a".

          详细指导请参考:https://gcc.gnu.org/onlinedocs/gcc/AArch64-Options.html；https://gcc.gnu.org/onlinedocs/gcc/x86-Options.html

    - pattern: .*[= "]+-msse4\.1[ \n"]+.*
      help: |+
          ARM 不支持通过 -msse2, -msse4.1 等选项开启 SSE 浮点标量相关指令集.

          Feature modifiers used with -march and -mcpu can be any of the following and their inverses nofeature:

          crc: Enable CRC extension. This is on by default for -march=armv8.1-a.

          crypto: Enable Crypto extension. This also enables Advanced SIMD and floating-point instructions.

          解决方法:

            编译选项中添加 "-march=armv8.1-a+crc".

          详细指导请参考:https://gcc.gnu.org/onlinedocs/gcc/AArch64-Options.html；https://gcc.gnu.org/onlinedocs/gcc/x86-Options.html

    - pattern: .*[= "]+-mpclmul[ \n"]+.*
      help: |+
          在 x86 上使用 -msse2, -mpclmul, -maes 开启相关扩展指令集.

          Feature modifiers used with -march and -mcpu can be any of the following and their inverses no feature:

          crc: Enable CRC extension. This is on by default for -march=armv8.1-a.

          crypto: Enable Crypto extension. This also enables Advanced SIMD and floating-point instructions.

          解决方法:

            编译选项中添加 "-march=armv8.1-a+crypto".

          详细指导请参考:https://gcc.gnu.org/onlinedocs/gcc/AArch64-Options.html；https://gcc.gnu.org/onlinedocs/gcc/x86-Options.html

    - pattern: .*[= "]+-maes[ \n"]+.*

      help: |+
          在 x86 上使用 -msse2, -mpclmul, -maes 开启相关扩展指令集.

          Feature modifiers used with -march and -mcpu can be any of the following and their inverses no feature:

          crc: Enable CRC extension. This is on by default for -march=armv8.1-a.

          crypto: Enable Crypto extension. This also enables Advanced SIMD and floating-point instructions.

          解决方法:

            编译选项中添加 "-march=armv8.1-a+crypto".

          详细指导请参考:https://gcc.gnu.org/onlinedocs/gcc/AArch64-Options.html；https://gcc.gnu.org/onlinedocs/gcc/x86-Options.html

AARCH64_INLINE_ASSEMBLY_CHECKPOINTS:
    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+[_]*goto[_]*)?(\s*//.*)?\s*\([a-zA-Z0-9_\s]*"(?!yield|isb|dmb|dsb)(\soshld|\soshst|\sosh|\snshld|\snshst|\snsh|\sishld|\sishst|\sish|\sld|\sst|\ssy)?.*memory
      help: |+
          这是一个编译器屏障, 编译器屏障仅能防止编译器因优化而引入的乱序, 对弱内存顺序模型处理器运行时乱序执行无效.

          由于 ARM 是弱内存顺序模型处理器, 建议做如下修改.

          适配方案
          --------
          x86 上示例代码
          ---
          由于 x86 处理器是强内存顺序模型的, 它保证了内存的操作顺序不会被打乱,
          因此仅仅使用编译器屏障即可.

              //GCC 确保该指令执行前的读和写内存操作先与该指令后的读和写内存操作完成
              __asm__ __volatile__("" : : : "memory");

          ARM 上对应的修改示例
          ---
          1.  如果是 C++ 代码, 推荐使用 C++11 标准的 std::atomic_thread_fence(std::memory_order order) 接口,
              这个接口可支持各种平台.

              具体使用方法见:

                  https://en.cppreference.com/w/cpp/atomic/atomic_thread_fence
                  https://en.cppreference.com/w/cpp/atomic/memory_order

          2. 使用 GCC intrinsic __sync_synchronize 函数替代

                -#define barrier() __asm__ ("" : : : "memory")
                +#define barrier() __sync_synchronize()

          3. 或者使用下面的汇编指令

                __asm__ __volatile__ ("dmb ish" : : : "memory");

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+[_]*goto[_]*)?(\s*//.*)?\s*\(.*sfence
      help: |+
          x86/64 架构提供了三种内存屏障指令: (1) sfence (2) lfence (3) mfence

            sfence: sfence 指令前后的写入指令, 按照在 sfence 前后的指令序进行执行.
                    注意, 写屏障一般需要与读屏障或数据依赖屏障配对使用.

            lfence: lfence 指令前后的读取指令, 按照在 lfence 前后的指令序进行执行.
                    注意, 读屏障一般要跟写屏障配对使用.

            mfence: 确保所有 mfence 指令之前的写入指令, 都在该 mfence 指令之后的
                    写入令之前执行; 同时, 还确保所有 mfence 指令之后的读取指令,
                    都在该 mfence 指令之前的读取指令之后执行.

          修改方案
          --------

          1.  对于 C 或者 C++11 以下代码

                x86 上示例代码:
                ---
                __asm__ __volatile__("sfence" : : : "memory");
                __asm__ __volatile__("lfence" : : : "memory");
                __asm__ __volatile__("mfence" : : : "memory");

                ARM 上对应的修改示例:
                ---
                __asm__ __volatile__("dmb ishst" : : : "memory");
                __asm__ __volatile__("dmb ishld" : : : "memory");
                __asm__ __volatile__("dmb ish" : : : "memory");

          2.  对于 C++11 及以上代码, 推荐 (适用于 gcc-4.8 及以上版本)

              使用 C++11 的 std::atomic_thread_fence(std::memory_order order) 接口.

              具体使用方法见:
                  https://en.cppreference.com/w/cpp/atomic/atomic_thread_fence
                  https://en.cppreference.com/w/cpp/atomic/memory_order

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+[_]*goto[_]*)?(\s*//.*)?\s*\(.*lfence
      help: |+
          x86/64 系统架构提供了三种内存屏障指令:(1) sfence ; (2) lfence ; (3) mfence.

          sfence 确保: sfence 指令前后的写入指令, 按照在 sfence 前后的指令序进行执行.注意, 写屏障一般需要与读屏障或数据依赖屏障配对使用.

          lfence 确保: lfence 指令前后的读取指令, 按照在 lfence 前后的指令序进行执行.注意, 读屏障一般要跟写屏障配对使用.

          mfence 确保: 确保所有 mfence 指令之前的写入指令, 都在该 mfence 指令之后的写入令之前执行；同时, 还确保所有 mfence 指令之后的读取指令, 都在该 mfence 指令之前的读取指令之后执行.

          修改方案:

          推荐(gcc-4.8以及以上时):
            使用C++11标准的std::atomic_thread_fence(std::memory_order order)接口,可支持各种平台.
            具体使用方法见:
                https://en.cppreference.com/w/cpp/atomic/atomic_thread_fence
                https://en.cppreference.com/w/cpp/atomic/memory_order

          x86 上示例代码:
          ---
          __asm__ __volatile__("sfence" : : : "memory");
          __asm__ __volatile__("lfence" : : : "memory");
          __asm__ __volatile__("mfence" : : : "memory");

          ARM 上对应的修改示例:
          ---
          __asm__ __volatile__("dmb ishst" : : : "memory");
          __asm__ __volatile__("dmb ishld" : : : "memory");
          __asm__ __volatile__("dmb ish" : : : "memory");

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+[_]*goto[_]*)?(\s*//.*)?\s*\(.*mfence
      help: |+
          x86/64 系统架构提供了三种内存屏障指令:(1) sfence ; (2) lfence ; (3) mfence.

          sfence 确保: sfence 指令前后的写入指令, 按照在 sfence 前后的指令序进行执行.注意, 写屏障一般需要与读屏障或数据依赖屏障配对使用.

          lfence 确保: lfence 指令前后的读取指令, 按照在 lfence 前后的指令序进行执行.注意, 读屏障一般要跟写屏障配对使用.

          mfence 确保: 确保所有 mfence 指令之前的写入指令, 都在该 mfence 指令之后的写入令之前执行；同时, 还确保所有 mfence 指令之后的读取指令, 都在该 mfence 指令之前的读取指令之后执行.

          修改方案:

          推荐(gcc-4.8以及以上时):
            使用C++11标准的std::atomic_thread_fence(std::memory_order order)接口,可支持各种平台.
            具体使用方法见:
                https://en.cppreference.com/w/cpp/atomic/atomic_thread_fence
                https://en.cppreference.com/w/cpp/atomic/memory_order

          x86 上示例代码:
          ---
          __asm__ __volatile__("sfence" : : : "memory");
          __asm__ __volatile__("lfence" : : : "memory");
          __asm__ __volatile__("mfence" : : : "memory");

          ARM 上对应的修改示例:
          ---
          __asm__ __volatile__("dmb ishst" : : : "memory");
          __asm__ __volatile__("dmb ishld" : : : "memory");
          __asm__ __volatile__("dmb ish" : : : "memory");

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+[_]*goto[_]*)?(\s*//.*)?\s*\(.*crc32b
      help: |+
          CRC32 系列指令主要用于计算字符串的32位 CRC 校验码, 输入待计算的字符串, 输出 32 位 CRC 多项式校验码.使用 CRC32 指令的方式有2种:一种是直接使用（内联）汇编代码；另一种是借助编译器 intrinsics.

          现象描述: 在 ARM 上可能出现的编译错误: unknown mnemonic 'crc32q' -- 'crc32q (x3),x2' 或 operand1should be an integer register -- 'crc32b (x1),x0' 或 unrecognized command line option '-msse4.2'.

          可能原因: x86 使用的是 crc32b 和 crc32q 汇编指令完成 CRC32C 校验值计算功能, 而 Arm64 平台用 crc32cb, crc32ch, crc32cw, crc32cx 4 个汇编指令完成 CRC32C 校验值计算功能.

          修改方案: 请使用 crc32cb, crc32ch, crc32cw, crc32cx 取代 x86 的 CRC32 系列汇编指令, 并在编译时添加编译参数 '-mcpu=generic+crc'.

          x86 上示例代码:
          ---
          static inline uint32_t SSE4_crc32_u8(uint32_t crc, uint8_t v)
          {
              __asm__("crc32b %1, %0" : "+r"(crc) : "rm"(v));
              return crc;
          }

          ARM 上对应的修改示例:
          ---
          static inline uint32_t SSE4_crc32_u8(uint32_t crc, uint8_t value)
          {
              __asm__ __volatile__("crc32cb %w[c], %w[c], %w[v]":[c]"+r"(crc):[v]"r"(value));
              return crc;
          }

          注意: 修改后需要增加 -march=armv8-a+crc  编译选项.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+[_]*goto[_]*)?(\s*//.*)?\s*\(.*crc32w
      help: |+
          CRC32 系列指令主要用于计算字符串的32位 CRC 校验码, 输入待计算的字符串, 输出32位 crc 多项式校验码.使用 CRC32 指令的方式有2种:一种是直接使用（内联）汇编代码；另一种是借助编译器 intrinsics.

          现象描述: 在 ARM 上可能出现的编译错误: unknown mnemonic 'crc32q' -- 'crc32q (x3),x2' 或 operand1should be an integer register -- 'crc32b (x1),x0' 或 unrecognized command line option '-msse4.2'.

          可能原因: x86 使用的是 crc32b 和 crc32q 汇编指令完成 CRC32C 校验值计算功能, 而 Arm64 平台用 crc32cb, crc32ch, crc32cw, crc32cx 4 个汇编指令完成 CRC32C 校验值计算功能.

          修改方案: 请使用 crc32cb, crc32ch, crc32cw, crc32cx 取代 x86 的 CRC32 系列汇编指令, 并在编译时添加编译参数 '-mcpu=generic+crc'.

          x86 上示例代码:
          ---
          static inline uint32_t SSE4_crc32_u16(uint32_t crc, uint16_t v)
          {
              __asm__("crc32w %1, %0" : "+r"(crc) : "rm"(v));
              return crc;
          }

          ARM 上对应的修改示例:
          ---
          static inline uint32_t SSE4_crc32_u16(uint32_t crc, uint16_t value)
          {
              __asm__ __volatile__("crc32ch %w[c], %w[c], %w[v]":[c]"+r"(crc):[v]"r"(value));
              return crc;
          }

          注意: 修改后需要增加 -march=armv8-a+crc 编译选项.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+[_]*goto[_]*)?(\s*//.*)?\s*\(.*crc32l
      help: |+
          CRC32 系列指令主要用于计算字符串的32位 CRC 校验码, 输入待计算的字符串, 输出32位 crc 多项式校验码.使用 CRC32 指令的方式有2种:一种是直接使用（内联）汇编代码；另一种是借助编译器 intrinsics.

          现象描述: 在 ARM 上可能出现的编译错误: unknown mnemonic 'crc32q' -- 'crc32q (x3),x2' 或 operand1should be an integer register -- 'crc32b (x1),x0' 或 unrecognized command line option '-msse4.2'.

          可能原因: x86 使用的是 crc32b 和 crc32q 汇编指令完成 CRC32C 校验值计算功能, 而 Arm64 平台用 crc32cb, crc32ch, crc32cw, crc32cx 4 个汇编指令完成 CRC32C 校验值计算功能.

          修改方案: 请使用 crc32cb, crc32ch, crc32cw, crc32cx 取代 x86 的 CRC32 系列汇编指令, 并在编译时添加编译参数 '-mcpu=generic+crc'.

          x86 上示例代码:
          ---
          static inline uint32_t SSE4_crc32_u32(uint32_t crc, uint32_t v)
          {
              __asm__("crc32l %1, %0" : "+r"(crc) : "rm"(v));
              return crc;
          }

          ARM 上对应的修改示例:
          ---
          static inline uint32_t SSE4_crc32_u32(uint32_t crc, uint32_t value)
          {
              __asm__ __volatile__("crc32cw %w[c], %w[c], %w[v]":[c]"+r"(crc):[v]"r"(value));
              return crc;
          }

          注意: 修改后需要增加 -march=armv8-a+crc 编译选项.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+[_]*goto[_]*)?(\s*//.*)?\s*\(.*crc32q
      help: |+
          CRC32 系列指令主要用于计算字符串的32位 CRC 校验码, 输入待计算的字符串, 输出32位 crc 多项式校验码.使用 CRC32 指令的方式有2种:一种是直接使用（内联）汇编代码；另一种是借助编译器 intrinsics.

          现象描述: 在 ARM 上可能出现的编译错误: unknown mnemonic 'crc32q' -- 'crc32q (x3),x2' 或 operand1should be an integer register -- 'crc32b (x1),x0' 或 unrecognized command line option '-msse4.2'.

          可能原因: x86 使用的是 crc32b 和 crc32q 汇编指令完成 CRC32C 校验值计算功能, 而 Arm64 平台用 crc32cb, crc32ch, crc32cw, crc32cx 4 个汇编指令完成 CRC32C 校验值计算功能.

          修改方案: 请使用 crc32cb, crc32ch, crc32cw, crc32cx 取代 x86 的 CRC32 系列汇编指令, 并在编译时添加编译参数 '-mcpu=generic+crc'.

          x86 上示例代码:
          ---
          static inline uint32_t SSE4_crc32_u64(uint32_t crc, uint64_t v)
          {
              uint64_t result = crc;
              __asm__("crc32q %1, %0" : "+r"(result) : "rm"(v));
              return result;
          }

          ARM 上对应的修改示例:
          ---
          static inline uint32_t SSE4_crc32_u64(uint32_t crc, uint64_t alue)
          {
              __asm__ __volatile__("crc32cx %w[c], %w[c], %x[v]":[c]"+r"(crc):[v]"r"(value));
              return crc;
          }

          注意: 修改后需要增加 -march=armv8-a+crc  编译选项.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+[_]*goto[_]*)?(\s*//.*)?\s*\(.*bswap
      help: |+
          现象描述: 在 ARM 上可能出现的编译错误: Error: unknown mnemonic 'bswap' -- 'bswap x3'.

          可能原因: bswap 是 x86 的字节序反序指令, 需替换为 Arm64 的 rev 指令.

          修改方案:

          x86 上示例代码:
          ---
          inline uint32_t bswap(uint32_t val)
          {
              __asm__("bswap %0" : "=r" (val) : "0" (val));
              retrun val;
          }

          ARM 上对应的修改示例:
          ---
          inline uint32_t bswap(uint32_t val)
          {
              __asm__("rev %w[dst], %w[src]" : [dst]"=r"(val) : [src]"r"(val));
          }

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+[_]*goto[_]*)?(\s*//.*)?\s*\(.*rep\s
      help: |+
          现象描述: 在 ARM 上可能出现的编译错误: unknown mnemonic 'rep' -- 'rep'.

          可能原因: rep 为 x86 的重复执行指令, 需替换为 Arm64 的 rept 指令.

          修改方案:

          x86 上示例代码:
          ---
          #define nop __asm__ __volatile__("rep;nop" ::: "memory")

          ARM 上对应的修改示例, 本样例实现空指令, 参数 n 为循环次数: :
          ---
          #define __nops(n) ".rept " #n "\nnop\n.endr\n"
          #define nops(n) asm volatile(__nops(n))

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+[_]*goto[_]*)?(\s*//.*)?\s*\(.*pause
      help: |+
          Pause 功能:给处理器提供提示, 提高 spin-wait 循环的性能.

          修改方案:

          x86 上示例代码:
          ---
          __asm__ __volatile__("pause" : : : "memory");
          __asm__ __volatile__("pause");

          ARM 上对应的修改示例:
          ---
          __asm__ __volatile__("yield" : : : "memory");
          __asm__ __volatile__("yield");

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+[_]*goto[_]*)?(\s*//.*)?\s*\(.*"rdtsc"
      help: |+
          TSC 是时间戳计数器的缩写, 它是 Pentium 兼容处理器中的一个计数器, 它记录自启动以来处理器消耗的时钟周期数.在每个时钟到来时, 该计数器自动加一.因为 TSC 随着处理器周期速率的变化而变化, 所以它提供了非常高的精确度.它经常被用来分析和检测代码.TSC 的值可以通过 rdtsc 指令来读取.

          修改方案:

          x86 上示例代码:
          ---
          static uint64_t Rdtsc()
          {
              uint32_t lo, hi;
              __asm__ __volatile__ ("rdtsc" : "=a" (lo), "=d" (hi));
              return (uint64_t)hi << 32 | lo;
          }

          ARM 上对应的修改示例:
          ---
          方法一: 采用 cntvct_el0 , 但其采用的是外部时钟频率, 和 rdtsc 无法达到等价替换（rdtsc 采用的是主频）, 可进行近似替换.
          static uint64_t Rdtsc()
          {
              uint64_t count_num;
              Current_Speed = 2400; // Current Speed = 2400MHz
              External_Clock = 100; // External Clock = 100MHz
              __asm__ __volatile__ ("mrs %0, cntvct_el0" : "=r" (count_num));
              return count_num *（Current_Speed / External_Clock）；
          }

          方法二: 使用 Linux 提供的获取时间函数 clock_gettime 进行近似替换.
          static uint64_t Rdtsc()
          {
              struct timespec tmp;
              clock_gettime(CLOCK_MONOTONIC, &tmp);
              return tmp.tv_sec * 2400000000 + (uint64_t)tmp.tv_nsec * 2.4; // 2400000000 和 2.4 基于服务器主频而定
          }

          方法三: ARM 有 Performance Monitors Control Register 系列寄存器, 其中 PMCCNTR_EL0 就类似于 x86 的 TSC 寄存器.但默认情况用户态是不可读的, 需要内核态使能后才能读取.具体可参考 http://ilinuxkernel.com/?p=1755.

          a. 下载 read aarch64 TSC , 解压压缩包, 在 arrch64_tsc 目录下执行 make 命令, 安装相应内核驱动, 生成如下文件.
          Makefile modules.order Module.symvers pmu.c pmu.ko pmu.mod.c pmu.mod.o pmu.o

          b. 执行 insmod pmu.ko 命令安装内核模块, 使能内核态（初次执行即可）.

          c. 代码替换:
          static uint64_t Rdtsc()
          {
              uint64_t count_num;
              __asm__ __volatile__ ("mrs %0, PMCCNTR_EL0" : "+r" (count_num));
              return count_num；
          }

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+[_]*goto[_]*)?(\s*//.*)?\s*\(.*popcntq
      help: |+
          POPCNT 函数主要实现功能是进行1个数的统计.

          修改方案:

          x86 上示例代码:
          ---
          static inline int64_t POPCNT_popcnt_u64(uint64_t a)
          {
              int64_t result;
              __asm__("popcntq %1, %0" : "=r"(result) : "mr"(a) : "cc");
              return result;
          }

          ARM 上对应的修改示例:
          ---
          #include <arm_neon.h>
          static inline int POPCNT_popcnt_u64(uint64_t x)
          {
              uint64_t count_result = 0;
              uint64_t count[1];
              uint8x8_t input_val,count8x8_val;
              uint16x4_t count16x4_val;
              uint32x2_t count32x2_val;
              uint64x1_t count64x1_val;
              input_val = vld1_u8((unsigned char *) &x);
              count8x8_val = vcnt_u8(input_val);
              count16x4_val = vpaddl_u8(count8x8_val);
              count32x2_val = vpaddl_u16(count16x4_val);
              count64x1_val = vpaddl_u32(count32x2_val);
              vst1_u64(count, count64x1_val);
              count_result=count[0];
              return count_result;
          }

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+[_]*goto[_]*)?(\s*//.*)?\s*\(.*addl
      help: |+
          函数功能: 对整数变量进行原子加.

          修改方案:

          x86 上示例代码:
          ---
          static inline void atomic_add(int i, atomic_t *v)
          {
              asm volatile(LOCK_PREFIX "addl %1,%0" : "+m" (v->counter) : "ir" (i));
          }

          ARM 上对应的修改示例:
          ---
          第1种方法: 使用 gcc 自带原子操作替换
          __sync_add_and_fetch(&_value.counter,1)

          第2种方法: 使用内联汇编替换
          void atomic_add(int i)
          {
              unsigned int tmp;
              int result;
              __asm__ volatile(" prfm pstl1strm, %2\n"
                    "1: ldaxr %w0, %2\n"    //加载数据到寄存器
                    " add %w0, %w0, %w3\n"  //加操作
                    " stlxr %w1, %w0, %2\n" //加后的数据写入内存并判断是否写入成功
                    " cbnz %w1, 1b"         //若写入内存失败, 重新执行加操作
                    : "=&r"(result), "=&r"(tmp), "+Q"(_value.counter)
                    : "Ir"(i)
              )
          }

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+[_]*goto[_]*)?(\s*//.*)?\s*\(.*"subl
      help: |+
          函数功能: 对整数变量进行原子减.

          修改方案:

          x86 上示例代码:
          ---
          static inline void atomic_sub(int i, atomic_t *v)
          {
              asm volatile(LOCK_PREFIX "subl %1,%0" : "+m" (v->counter) : "ir" (i));
          }

          ARM 上对应的修改示例:
          ---
          第1种方法: 使用 gcc 自带原子操作替换
          __sync_sub_and_fetch(&_value.counter,1);

          第2种方法: 使用内联汇编替换
          void atomic_sub (int i)
          {
              unsigned int tmp;
              int result;
              __asm__ volatile(" prfm pstl1strm, %2\n"
                    "1: ldaxr %w0, %2\n"    //加载数据到寄存器
                    " sub %w0, %w0, %w3\n"  //减操作
                    " stlxr %w1, %w0, %2\n" //减后的数据写入内存, 并判断是否写入成功
                    " cbnz %w1, 1b"         //若写入内存失败, 重新执行减操作
                    : "=&r"(result), "=&r"(tmp), "+Q"(_value.counter)
                    : "Ir"(i)
              )
          }

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+[_]*goto[_]*)?(\s*//.*)?\s*\(.*"decl
      help: |+
          函数说明: 对整数进行减操作, 并判断执行原子减后结果是否为0.

          修改方案:

          x86 上示例代码:
          ---
          static inline int atomic_dec_and_test(atomic_t *v)
          {
              unsigned char c;
              asm volatile(LOCK_PREFIX "decl %0; sete %1" : "+m" (v->counter), "=qm" (c) : : "memory");
              return c != 0;
          }

          ARM 上对应的修改示例:
          ---
          第1种方法: 使用 gcc 自带原子操作函数替换
          __sync_sub_and_fetch(&_value.counter, i)

          第2种方法: 使用内联汇编替换 (i 传1, 并对 result 作判断)
          static inline int atomic_sub_return(int i, atomic_t *v)
          {
              unsigned long tmp;
              int result;
              prefetchw(&v->counter);
              __asm__ volatile ("\n\t"
                  "@ atomic_sub\n\t"
                  "1: ldrex %0, [%3]\n\t"
                  " sub %0, %0, %4\n\t"
                  " strex %1, %0, [%3]\n\t"
                  " teq %1, #0\n\t"
                  " bne 1b"
                  : "=&r" (result), "=&r" (tmp), "+Qo" (v->counter)
                  : "r" (&v->counter), "Ir" (i)
                  : "cc");
              return result;
          }

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+[_]*goto[_]*)?(\s*//.*)?\s*\(.*"incl
      help: |+
          函数说明: 对整数进行加操作, 并判断返回是否为0.

          修改方案:

          x86 上示例代码:
          ---
          static inline int atomic_inc_and_test(atomic_t *v)
          {
              unsigned char c;
              asm volatile(LOCK_PREFIX "incl %0; sete %1" : "+m" (v->counter), "=qm" (c) : : "memory");
              return c != 0;
          }

          ARM 上对应的修改示例:
          ---
          第1种方法: 使用 gcc 自带原子操作函数替换
          __sync_add_and_fetch(&_value.counter, i)

          第2种方法: 使用内联汇编替换 (i 传1, 并对 result 作判断)
          static inline void atomic_fetch_add(int i, atomic_t *v)
          {
              unsigned long tmp;
              int result, val;//写预取
              prefetchw(&v->counter);
              __asm__ volatile("\n\t"
                  "@ atomic_fetch\n\t"
                  "1: ldrex %0, [%4]\n\t" @result, tmp
                  //执行v->counter+i（5%）操作, 并将执行结果放入val（%1）所在的寄存器中
                  " add %1, %0, %5\n\t" @result,
                  " strex %2, %1, [%4]\n\t" @tmp, result, tmp
                  " teq %2, #0\n\t" @tmp
                  " bne 1b"
                  : "=&r"(result), "=&r"(val), "=&r"(tmp), "+Qo"(v->counter)
                  : "r"(&v->counter), "Ir"(i)
                  : "cc");
              return result;
          }

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+[_]*goto[_]*)?(\s*//.*)?\s*\(.*"xaddq
      help: |+
          ARM 的汇编语言与 x86 完全不同, 需要重写, 涉及使用嵌入汇编的代码, 都需要针对 ARM 进行配套修改.

          修改方案: 需要重新实现汇编代码段.

          x86 上示例代码:
          ---
          static inline long atomic64_add_and_return(long i, atomic64_t *v)
          {
              long i = i;
              asm_volatile_("lock ; " "xaddq %0, %1;"
              :"=r"(i)
              :"m"(v->counter), "0"(i));
              return i + __i;
          }

          在 ARM 平台上使用 gcc 内置函数实现:
          ---
          static __inline__ long atomic64_add_and_return(long i, atomic64_t *v)
          {
              return __sync_add_and_fetch(&((v)->counter), i);
          }

          以 __sync_add_and_fetch 为例, 编译后其反汇编对应代码如下所示:

            <__sync_add_and_fetch >:
            ldxr    x2, [x0]
            add     x2, x2, x1
            stlxr   w3, x2, [x0]

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+[_]*goto[_]*)?(\s*//.*)?\s*\(.*"pcmpestrm
      help: |+
          函数功能: 检查 str2 中每个字节元素 (m128i_u8[index]) 是否在 str1 中存在, 如果存在,  result 中的相应 bit 位上置1.

          pcmpestrm 对应的 Intrinsic 函数详细说明, 请参考 https://software.intel.com/sites/landingpage/IntrinsicsGuide/

          修改方案:

          x86 上示例代码:
          ---
          template<int MODE>
          static inline __m128i SSE4_cmpestrm(__m128i str1, int len1, __m128i str2, int len2)
          {
              #ifdef __clang__
              /// Use asm reg rather than Yz output constraint to workaround LLVM bug 13199
              /// clang doesn't support Y-prefixed asm constraints.
              register volatile __m128i result asm ("xmm0");
              __asm__ __volatile__ ("pcmpestrm %5, %2, %1": "=x"(result) : "x"(str1), "xm"(str2), "a"(len1), "d"(len2), "i"(MODE) : "cc");
              #else
              __m128i result;
              __asm__ __volatile__ ("pcmpestrm %5, %2, %1": "=Yz"(result) : "x"(str1), "xm"(str2), "a"(len1), "d"(len2), "i"(MODE) : "cc");
              #endif
              return result;
          }

          ARM 上对应的修改示例:
          ---
          #include <arm_neon.h>
          typedef union __attribute__((aligned(16))) __oword
          {
              int32x4_t m128i;
              uint8_t m128i_u8[16];
          } __oword;
          template<int MODE>

          static inline uint16_t SSE4_cmpestrm(int32x4_t str1, int len1, int32x4_t str2, int len2)
          {
              __oword a, b;
              a.m128i = str1;
              b.m128i = str2;
              uint16_t result = 0;
              uint16_t i = 0;
              uint16_t j = 0;
              // Impala中用到的模式 STRCHR_MODE = PCMPSTR_EQUAL_ANY | PCMPSTR_UBYTE_OPS
              for (i = 0; i < len2; i++) {
                  for ( j = 0; j < len1; j++) {
                      if (a.m128i_u8[j] == b.m128i_u8[i]) {
                          result |= (1 << i);
                      }
                  }
              }
              return result;
          }

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+[_]*goto[_]*)?(\s*//.*)?\s*\(.*"pcmpestri
      help: |+
          函数功能: 按照 MODEL 规则（ EQUAL_EACH、 NEG_POLARITY）比较 str1 和 str2 中的元素, 比较并返回首个不相同元素的索引值.

          pcmpestri 对应的 Intrinsic 函数详细说明, 请参考 https://software.intel.com/sites/landingpage/IntrinsicsGuide/

          修改方案:

          x86 上示例代码:
          ---
          template<int MODE>
          static inline int SSE4_cmpestri(__m128i str1, int len1, __m128i str2, int len2)
          {
                int result;
                __asm__ __volatile__("pcmpestri %5, %2, %1": "=c"(result) : "x"(str1), "xm"(str2), "a"(len1), "d"(len2), "i"(MODE) : "cc");
                return result;
          }

          ARM 上对应的修改示例:
          ---
          #include <arm_neon.h>

          template<int MODE>
          static inline int SSE4_cmpestri(int32x4_t str1, int len1, int32x4_t str2, int len2)
          {
              __oword a, b;
              a.m128i = str1;
              b.m128i = str2;
              int len_s, len_l;
              if (len1 > len2) {
                  len_s = len2;
                  len_l = len1;
              } else {
                  len_s = len1;
                  len_l = len2;
              }
              int result;
              int i;

              // 本例替换的模式STRCMP_MODE = PCMPSTR_EQUAL_EACH | PCMPSTR_UBYTE_OPS | PCMPSTR_NEG_POLARITY
              for(i = 0; i < len_s; i++)
              {
                  if (a.m128i_u8[i] == b.m128i_u8[i])
                  {
                      break;
                  }
              }
              result = i;
              if (result == len_s) result = len_l;
              return result;
          }

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+[_]*goto[_]*)?(\s*//.*)?\s*\(.*MOVDQU
      help: |+
          指令功能 Move unaligned double quadword. 实现寄存器到寄存器, 寄存器到地址的数据拷贝.

          修改方案:

          x86 上示例代码:
          ---
          MOVDQU xmm1, xmm2/m128

          ARM 上对应的修改示例:
          ---
          ; ldp 指令: Load Pair Registers (extended): loads two doublewords from memory addressed by addr to Xt1 and Xt2.
          LDP Xt1, Xt2, addr

          ; stp 指令: Store Pair Registers (extended): stores two doublewords from Xt1 and Xt2 to memory addressed by addr.
          STP Xt1, Xt2, addr

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+[_]*goto[_]*)?(\s*//.*)?\s*\(.*PAND
      help: |+
          PAND 指令功能, 按位做 and 运算.

          修改方案:

          x86 上示例代码:
          ---
          指令用法, 128 位按位做 and 运算:
          PAND xmm1, xmm2/m128

          在 ARM 上替换为 NEON 指令采用128位寄存器:
          ---
          Bitwise AND (vector). Where <T> is 8B or 16B (though an assembler should accept any valid format).
          AND Vd.<T>, Vn.<T>, Vm.<T>

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+[_]*goto[_]*)?(\s*//.*)?\s*\(.*Pxor
      help: |+
          pxor 指令功能, 按位做 xor 运算.

          修改方案:

          x86 上示例代码:
          ---
          指令用法, 128位按位做 xor 运算:
          Pxor xmm1, xmm2/m128

          在 ARM 上替换为 eor:
          ---
          Bitwise exclusive OR (vector). Where <T> is 8B or 16B (an assembler should accept any valid arrangement).
          EOR Vd.<T>, Vn.<T>, Vm.<T>

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+[_]*goto[_]*)?(\s*//.*)?\s*\(.*PSHUFB
      help: |+
          修改方案:

          x86 上示例代码:
          ---
          PSHUFB — Packed Shuffle Bytes, 按照索引在目标寄存器中进行查表操作:
          PSHUFB xmm1, xmm2/m128


          在 ARM 上替换为 TBL 指令:
          ---
          Table lookup (vector). Where <T> may be 8B or 16B, and Vn* is a list of between one and four consecutively numbered vector registers each holding sixteen 8-bit table elements. The list braces "{ }" are concrete symbols, and do not indicate an optional field as elsewhere in this manual.
          TBL Vd.<T>, {Vn*.16B}, Vm.<T>2

# Intrinsics available for x86/x86-64 processors
X86_INTRINSICS:
    - pattern: .*_mm_srli_epi64.*
      help: |+
          函数功能
          --------

          基于 imm 的大小对 a 进行右移操作, 移动后的位以 0 进行补充, 并返回操作的结果.

          详细说明, 请参考 https://software.intel.com/sites/landingpage/IntrinsicsGuide/

          修改方案

          x86 上示例代码:
          ---
          __m128i _mm_srli_epi64 (__m128i a, int imm) ;

          ARM 上对应的修改示例:
          ---
          #include <arm_neon.h>

          int64x2_t Arm_mm_srli_epi64 (int64x2_t a,int imm)
          {
              int64x2_t ret;
              if ((imm) <= 0) {
                  ret = a;
              }
              else if ((imm)> 63) {
                  ret = vdupq_n_s64(0);
              }
              else {
                  ret = vreinterpretq_s64_u64(vshrq_n_u64(vreinterpretq_u64_s64(a), imm));
              }
              return ret;
          }

    - pattern: .*_mm_shuffle_epi8.*
      help: |+
          函数功能: 按照 shuffle_mask 二进制掩码对 data 进行移位操作, 将移位后的数存储在 results 变量中.

          _mm_shuffle_epi8  详细说明, 请参考 https://software.intel.com/sites/landingpage/IntrinsicsGuide/

          修改方案:

          x86 上示例代码:
          ---
          __m128i results = _mm_shuffle_epi8(data, shuffle_mask);

          ARM 上对应的修改示例:
          ---
          #include <arm_neon.h>
          #define int8x16_to_8x8x2(v) ((int8x8x2_t) { vget_low_s8(v), vget_high_s8(v) })

          int8x16_t results = vcombine_s8(vtbl2_s8(int8x16_to_8x8x2(data), vget_low_s8(shuffle_mask)), vtbl2_s8(int8x1 6_to_8x8x2(data), vget_high_s8(shuffle_mask)));

    - pattern: .*_mm_extract_ps.*
      help: |+
          函数功能: 从 results 中分别加载其 0、1、2、3 通道内的数存储到 a、b、c、d 中.

          _mm_extract_ps  详细说明, 请参考 https://software.intel.com/sites/landingpage/IntrinsicsGuide/

          修改方案:

          x86 上示例代码:
          ---
          inline void DoExtractM128(__m128i results, uint32_t *a, uint32_t *b, uint32_t *c, uint32_t *d)
          {
              *a = _mm_extract_ps((__v4sf)results, 0);
              *b = _mm_extract_ps((__v4sf)results, 1);
              *c = _mm_extract_ps((__v4sf)results, 2);
              *d = _mm_extract_ps((__v4sf)results, 3);
          }

          ARM 上对应的修改示例:
          ---
          #include <arm_neon.h>

          inline void DoExtractM128(int8x16_t results, uint32_t *a, uint32_t *b, uint32_t *c, uint32_t *d)
          {
              *a = vgetq_lane_u32(vreinterpretq_u32_s8(results), 0);
              *b = vgetq_lane_u32(vreinterpretq_u32_s8(results), 1);
              *c = vgetq_lane_u32(vreinterpretq_u32_s8(results), 2);
              *d = vgetq_lane_u32(vreinterpretq_u32_s8(results), 3);
          }

    - pattern: .*_mm_set1_epi64x.*
      help: |+
          函数功能: 将64位的整数以复制形式填充到128位的向量 a 中.

          _mm_set1_epi64x  详细说明, 请参考 https://software.intel.com/sites/landingpage/IntrinsicsGuide/

          修改方案:

          x86 上示例代码:
          ---
          __m128i a = _mm_set1_epi64x(0x86b0426193d86e66ull) ;

          ARM 上对应的修改示例:
          ---
          #include <arm_neon.h>
          int64x2_t a = vdupq_n_s64(0x86b0426193d86e66ull);

    - pattern: .*_mm_mul_epu32.*
      help: |+
          函数功能: 将 a 和 b 中的64位元素的第32位无符号数分别相乘, 并存储为64位无符号数中.

          _mm_mul_epu32  详细说明, 请参考 https://software.intel.com/sites/landingpage/IntrinsicsGuide/

          修改方案:

          x86 上示例代码:
          ---
          __m128i _mm_mul_epu32 (__m128i a, __m128i b);

          ARM 上对应的修改示例:
          ---
          #include <arm_neon.h>

          uint64x2_t Arm_mm_mul_epu32(int32X4_t a, int32x4_t b)
          {
              uint64x2_t result = { uint64_t(a[0] * b[0]), uint64_t(a[2] * b[2])};
              return result;
          }

    - pattern: .*_mm_add_epi64.*
      help: |+
          函数功能: 对向量 a 和 b 中的2个64位整数分别进行相加, 并将结果保存输出.

          _mm_add_epi64  详细说明, 请参考 https://software.intel.com/sites/landingpage/IntrinsicsGuide/

          修改方案:

          x86 上示例代码:
          ---
          __m128i _mm_add_epi64(__m128i a, __m128i b)

          ARM 上对应的修改示例:
          ---
          #include <arm_neon.h> Int64x2_t vaddq_s64(Int64x2_t a, Int64x2_t b);

    - pattern: .*_mm_testz_si128.*
      help: |+
          函数功能: 计算 a 和 b 的位运算结果.

          _mm_testz_si128  详细说明, 请参考 https://software.intel.com/sites/landingpage/IntrinsicsGuide/

          修改方案:

          x86 上示例代码:
          ---
          all_zeros = _mm_testz_si128(zero_bytes, zero_bytes);

          ARM 上对应的修改示例:
          ---
          #include <arm_neon.h>
          all_zeros = vgetq_lane_s32(vandq_s32(zero_bytes, zero_bytes), 0) == 0;

    - pattern: .*_mm_cvtsi128_si64.*
      help: |+
          函数功能: 拷贝 a 中的低64位整数.

          _mm_cvtsi128_si64  详细说明, 请参考 https://software.intel.com/sites/landingpage/IntrinsicsGuide/

          修改方案:

          x86 上示例代码:
          ---
          all_zeros = _mm_cvtsi128_si64(zero_bytes) == 0;

          ARM 上对应的修改示例:
          ---
          #include <arm_neon.h>
          all_zeros = vgetq_lane_u64(vreinterpretq_u64_s32(zero_bytes),0) == 0;

    - signature: char _InterlockedAnd8(char volatile *, char)
    - signature: char _InterlockedAnd8_np(char *, char)
    - signature: char _InterlockedCompareExchange8(char volatile *, char, char)
    - signature: char _InterlockedExchange8(char volatile *, char)
    - signature: char _InterlockedExchangeAdd8(char volatile *, char)
    - signature: char _InterlockedOr8(char volatile *, char)
    - signature: char _InterlockedOr8_np(char *, char)
    - signature: char _InterlockedXor8(char volatile *, char)
    - signature: char _InterlockedXor8_np(char *, char)
    - signature: di __builtin_ia32_pand(di, di)
    - signature: di __builtin_ia32_pandn(di,di)
    - signature: di __builtin_ia32_por(di, di)
    - signature: di __builtin_ia32_pxor(di, di)
    - signature: double _mm_cvtsd_f64(__m128d)
    - signature: __float128 __builtin_copysignq(__float128, __float128)
    - signature: __float128 __builtin_huge_valq(void)
    - signature: __float128 __builtin_infq(void)
    - signature: __float128 __builtin_fabsq(__float128)
    - signature: float __builtin_ia32_vec_ext_v4sf(v4sf, const int)
    - signature: float _mm_cvtss_f32(__m128)
    - signature: float _m_to_float(__m64)
    - signature: __int64 _div128(__int64, __int64, __int64, __int64 *)
    - signature: __int64 _InterlockedAnd64_HLEAcquire(__int64 volatile *, __int64)
    - signature: __int64 _InterlockedAnd64_HLERelease(__int64 volatile *, __int64)
    - signature: __int64 _InterlockedAnd64(__int64 volatile *, __int64)
    - signature: __int64 _InterlockedAnd64_np(__int64 *, __int64)
    - signature: __int64 _InterlockedCompareExchange64_HLEAcquire(__int64 volatile *, __int64, __int64)
    - signature: __int64 _InterlockedCompareExchange64_HLERelease(__int64 volatile *, __int64, __int64)
    - signature: __int64 _InterlockedCompareExchange64(__int64 volatile *, __int64, __int64)
    - signature: __int64 _InterlockedCompareExchange64_np(__int64 *, __int64, __int64)
    - signature: __int64 _InterlockedDecrement64(__int64 volatile *)
    - signature: __int64 _InterlockedExchange64_HLEAcquire(__int64 volatile *, __int64)
    - signature: __int64 _InterlockedExchange64_HLERelease(__int64 volatile *, __int64)
    - signature: __int64 _InterlockedExchange64(__int64 volatile *, __int64)
    - signature: __int64 _InterlockedExchangeAdd64_HLEAcquire(__int64 volatile *, __int64)
    - signature: __int64 _InterlockedExchangeAdd64_HLERelease(__int64 volatile *, __int64)
    - signature: __int64 _InterlockedExchangeAdd64(__int64 volatile *, __int64)
    - signature: __int64 _InterlockedIncrement64(__int64 volatile *)
    - signature: __int64 _InterlockedOr64_HLEAcquire(__int64 volatile *, __int64)
    - signature: __int64 _InterlockedOr64_HLERelease(__int64 volatile *, __int64)
    - signature: __int64 _InterlockedOr64(__int64 volatile *, __int64)
    - signature: __int64 _InterlockedOr64_np(__int64 *, __int64)
    - signature: __int64 _InterlockedXor64_HLEAcquire(__int64 volatile *, __int64)
    - signature: __int64 _InterlockedXor64_HLERelease(__int64 volatile *, __int64)
    - signature: __int64 _InterlockedXor64(__int64 volatile *, __int64)
    - signature: __int64 _InterlockedXor64_np(__int64 *, __int64)
    - signature: __int64 _loadbe_i64(void const *)
    - signature: __int64 _mm_cvtsd_si64(__m128d)
    - signature: __int64 _mm_cvtsd_si64x(__m128d)
    - signature: __int64 _mm_cvtsi128_si64(__m128i)
    - signature: __int64 _mm_cvtsi128_si64x(__m128i)
    - signature: __int64 _mm_cvtss_si64(__m128)
    - signature: __int64 _mm_cvtss_si64x(__m128)
    - signature: __int64 _mm_cvttsd_si64(__m128d)
    - signature: __int64 _mm_cvttsd_si64x(__m128d)
    - signature: __int64 _mm_cvttss_si64(__m128)
    - signature: __int64 _mm_cvttss_si64x(__m128)
    - signature: __int64 _mm_extract_epi64(__m128i, const int)
    - signature: __int64 _mm_popcnt_u64(unsigned __int64)
    - signature: __int64 _mul128(__int64, __int64, __int64 *)
    - signature: __int64 __mulh(__int64, __int64)
    - signature: __int64 __emul(int, int)
    - signature: __int64 __ll_rshift(__int64, int)
    - signature: __int64 _sarx_i64(__int64, unsigned int)
    - signature: int __builtin_cpu_is(const char *)
    - signature: int __builtin_cpu_supports(const char *)
    - signature: int __builtin_ia32_comieq(v4sf, v4sf)
    - signature: int __builtin_ia32_comige(v4sf, v4sf)
    - signature: int __builtin_ia32_comigt(v4sf, v4sf)
    - signature: int __builtin_ia32_comile(v4sf, v4sf)
    - signature: int __builtin_ia32_comilt(v4sf, v4sf)
    - signature: int __builtin_ia32_comineq(v4sf, v4sf)
    - signature: int __builtin_ia32_comisdeq(v2df, v2df)
    - signature: int __builtin_ia32_comisdge(v2df, v2df)
    - signature: int __builtin_ia32_comisdgt(v2df, v2df)
    - signature: int __builtin_ia32_comisdle(v2df, v2df)
    - signature: int __builtin_ia32_comisdlt(v2df, v2df)
    - signature: int __builtin_ia32_comisdneq(v2df, v2df)
    - signature: int __builtin_ia32_cvtsd2si(v2df)
    - signature: int __builtin_ia32_cvtss2si(v4sf)
    - signature: int __builtin_ia32_cvttsd2si(v2df)
    - signature: int __builtin_ia32_cvttss2si(v4sf)
    - signature: int __builtin_ia32_movmskpd256(v4df)
    - signature: int __builtin_ia32_movmskpd(v2df)
    - signature: int __builtin_ia32_movmskps256(v8sf)
    - signature: int __builtin_ia32_movmskps(v4sf)
    - signature: int __builtin_ia32_pcmpestri128(v16qi, int, v16qi, int, const int)
    - signature: int __builtin_ia32_pcmpestria128(v16qi, int, v16qi, int, const int)
    - signature: int __builtin_ia32_pcmpestric128(v16qi, int, v16qi, int, const int)
    - signature: int __builtin_ia32_pcmpestrio128(v16qi, int, v16qi, int, const int)
    - signature: int __builtin_ia32_pcmpestris128(v16qi, int, v16qi, int, const int)
    - signature: int __builtin_ia32_pcmpestriz128(v16qi, int, v16qi, int, const int)
    - signature: int __builtin_ia32_pcmpistri128(v16qi, v16qi, const int)
    - signature: int __builtin_ia32_pcmpistria128(v16qi, v16qi, const int)
    - signature: int __builtin_ia32_pcmpistric128(v16qi, v16qi, const int)
    - signature: int __builtin_ia32_pcmpistrio128(v16qi, v16qi, const int)
    - signature: int __builtin_ia32_pcmpistris128(v16qi, v16qi, const int)
    - signature: int __builtin_ia32_pcmpistriz128(v16qi, v16qi, const int)
    - signature: int __builtin_ia32_pextrw(v4hi, int)
    - signature: int __builtin_ia32_pmovmskb128(v16qi)
    - signature: int __builtin_ia32_pmovmskb256(v32qi)
    - signature: int __builtin_ia32_pmovmskb(v8qi)
    - signature: int __builtin_ia32_ptestc128(v2di, v2di)
    - signature: int __builtin_ia32_ptestc256(v4di, v4di, ptest)
    - signature: int __builtin_ia32_ptestnzc128(v2di, v2di)
    - signature: int __builtin_ia32_ptestnzc256(v4di, v4di, ptest)
    - signature: int __builtin_ia32_ptestz128(v2di, v2di)
    - signature: int __builtin_ia32_ptestz256(v4di, v4di, ptest)
    - signature: int __builtin_ia32_ucomieq(v4sf, v4sf)
    - signature: int __builtin_ia32_ucomige(v4sf, v4sf)
    - signature: int __builtin_ia32_ucomigt(v4sf, v4sf)
    - signature: int __builtin_ia32_ucomile(v4sf, v4sf)
    - signature: int __builtin_ia32_ucomilt(v4sf, v4sf)
    - signature: int __builtin_ia32_ucomineq(v4sf, v4sf)
    - signature: int __builtin_ia32_ucomisdeq(v2df, v2df)
    - signature: int __builtin_ia32_ucomisdge(v2df, v2df)
    - signature: int __builtin_ia32_ucomisdgt(v2df, v2df)
    - signature: int __builtin_ia32_ucomisdle(v2df, v2df)
    - signature: int __builtin_ia32_ucomisdlt(v2df, v2df)
    - signature: int __builtin_ia32_ucomisdneq(v2df, v2df)
    - signature: int __builtin_ia32_vec_ext_v16qi(v16qi, const int)
    - signature: int __builtin_ia32_vec_ext_v4si(v4si, const int)
    - signature: int __builtin_ia32_vtestcpd256(v4df, v4df, ptest)
    - signature: int __builtin_ia32_vtestcpd(v2df, v2df, ptest)
    - signature: int __builtin_ia32_vtestcps256(v8sf, v8sf, ptest)
    - signature: int __builtin_ia32_vtestcps(v4sf, v4sf, ptest)
    - signature: int __builtin_ia32_vtestnzcpd256(v4df, v4df, ptest)
    - signature: int __builtin_ia32_vtestnzcpd(v2df, v2df, ptest)
    - signature: int __builtin_ia32_vtestnzcps256(v8sf, v8sf, ptest)
    - signature: int __builtin_ia32_vtestnzcps(v4sf, v4sf, ptest)
    - signature: int __builtin_ia32_vtestzpd256(v4df, v4df, ptest)
    - signature: int __builtin_ia32_vtestzpd(v2df, v2df, ptest)
    - signature: int __builtin_ia32_vtestzps256(v8sf, v8sf, ptest)
    - signature: int __builtin_ia32_vtestzps(v4sf, v4sf, ptest)
    - signature: int __builtin_ia32_xbegin()
    - signature: int __builtin_ia32_xtest()
    - signature: int _div64(__int64, int, int *)
    - signature: int _loadbe_i32(void const *)
    - signature: int _mm256_movemask_epi8(__m256i)
    - signature: int _mm256_movemask_pd(__m256d)
    - signature: int _mm256_movemask_ps(__m256)
    - signature: int _mm256_testc_pd(__m256d, __m256d)
    - signature: int _mm256_testc_ps(__m256, __m256)
    - signature: int _mm256_testc_si256(__m256i, __m256i)
    - signature: int _mm256_testnzc_pd(__m256d, __m256d)
    - signature: int _mm256_testnzc_ps(__m256, __m256)
    - signature: int _mm256_testnzc_si256(__m256i, __m256i)
    - signature: int _mm256_testz_pd(__m256d, __m256d)
    - signature: int _mm256_testz_ps(__m256, __m256)
    - signature: int _mm256_testz_si256(__m256i, __m256i)
    - signature: int _mm_cmpestra(__m128i, int, __m128i, int, const int)
    - signature: int _mm_cmpestrc(__m128i, int, __m128i, int, const int)
    - signature: int _mm_cmpestri(__m128i, int, __m128i, int, const int)
    - signature: int _mm_cmpestro(__m128i, int, __m128i, int, const int)
    - signature: int _mm_cmpestrs(__m128i, int, __m128i, int, const int)
    - signature: int _mm_cmpestrz(__m128i, int, __m128i, int, const int)
    - signature: int _mm_cmpistra(__m128i, __m128i, const int)
    - signature: int _mm_cmpistrc(__m128i, __m128i, const int)
    - signature: int _mm_cmpistri(__m128i, __m128i, const int)
    - signature: int _mm_cmpistro(__m128i, __m128i, const int)
    - signature: int _mm_cmpistrs(__m128i, __m128i, const int)
    - signature: int _mm_cmpistrz(__m128i, __m128i, const int)
    - signature: int _mm_comieq_sd(__m128d, __m128d)
    - signature: int _mm_comieq_ss(__m128, __m128)
    - signature: int _mm_comige_sd(__m128d, __m128d)
    - signature: int _mm_comige_ss(__m128, __m128)
    - signature: int _mm_comigt_sd(__m128d, __m128d)
    - signature: int _mm_comigt_ss(__m128, __m128)
    - signature: int _mm_comile_sd(__m128d, __m128d)
    - signature: int _mm_comile_ss(__m128, __m128)
    - signature: int _mm_comilt_sd(__m128d, __m128d)
    - signature: int _mm_comilt_ss(__m128, __m128)
    - signature: int _mm_comineq_sd(__m128d, __m128d)
    - signature: int _mm_comineq_ss(__m128, __m128)
    - signature: int _mm_cvtsd_si32(__m128d)
    - signature: int _mm_cvtsi128_si32(__m128i)
    - signature: int _mm_cvt_ss2si(__m128)
    - signature: int _mm_cvttsd_si32(__m128d)
    - signature: int _mm_cvtt_ss2si(__m128)
    - signature: int _mm_extract_epi16(__m128i, int)
    - signature: int _mm_extract_epi32(__m128i, const int)
    - signature: int _mm_extract_epi8(__m128i, const int)
    - signature: int _mm_extract_ps(__m128, const int)
    - signature: int _mm_movemask_epi8(__m128i)
    - signature: int _mm_movemask_pd(__m128d)
    - signature: int _mm_movemask_ps(__m128)
    - signature: int _mm_popcnt_u32(unsigned int)
    - signature: int _mm_testc_pd(__m128d, __m128d)
    - signature: int _mm_testc_ps(__m128, __m128)
    - signature: int _mm_testc_si128(__m128i, __m128i)
    - signature: int _mm_testnzc_pd(__m128d, __m128d)
    - signature: int _mm_testnzc_ps(__m128, __m128)
    - signature: int _mm_testnzc_si128(__m128i, __m128i)
    - signature: int _mm_testz_pd(__m128d, __m128d)
    - signature: int _mm_testz_ps(__m128, __m128)
    - signature: int _mm_testz_si128(__m128i, __m128i)
    - signature: int _mm_ucomieq_sd(__m128d, __m128d)
    - signature: int _mm_ucomieq_ss(__m128, __m128)
    - signature: int _mm_ucomige_sd(__m128d, __m128d)
    - signature: int _mm_ucomige_ss(__m128, __m128)
    - signature: int _mm_ucomigt_sd(__m128d, __m128d)
    - signature: int _mm_ucomigt_ss(__m128, __m128)
    - signature: int _mm_ucomile_sd(__m128d, __m128d)
    - signature: int _mm_ucomile_ss(__m128, __m128)
    - signature: int _mm_ucomilt_sd(__m128d, __m128d)
    - signature: int _mm_ucomilt_ss(__m128, __m128)
    - signature: int _mm_ucomineq_sd(__m128d, __m128d)
    - signature: int _mm_ucomineq_ss(__m128, __m128)
    - signature: int _m_pextrw(__m64, int)
    - signature: int _m_pmovmskb(__m64)
    - signature: int _m_to_int(__m64)
    - signature: int _rdrand16_step(unsigned short *)
    - signature: int _rdrand32_step(unsigned int *)
    - signature: int _rdrand64_step(unsigned __int64 *)
    - signature: int _rdseed16_step(unsigned short *)
    - signature: int _rdseed32_step(unsigned int *)
    - signature: int _rdseed64_step(unsigned __int64 *)
    - signature: int _sarx_i32(int, unsigned int)
    - signature: long _InterlockedAddLargeStatistic(__int64 volatile *, long)
    - signature: long _InterlockedAnd_HLEAcquire(long volatile *, long)
    - signature: long _InterlockedAnd_HLERelease(long volatile *, long)
    - signature: long _InterlockedAnd(long volatile *, long)
    - signature: long _InterlockedAnd_np(long *, long)
    - signature: long _InterlockedCompareExchange_HLEAcquire(long volatile *, long, long)
    - signature: long _InterlockedCompareExchange_HLERelease(long volatile *, long, long)
    - signature: long _InterlockedCompareExchange(long volatile *, long, long)
    - signature: long _InterlockedCompareExchange_np(long *, long, long)
    - signature: long _InterlockedDecrement(long volatile *)
    - signature: long _InterlockedExchangeAdd_HLEAcquire(long volatile *, long)
    - signature: long _InterlockedExchangeAdd_HLERelease(long volatile *, long)
    - signature: long _InterlockedExchangeAdd(long volatile *, long)
    - signature: long _InterlockedExchange_HLEAcquire(long volatile *, long)
    - signature: long _InterlockedExchange_HLERelease(long volatile *, long)
    - signature: long _InterlockedExchange(long volatile *, long)
    - signature: long _InterlockedIncrement(long volatile *)
    - signature: long _InterlockedOr_HLEAcquire(long volatile *, long)
    - signature: long _InterlockedOr_HLERelease(long volatile *, long)
    - signature: long _InterlockedOr(long volatile *, long)
    - signature: long _InterlockedOr_np(long *, long)
    - signature: long _InterlockedXor_HLEAcquire(long volatile *, long)
    - signature: long _InterlockedXor_HLERelease(long volatile *, long)
    - signature: long _InterlockedXor(long volatile *, long)
    - signature: long _InterlockedXor_np(long *, long)
    - signature: long long __builtin_ia32_cvtsd2si64(v2df)
    - signature: long long __builtin_ia32_cvttsd2si64(v2df)
    - signature: long long __builtin_ia32_vec_ext_v2di(v2di, const int)
    - signature: __m128d _mm256_castpd256_pd128(__m256d)
    - signature: __m128d _mm256_extractf128_pd(__m256d, const int)
    - signature: __m128d _mm_add_pd(__m128d, __m128d)
    - signature: __m128d _mm_add_sd(__m128d, __m128d)
    - signature: __m128d _mm_addsub_pd(__m128d, __m128d)
    - signature: __m128d _mm_andnot_pd(__m128d, __m128d)
    - signature: __m128d _mm_and_pd(__m128d, __m128d)
    - signature: __m128d _mm_blend_pd(__m128d, __m128d, const int)
    - signature: __m128d _mm_blendv_pd(__m128d, __m128d, __m128d)
    - signature: __m128d _mm_broadcastsd_pd(__m128d)
    - signature: __m128d _mm_castps_pd(__m128)
    - signature: __m128d _mm_castsi128_pd(__m128i)
    - signature: __m128d _mm_cmpeq_pd(__m128d, __m128d)
    - signature: __m128d _mm_cmpeq_sd(__m128d, __m128d)
    - signature: __m128d _mm_cmpge_pd(__m128d, __m128d)
    - signature: __m128d _mm_cmpge_sd(__m128d, __m128d)
    - signature: __m128d _mm_cmpgt_pd(__m128d, __m128d)
    - signature: __m128d _mm_cmpgt_sd(__m128d, __m128d)
    - signature: __m128d _mm_cmple_pd(__m128d, __m128d)
    - signature: __m128d _mm_cmple_sd(__m128d, __m128d)
    - signature: __m128d _mm_cmplt_pd(__m128d, __m128d)
    - signature: __m128d _mm_cmplt_sd(__m128d, __m128d)
    - signature: __m128d _mm_cmpneq_pd(__m128d, __m128d)
    - signature: __m128d _mm_cmpneq_sd(__m128d, __m128d)
    - signature: __m128d _mm_cmpnge_pd(__m128d, __m128d)
    - signature: __m128d _mm_cmpnge_sd(__m128d, __m128d)
    - signature: __m128d _mm_cmpngt_pd(__m128d, __m128d)
    - signature: __m128d _mm_cmpngt_sd(__m128d, __m128d)
    - signature: __m128d _mm_cmpnle_pd(__m128d, __m128d)
    - signature: __m128d _mm_cmpnle_sd(__m128d, __m128d)
    - signature: __m128d _mm_cmpnlt_pd(__m128d, __m128d)
    - signature: __m128d _mm_cmpnlt_sd(__m128d, __m128d)
    - signature: __m128d _mm_cmpord_pd(__m128d, __m128d)
    - signature: __m128d _mm_cmpord_sd(__m128d, __m128d)
    - signature: __m128d _mm_cmp_pd(__m128d, __m128d, const int)
    - signature: __m128d _mm_cmp_sd(__m128d, __m128d, const int)
    - signature: __m128d _mm_cmpunord_pd(__m128d, __m128d)
    - signature: __m128d _mm_cmpunord_sd(__m128d, __m128d)
    - signature: __m128d _mm_cvtepi32_pd(__m128i)
    - signature: __m128d _mm_cvtpi32_pd(__m64)
    - signature: __m128d _mm_cvtps_pd(__m128)
    - signature: __m128d _mm_cvtsi32_sd(__m128d, int)
    - signature: __m128d _mm_cvtsi64_sd(__m128d, __int64)
    - signature: __m128d _mm_cvtsi64x_sd(__m128d, __int64)
    - signature: __m128d _mm_cvtss_sd(__m128d, __m128)
    - signature: __m128d _mm_div_pd(__m128d, __m128d)
    - signature: __m128d _mm_div_sd(__m128d, __m128d)
    - signature: __m128d _mm_dp_pd(__m128d, __m128d, const int)
    - signature: __m128d _mm_fmadd_pd(__m128d, __m128d, __m128d)
    - signature: __m128d _mm_fmadd_sd(__m128d, __m128d, __m128d)
    - signature: __m128d _mm_fmaddsub_pd(__m128d, __m128d, __m128d)
    - signature: __m128d _mm_fmsubadd_pd(__m128d, __m128d, __m128d)
    - signature: __m128d _mm_fmsub_pd(__m128d, __m128d, __m128d)
    - signature: __m128d _mm_fmsub_sd(__m128d, __m128d, __m128d)
    - signature: __m128d _mm_fnmadd_pd(__m128d, __m128d, __m128d)
    - signature: __m128d _mm_fnmadd_sd(__m128d, __m128d, __m128d)
    - signature: __m128d _mm_fnmsub_pd(__m128d, __m128d, __m128d)
    - signature: __m128d _mm_fnmsub_sd(__m128d, __m128d, __m128d)
    - signature: __m128d _mm_frcz_pd(__m128d)
    - signature: __m128d _mm_frcz_sd(__m128d, __m128d)
    - signature: __m128d _mm_hadd_pd(__m128d, __m128d)
    - signature: __m128d _mm_hsub_pd(__m128d, __m128d)
    - signature: __m128d _mm_i32gather_pd(double const *, __m128i, const int)
    - signature: __m128d _mm_i64gather_pd(double const *, __m128i, const int)
    - signature: __m128d _mm_load1_pd(double *)
    - signature: __m128d _mm_loaddup_pd(double const *)
    - signature: __m128d _mm_loadh_pd(__m128d, double *)
    - signature: __m128d _mm_loadl_pd(__m128d, double *)
    - signature: __m128d _mm_load_pd(double *)
    - signature: __m128d _mm_loadr_pd(double *)
    - signature: __m128d _mm_load_sd(double *)
    - signature: __m128d _mm_loadu_pd(double *)
    - signature: __m128d _mm_macc_pd(__m128d, __m128d, __m128d)
    - signature: __m128d _mm_macc_sd(__m128d, __m128d, __m128d)
    - signature: __m128d _mm_maddsub_pd(__m128d , __m128d, __m128d)
    - signature: __m128d _mm_mask_i32gather_pd(__m128d, double const *, __m128i, __m128d, const int)
    - signature: __m128d _mm_mask_i64gather_pd(__m128d, double const *, __m128i, __m128d, const int)
    - signature: __m128d _mm_maskload_pd(double const *, __m128i)
    - signature: __m128d _mm_max_pd(__m128d, __m128d)
    - signature: __m128d _mm_max_sd(__m128d, __m128d)
    - signature: __m128d _mm_min_pd(__m128d, __m128d)
    - signature: __m128d _mm_min_sd(__m128d, __m128d)
    - signature: __m128d _mm_movedup_pd(__m128d)
    - signature: __m128d _mm_move_sd(__m128d, __m128d)
    - signature: __m128d _mm_msubadd_pd(__m128d, __m128d, __m128d)
    - signature: __m128d _mm_msub_pd(__m128d, __m128d, __m128d)
    - signature: __m128d _mm_msub_sd(__m128d, __m128d, __m128d)
    - signature: __m128d _mm_mul_pd(__m128d, __m128d)
    - signature: __m128d _mm_mul_sd(__m128d, __m128d)
    - signature: __m128d _mm_nmacc_pd(__m128d, __m128d, __m128d)
    - signature: __m128d _mm_nmacc_sd(__m128d, __m128d, __m128d)
    - signature: __m128d _mm_nmsub_pd(__m128d, __m128d, __m128d)
    - signature: __m128d _mm_nmsub_sd(__m128d, __m128d, __m128d)
    - signature: __m128d _mm_or_pd(__m128d, __m128d)
    - signature: __m128d _mm_permute2_pd(__m128d, __m128d, __m128i, int)
    - signature: __m128d _mm_permute_pd(__m128d, int)
    - signature: __m128d _mm_permutevar_pd(__m128d, __m128i)
    - signature: __m128d _mm_round_pd(__m128d, const int)
    - signature: __m128d _mm_round_sd(__m128d, __m128d, const int)
    - signature: __m128d _mm_set1_pd(double)
    - signature: __m128d _mm_set_pd(double, double)
    - signature: __m128d _mm_setr_pd(double, double)
    - signature: __m128d _mm_set_sd(double)
    - signature: __m128d _mm_setzero_pd(void)
    - signature: __m128d _mm_shuffle_pd(__m128d, __m128d, int)
    - signature: __m128d _mm_sqrt_pd(__m128d)
    - signature: __m128d _mm_sqrt_sd(__m128d, __m128d)
    - signature: __m128d _mm_sub_pd(__m128d, __m128d)
    - signature: __m128d _mm_sub_sd(__m128d, __m128d)
    - signature: __m128d _mm_unpackhi_pd(__m128d, __m128d)
    - signature: __m128d _mm_unpacklo_pd(__m128d, __m128d)
    - signature: __m128d _mm_xor_pd(__m128d, __m128d)
    - signature: __m128i _mm256_castsi256_si128(__m256i)
    - signature: __m128i _mm256_cvtpd_epi32(__m256d)
    - signature: __m128i _mm256_cvtps_ph(__m256, const int)
    - signature: __m128i _mm256_cvttpd_epi32(__m256d)
    - signature: __m128i _mm256_extractf128_si256(__m256i, const int)
    - signature: __m128i _mm256_extracti128_si256(__m256i, int)
    - signature: __m128i _mm256_mask_i64gather_epi32(__m128i, int const *, __m256i, __m128i, const int)
    - signature: __m128i _mm_abs_epi16(__m128i)
    - signature: __m128i _mm_abs_epi32(__m128i)
    - signature: __m128i _mm_abs_epi8(__m128i)
    - signature: __m128i _mm_add_epi16(__m128i, __m128i)
    - signature: __m128i _mm_add_epi32(__m128i, __m128i)
    - signature: __m128i _mm_add_epi64(__m128i, __m128i)
    - signature: __m128i _mm_add_epi8(__m128i, __m128i)
    - signature: __m128i _mm_adds_epi16(__m128i, __m128i)
    - signature: __m128i _mm_adds_epi8(__m128i, __m128i)
    - signature: __m128i _mm_adds_epu16(__m128i, __m128i)
    - signature: __m128i _mm_adds_epu8(__m128i, __m128i)
    - signature: __m128i _mm_aesdeclast_si128(__m128i, __m128i)
    - signature: __m128i _mm_aesdec_si128(__m128i, __m128i)
    - signature: __m128i _mm_aesenclast_si128(__m128i, __m128i)
    - signature: __m128i _mm_aesenc_si128(__m128i, __m128i)
    - signature: __m128i _mm_aesimc_si128(__m128i)
    - signature: __m128i _mm_aeskeygenassist_si128(__m128i, const int)
    - signature: __m128i _mm_alignr_epi8(__m128i, __m128i, int)
    - signature: __m128i _mm_andnot_si128(__m128i , __m128i)
    - signature: __m128i _mm_andnot_si128(__m128i, __m128i)
    - signature: __m128i _mm_and_si128(__m128i, __m128i)
    - signature: __m128i _mm_avg_epu16(__m128i, __m128i)
    - signature: __m128i _mm_avg_epu8(__m128i, __m128i)
    - signature: __m128i _mm_blend_epi16(__m128i, __m128i, const int)
    - signature: __m128i _mm_blend_epi32(__m128i, __m128i, const int)
    - signature: __m128i _mm_blendv_epi8(__m128i, __m128i, __m128i)
    - signature: __m128i _mm_broadcastb_epi8(__m128i)
    - signature: __m128i _mm_broadcastd_epi32(__m128i)
    - signature: __m128i _mm_broadcastq_epi64(__m128i)
    - signature: __m128i _mm_broadcastw_epi16(__m128i)
    - signature: __m128i _mm_castpd_si128(__m128d)
    - signature: __m128i _mm_castps_si128(__m128)
    - signature: __m128i _mm_clmulepi64_si128(__m128i, __m128i, const int)
    - signature: __m128i _mm_cmov_si128(__m128i, __m128i, __m128i)
    - signature: __m128i _mm_cmpeq_epi16(__m128i, __m128i)
    - signature: __m128i _mm_cmpeq_epi32(__m128i, __m128i)
    - signature: __m128i _mm_cmpeq_epi64(__m128i, __m128i)
    - signature: __m128i _mm_cmpeq_epi8(__m128i, __m128i)
    - signature: __m128i _mm_cmpestrm(__m128i, int, __m128i, int, const int)
    - signature: __m128i _mm_cmpgt_epi16(__m128i, __m128i)
    - signature: __m128i _mm_cmpgt_epi32(__m128i, __m128i)
    - signature: __m128i _mm_cmpgt_epi64(__m128i, __m128i)
    - signature: __m128i _mm_cmpgt_epi8(__m128i, __m128i)
    - signature: __m128i _mm_cmpistrm(__m128i, __m128i, const int)
    - signature: __m128i _mm_cmplt_epi16(__m128i, __m128i)
    - signature: __m128i _mm_cmplt_epi32(__m128i, __m128i)
    - signature: __m128i _mm_cmplt_epi8(__m128i, __m128i)
    - signature: __m128i _mm_com_epi16(__m128i, __m128i, int)
    - signature: __m128i _mm_com_epi32(__m128i, __m128i, int)
    - signature: __m128i _mm_com_epi64(__m128i, __m128i, int)
    - signature: __m128i _mm_com_epi8(__m128i, __m128i, int)
    - signature: __m128i _mm_com_epu16(__m128i, __m128i, int)
    - signature: __m128i _mm_com_epu32(__m128i, __m128i, int)
    - signature: __m128i _mm_com_epu64(__m128i, __m128i, int)
    - signature: __m128i _mm_com_epu8(__m128i, __m128i, int)
    - signature: __m128i _mm_cvtepi16_epi32(__m128i)
    - signature: __m128i _mm_cvtepi16_epi64(__m128i)
    - signature: __m128i _mm_cvtepi32_epi64(__m128i)
    - signature: __m128i _mm_cvtepi8_epi16(__m128i)
    - signature: __m128i _mm_cvtepi8_epi32(__m128i)
    - signature: __m128i _mm_cvtepi8_epi64(__m128i)
    - signature: __m128i _mm_cvtepu16_epi32(__m128i)
    - signature: __m128i _mm_cvtepu16_epi64(__m128i)
    - signature: __m128i _mm_cvtepu32_epi64(__m128i)
    - signature: __m128i _mm_cvtepu8_epi16(__m128i)
    - signature: __m128i _mm_cvtepu8_epi32(__m128i)
    - signature: __m128i _mm_cvtepu8_epi64(__m128i)
    - signature: __m128i _mm_cvtpd_epi32(__m128d)
    - signature: __m128i _mm_cvtps_epi32(__m128)
    - signature: __m128i _mm_cvtps_ph(__m128, const int)
    - signature: __m128i _mm_cvtsi32_si128(int)
    - signature: __m128i _mm_cvtsi64_si128(__int64)
    - signature: __m128i _mm_cvtsi64x_si128(__int64)
    - signature: __m128i _mm_cvttpd_epi32(__m128d)
    - signature: __m128i _mm_cvttps_epi32(__m128)
    - signature: __m128i _mm_extracti_si64(__m128i, int, int)
    - signature: __m128i _mm_extract_si64(__m128i, __m128i)
    - signature: __m128i _mm_haddd_epi16(__m128i)
    - signature: __m128i _mm_haddd_epi8(__m128i)
    - signature: __m128i _mm_haddd_epu16(__m128i)
    - signature: __m128i _mm_haddd_epu8(__m128i)
    - signature: __m128i _mm_hadd_epi16(__m128i, __m128i)
    - signature: __m128i _mm_hadd_epi32(__m128i, __m128i)
    - signature: __m128i _mm_haddq_epi16(__m128i)
    - signature: __m128i _mm_haddq_epi32(__m128i)
    - signature: __m128i _mm_haddq_epi8(__m128i)
    - signature: __m128i _mm_haddq_epu16(__m128i)
    - signature: __m128i _mm_haddq_epu32(__m128i)
    - signature: __m128i _mm_haddq_epu8(__m128i)
    - signature: __m128i _mm_hadds_epi16(__m128i, __m128i)
    - signature: __m128i _mm_haddw_epi8(__m128i)
    - signature: __m128i _mm_haddw_epu8(__m128i)
    - signature: __m128i _mm_hsubd_epi16(__m128i)
    - signature: __m128i _mm_hsub_epi16(__m128i, __m128i)
    - signature: __m128i _mm_hsub_epi32(__m128i, __m128i)
    - signature: __m128i _mm_hsubq_epi32(__m128i)
    - signature: __m128i _mm_hsubs_epi16(__m128i, __m128i)
    - signature: __m128i _mm_hsubw_epi8(__m128i)
    - signature: __m128i _mm_i32gather_epi32(int const *, __m128i, const int)
    - signature: __m128i _mm_i32gather_epi64(__int64 const *, __m128i, const int)
    - signature: __m128i _mm_i64gather_epi32(int const *, __m128i, const int)
    - signature: __m128i _mm_i64gather_epi64(__int64 const *, __m128i, const int)
    - signature: __m128i _mm_insert_epi16(__m128i, int, int)
    - signature: __m128i _mm_insert_epi32(__m128i, int, const int)
    - signature: __m128i _mm_insert_epi64(__m128i, __int64, const int)
    - signature: __m128i _mm_insert_epi8(__m128i, int, const int)
    - signature: __m128i _mm_inserti_si64(__m128i, __m128i, int, int)
    - signature: __m128i _mm_insert_si64(__m128i, __m128i)
    - signature: __m128i _mm_lddqu_si128(__m128i const *)
    - signature: __m128i _mm_loadl_epi64(__m128i *)
    - signature: __m128i _mm_load_si128(__m128i *)
    - signature: __m128i _mm_loadu_si128(__m128i *)
    - signature: __m128i _mm_maccd_epi16(__m128i, __m128i, __m128i)
    - signature: __m128i _mm_macc_epi16(__m128i, __m128i, __m128i)
    - signature: __m128i _mm_macc_epi32(__m128i, __m128i, __m128i)
    - signature: __m128i _mm_macchi_epi32(__m128i, __m128i, __m128i)
    - signature: __m128i _mm_macclo_epi32(__m128i, __m128i, __m128i)
    - signature: __m128i _mm_maccsd_epi16(__m128i , __m128i, __m128i)
    - signature: __m128i _mm_maccs_epi16(__m128i, __m128i, __m128i)
    - signature: __m128i _mm_maccs_epi32(__m128i, __m128i, __m128i)
    - signature: __m128i _mm_maccshi_epi32(__m128i, __m128i, __m128i)
    - signature: __m128i _mm_maccslo_epi32(__m128i, __m128i, __m128i)
    - signature: __m128i _mm_maddd_epi16(__m128i , __m128i, __m128i)
    - signature: __m128i _mm_madd_epi16(__m128i, __m128i)
    - signature: __m128i _mm_maddsd_epi16(__m128i, __m128i, __m128i)
    - signature: __m128i _mm_maddubs_epi16(__m128i, __m128i)
    - signature: __m128i _mm_mask_i32gather_epi32(__m128i, int const *, __m128i, __m128i, const int)
    - signature: __m128i _mm_mask_i32gather_epi64(__m128i, __int64 const *, __m128i, __m128i, const int)
    - signature: __m128i _mm_mask_i64gather_epi32(__m128i, int const *, __m128i, __m128i, const int)
    - signature: __m128i _mm_mask_i64gather_epi64(__m128i, __int64 const *, __m128i, __m128i, const int)
    - signature: __m128i _mm_maskload_epi32(int const *, __m128i)
    - signature: __m128i _mm_maskload_epi64(__int64 const *, __m128i)
    - signature: __m128i _mm_max_epi16(__m128i, __m128i)
    - signature: __m128i _mm_max_epi32(__m128i, __m128i)
    - signature: __m128i _mm_max_epi8 (__m128i, __m128i)
    - signature: __m128i _mm_max_epu16(__m128i, __m128i)
    - signature: __m128i _mm_max_epu32(__m128i, __m128i)
    - signature: __m128i _mm_max_epu8(__m128i, __m128i)
    - signature: __m128i _mm_min_epi16(__m128i, __m128i)
    - signature: __m128i _mm_min_epi32(__m128i, __m128i)
    - signature: __m128i _mm_min_epi8(__m128i, __m128i)
    - signature: __m128i _mm_min_epu16(__m128i, __m128i)
    - signature: __m128i _mm_min_epu32(__m128i, __m128i)
    - signature: __m128i _mm_min_epu8(__m128i, __m128i)
    - signature: __m128i _mm_minpos_epu16(__m128i)
    - signature: __m128i _mm_move_epi64(__m128i)
    - signature: __m128i _mm_movpi64_epi64(__m64)
    - signature: __m128i _mm_mpsadbw_epu8(__m128i, __m128i, const int)
    - signature: __m128i _mm_mul_epi32(__m128i, __m128i)
    - signature: __m128i _mm_mul_epu32(__m128i, __m128i)
    - signature: __m128i _mm_mulhi_epi16(__m128i, __m128i)
    - signature: __m128i _mm_mulhi_epu16(__m128i, __m128i)
    - signature: __m128i _mm_mulhrs_epi16(__m128i, __m128i)
    - signature: __m128i _mm_mullo_epi16(__m128i, __m128i)
    - signature: __m128i _mm_mullo_epi32(__m128i, __m128i)
    - signature: __m128i _mm_or_si128(__m128i, __m128i)
    - signature: __m128i _mm_packs_epi16(__m128i, __m128i)
    - signature: __m128i _mm_packs_epi32(__m128i, __m128i)
    - signature: __m128i _mm_packus_epi16(__m128i, __m128i)
    - signature: __m128i _mm_packus_epi32(__m128i, __m128i)
    - signature: __m128i _mm_perm_epi8(__m128i, __m128i, __m128i)
    - signature: __m128i _mm_rot_epi16(__m128i, int)
    - signature: __m128i _mm_rot_epi16(__m128i, __m128i)
    - signature: __m128i _mm_rot_epi32(__m128i, int)
    - signature: __m128i _mm_rot_epi32(__m128i, __m128i)
    - signature: __m128i _mm_rot_epi64(__m128i, int)
    - signature: __m128i _mm_rot_epi64(__m128i, __m128i)
    - signature: __m128i _mm_rot_epi8(__m128i, int)
    - signature: __m128i _mm_rot_epi8(__m128i, __m128i)
    - signature: __m128i _mm_roti_epi16(__m128i, int)
    - signature: __m128i _mm_roti_epi32(__m128i, int)
    - signature: __m128i _mm_roti_epi64(__m128i, int)
    - signature: __m128i _mm_roti_epi8(__m128i, int)
    - signature: __m128i _mm_sad_epu8(__m128i, __m128i)
    - signature: __m128i _mm_set1_epi16(short)
    - signature: __m128i _mm_set1_epi32(int)
    - signature: __m128i _mm_set1_epi64(__m64)
    - signature: __m128i _mm_set1_epi64x(__int64)
    - signature: __m128i _mm_set1_epi8(char)
    - signature: __m128i _mm_set_epi16(short, short, short, short, short, short, short, short)
    - signature: __m128i _mm_set_epi32(int, int, int, int)
    - signature: __m128i _mm_set_epi64(__m64, __m64)
    - signature: __m128i _mm_set_epi64x(__int64, __int64)
    - signature: __m128i _mm_set_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char)
    - signature: __m128i _mm_setl_epi64(__m128i)
    - signature: __m128i _mm_setr_epi16(short, short, short, short, short, short, short, short)
    - signature: __m128i _mm_setr_epi32(int, int, int, int)
    - signature: __m128i _mm_setr_epi64(__m64, __m64)
    - signature: __m128i _mm_setr_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char)
    - signature: __m128i _mm_setzero_si128(void)
    - signature: __m128i _mm_sha_epi16(__m128i, __m128i)
    - signature: __m128i _mm_sha_epi32(__m128i, __m128i)
    - signature: __m128i _mm_sha_epi64(__m128i, __m128i)
    - signature: __m128i _mm_sha_epi8(__m128i, __m128i)
    - signature: __m128i _mm_shl_epi16(__m128i, __m128i)
    - signature: __m128i _mm_shl_epi32(__m128i, __m128i)
    - signature: __m128i _mm_shl_epi64(__m128i, __m128i)
    - signature: __m128i _mm_shl_epi8(__m128i, __m128i)
    - signature: __m128i _mm_shuffle_epi32(__m128i, int)
    - signature: __m128i _mm_shuffle_epi8(__m128i, __m128i)
    - signature: __m128i _mm_shufflehi_epi16(__m128i, int)
    - signature: __m128i _mm_shufflelo_epi16(__m128i, int)
    - signature: __m128i _mm_sign_epi16(__m128i, __m128i)
    - signature: __m128i _mm_sign_epi32(__m128i, __m128i)
    - signature: __m128i _mm_sign_epi8(__m128i, __m128i)
    - signature: __m128i _mm_sll_epi16(__m128i, __m128i)
    - signature: __m128i _mm_sll_epi32(__m128i, __m128i)
    - signature: __m128i _mm_sll_epi64(__m128i, __m128i)
    - signature: __m128i _mm_slli_epi16(__m128i, int)
    - signature: __m128i _mm_slli_epi32(__m128i, int)
    - signature: __m128i _mm_slli_epi64(__m128i, int)
    - signature: __m128i _mm_slli_si128(__m128i, int)
    - signature: __m128i _mm_sllv_epi32(__m128i, __m128i)
    - signature: __m128i _mm_sllv_epi64(__m128i, __m128i)
    - signature: __m128i _mm_sra_epi16(__m128i, __m128i)
    - signature: __m128i _mm_sra_epi32(__m128i, __m128i)
    - signature: __m128i _mm_srai_epi16(__m128i, int)
    - signature: __m128i _mm_srai_epi32(__m128i, int)
    - signature: __m128i _mm_srav_epi32(__m128i, __m128i)
    - signature: __m128i _mm_srl_epi16(__m128i, __m128i)
    - signature: __m128i _mm_srl_epi32(__m128i, __m128i)
    - signature: __m128i _mm_srl_epi64(__m128i, __m128i)
    - signature: __m128i _mm_srli_epi16(__m128i, int)
    - signature: __m128i _mm_srli_epi32(__m128i, int)
    - signature: __m128i _mm_srli_epi64(__m128i, int)
    - signature: __m128i _mm_srli_si128(__m128i, int)
    - signature: __m128i _mm_srlv_epi32(__m128i, __m128i)
    - signature: __m128i _mm_srlv_epi64(__m128i, __m128i)
    - signature: __m128i _mm_stream_load_si128(__m128i *)
    - signature: __m128i _mm_sub_epi16(__m128i, __m128i)
    - signature: __m128i _mm_sub_epi32(__m128i, __m128i)
    - signature: __m128i _mm_sub_epi64(__m128i, __m128i)
    - signature: __m128i _mm_sub_epi8(__m128i, __m128i)
    - signature: __m128i _mm_subs_epi16(__m128i, __m128i)
    - signature: __m128i _mm_subs_epi8(__m128i, __m128i)
    - signature: __m128i _mm_subs_epu16(__m128i, __m128i)
    - signature: __m128i _mm_subs_epu8(__m128i, __m128i)
    - signature: __m128i _mm_unpackhi_epi16(__m128i, __m128i)
    - signature: __m128i _mm_unpackhi_epi32(__m128i, __m128i)
    - signature: __m128i _mm_unpackhi_epi64(__m128i, __m128i)
    - signature: __m128i _mm_unpackhi_epi8(__m128i, __m128i)
    - signature: __m128i _mm_unpacklo_epi16(__m128i, __m128i)
    - signature: __m128i _mm_unpacklo_epi32(__m128i, __m128i)
    - signature: __m128i _mm_unpacklo_epi64(__m128i, __m128i)
    - signature: __m128i _mm_unpacklo_epi8(__m128i, __m128i)
    - signature: __m128i _mm_xor_si128(__m128i, __m128i)
    - signature: __m128 _mm256_castps256_ps128(__m256)
    - signature: __m128 _mm256_cvtpd_ps(__m256d)
    - signature: __m128 _mm256_extractf128_ps(__m256, const int)
    - signature: __m128 _mm256_i64gather_ps(float const *, __m256i, const int)
    - signature: __m128 _mm256_mask_i64gather_ps(__m128, float const *, __m256i, __m128, const int)
    - signature: __m128 _mm_add_ps(__m128, __m128)
    - signature: __m128 _mm_add_ss(__m128, __m128)
    - signature: __m128 _mm_addsub_ps(__m128, __m128)
    - signature: __m128 _mm_andnot_ps(__m128, __m128)
    - signature: __m128 _mm_and_ps(__m128, __m128)
    - signature: __m128 _mm_blend_ps(__m128, __m128, const int)
    - signature: __m128 _mm_blendv_ps(__m128, __m128, __m128)
    - signature: __m128 _mm_broadcast_ss(float const *)
    - signature: __m128 _mm_broadcastss_ps(__m128)
    - signature: __m128 _mm_castpd_ps(__m128d)
    - signature: __m128 _mm_castsi128_ps(__m128i)
    - signature: __m128 _mm_cmpeq_ps(__m128, __m128)
    - signature: __m128 _mm_cmpeq_ss(__m128, __m128)
    - signature: __m128 _mm_cmpge_ps(__m128, __m128)
    - signature: __m128 _mm_cmpge_ss(__m128, __m128)
    - signature: __m128 _mm_cmpgt_ps(__m128, __m128)
    - signature: __m128 _mm_cmpgt_ss(__m128, __m128)
    - signature: __m128 _mm_cmple_ps(__m128, __m128)
    - signature: __m128 _mm_cmple_ss(__m128, __m128)
    - signature: __m128 _mm_cmplt_ps(__m128, __m128)
    - signature: __m128 _mm_cmplt_ss(__m128, __m128)
    - signature: __m128 _mm_cmpneq_ps(__m128, __m128)
    - signature: __m128 _mm_cmpneq_ss(__m128, __m128)
    - signature: __m128 _mm_cmpnge_ps(__m128, __m128)
    - signature: __m128 _mm_cmpnge_ss(__m128, __m128)
    - signature: __m128 _mm_cmpngt_ps(__m128, __m128)
    - signature: __m128 _mm_cmpngt_ss(__m128, __m128)
    - signature: __m128 _mm_cmpnle_ps(__m128, __m128)
    - signature: __m128 _mm_cmpnle_ss(__m128, __m128)
    - signature: __m128 _mm_cmpnlt_ps(__m128, __m128)
    - signature: __m128 _mm_cmpnlt_ss(__m128, __m128)
    - signature: __m128 _mm_cmpord_ps(__m128, __m128)
    - signature: __m128 _mm_cmpord_ss(__m128, __m128)
    - signature: __m128 _mm_cmp_ps(__m128, __m128, const int)
    - signature: __m128 _mm_cmp_ss(__m128, __m128, const int)
    - signature: __m128 _mm_cmpunord_ps(__m128, __m128)
    - signature: __m128 _mm_cmpunord_ss(__m128, __m128)
    - signature: __m128 _mm_cvtepi32_ps(__m128i)
    - signature: __m128 _mm_cvtpd_ps(__m128d)
    - signature: __m128 _mm_cvtph_ps(__m128i)
    - signature: __m128 _mm_cvt_pi2ps(__m128, __m64)
    - signature: __m128 _mm_cvtsd_ss(__m128, __m128d)
    - signature: __m128 _mm_cvt_si2ss(__m128, int)
    - signature: __m128 _mm_cvtsi64_ss(__m128, __int64)
    - signature: __m128 _mm_cvtsi64x_ss(__m128, __int64)
    - signature: __m128 _mm_div_ps(__m128, __m128)
    - signature: __m128 _mm_div_ss(__m128, __m128)
    - signature: __m128 _mm_dp_ps(__m128, __m128, const int)
    - signature: __m128 _mm_fmadd_ps(__m128, __m128, __m128)
    - signature: __m128 _mm_fmadd_ss(__m128, __m128, __m128)
    - signature: __m128 _mm_fmaddsub_ps(__m128, __m128, __m128)
    - signature: __m128 _mm_fmsubadd_ps(__m128, __m128, __m128)
    - signature: __m128 _mm_fmsub_ps(__m128, __m128, __m128)
    - signature: __m128 _mm_fmsub_ss(__m128, __m128, __m128)
    - signature: __m128 _mm_fnmadd_ps(__m128, __m128, __m128)
    - signature: __m128 _mm_fnmadd_ss(__m128, __m128, __m128)
    - signature: __m128 _mm_fnmsub_ps(__m128, __m128, __m128)
    - signature: __m128 _mm_fnmsub_ss(__m128, __m128, __m128)
    - signature: __m128 _mm_frcz_ps(__m128)
    - signature: __m128 _mm_frcz_ss(__m128, __m128)
    - signature: __m128 _mm_hadd_ps(__m128, __m128)
    - signature: __m128 _mm_hsub_ps(__m128, __m128)
    - signature: __m128 _mm_i32gather_ps(float const *, __m128i, const int)
    - signature: __m128 _mm_i64gather_ps(float const *, __m128i, const int)
    - signature: __m128 _mm_insert_ps(__m128, __m128, const int)
    - signature: __m128 _mm_loadh_pi(__m128, __m64*)
    - signature: __m128 _mm_loadl_pi(__m128, __m64*)
    - signature: __m128 _mm_load_ps1(float*)
    - signature: __m128 _mm_load_ps(float*)
    - signature: __m128 _mm_loadr_ps(float*)
    - signature: __m128 _mm_load_ss(float*)
    - signature: __m128 _mm_loadu_ps(float*)
    - signature: __m128 _mm_macc_ps(__m128, __m128, __m128)
    - signature: __m128 _mm_macc_ss(__m128, __m128, __m128)
    - signature: __m128 _mm_maddsub_ps(__m128, __m128, __m128)
    - signature: __m128 _mm_mask_i32gather_ps(__m128, float const *, __m128i, __m128, const int)
    - signature: __m128 _mm_mask_i64gather_ps(__m128, float const *, __m128i, __m128, const int)
    - signature: __m128 _mm_maskload_ps(float const *, __m128i)
    - signature: __m128 _mm_max_ps(__m128, __m128)
    - signature: __m128 _mm_max_ss(__m128, __m128)
    - signature: __m128 _mm_min_ps(__m128, __m128)
    - signature: __m128 _mm_min_ss(__m128, __m128)
    - signature: __m128 _mm_movehdup_ps(__m128)
    - signature: __m128 _mm_movehl_ps(__m128, __m128)
    - signature: __m128 _mm_moveldup_ps(__m128)
    - signature: __m128 _mm_movelh_ps(__m128, __m128)
    - signature: __m128 _mm_move_ss(__m128, __m128)
    - signature: __m128 _mm_msubadd_ps(__m128, __m128, __m128)
    - signature: __m128 _mm_msub_ps(__m128, __m128, __m128)
    - signature: __m128 _mm_msub_ss(__m128, __m128, __m128)
    - signature: __m128 _mm_mul_ps(__m128, __m128)
    - signature: __m128 _mm_mul_ss(__m128, __m128)
    - signature: __m128 _mm_nmacc_ps(__m128, __m128, __m128)
    - signature: __m128 _mm_nmacc_ss(__m128, __m128, __m128)
    - signature: __m128 _mm_nmsub_ps(__m128, __m128, __m128)
    - signature: __m128 _mm_nmsub_ss(__m128, __m128, __m128)
    - signature: __m128 _mm_or_ps(__m128, __m128)
    - signature: __m128 _mm_permute2_ps(__m128, __m128, __m128i, int)
    - signature: __m128 _mm_permute_ps(__m128, int)
    - signature: __m128 _mm_permutevar_ps(__m128, __m128i)
    - signature: __m128 _mm_rcp_ps(__m128)
    - signature: __m128 _mm_rcp_ss(__m128)
    - signature: __m128 _mm_round_ps(__m128, const int)
    - signature: __m128 _mm_round_ss(__m128, __m128, const int)
    - signature: __m128 _mm_rsqrt_ps(__m128)
    - signature: __m128 _mm_rsqrt_ss(__m128)
    - signature: __m128 _mm_set_ps1(float)
    - signature: __m128 _mm_set_ps(float, float, float, float)
    - signature: __m128 _mm_setr_ps(float, float, float, float)
    - signature: __m128 _mm_set_ss(float)
    - signature: __m128 _mm_setzero_ps(void)
    - signature: __m128 _mm_shuffle_ps(__m128, __m128, unsigned int)
    - signature: __m128 _mm_sqrt_ps(__m128)
    - signature: __m128 _mm_sqrt_ss(__m128)
    - signature: __m128 _mm_sub_ps(__m128, __m128)
    - signature: __m128 _mm_sub_ss(__m128, __m128)
    - signature: __m128 _mm_unpackhi_ps(__m128, __m128)
    - signature: __m128 _mm_unpacklo_ps(__m128, __m128)
    - signature: __m128 _mm_xor_ps(__m128, __m128)
    - signature: __m256d _mm256_add_pd(__m256d, __m256d)
    - signature: __m256d _mm256_addsub_pd(__m256d, __m256d)
    - signature: __m256d _mm256_andnot_pd(__m256d, __m256d)
    - signature: __m256d _mm256_and_pd(__m256d, __m256d)
    - signature: __m256d _mm256_blend_pd(__m256d, __m256d, const int)
    - signature: __m256d _mm256_blendv_pd(__m256d, __m256d, __m256d)
    - signature: __m256d _mm256_broadcast_pd(__m128d const*)
    - signature: __m256d _mm256_broadcast_sd(double const*)
    - signature: __m256d _mm256_broadcastsd_pd(__m128d)
    - signature: __m256d _mm256_castpd128_pd256(__m128d)
    - signature: __m256d _mm256_castps_pd(__m256)
    - signature: __m256d _mm256_castsi256_pd(__m256i)
    - signature: __m256d _mm256_cmp_pd(__m256d, __m256d, const int)
    - signature: __m256d _mm256_cvtepi32_pd(__m128i)
    - signature: __m256d _mm256_cvtps_pd(__m128)
    - signature: __m256d _mm256_div_pd(__m256d, __m256d)
    - signature: __m256d _mm256_fmadd_pd(__m256d, __m256d, __m256d)
    - signature: __m256d _mm256_fmaddsub_pd(__m256d, __m256d, __m256d)
    - signature: __m256d _mm256_fmsubadd_pd(__m256d, __m256d, __m256d)
    - signature: __m256d _mm256_fmsub_pd(__m256d, __m256d, __m256d)
    - signature: __m256d _mm256_fnmadd_pd(__m256d, __m256d, __m256d)
    - signature: __m256d _mm256_fnmsub_pd(__m256d, __m256d, __m256d)
    - signature: __m256d _mm256_frcz_pd(__m256d)
    - signature: __m256d _mm256_hadd_pd(__m256d, __m256d)
    - signature: __m256d _mm256_hsub_pd(__m256d, __m256d)
    - signature: __m256d _mm256_i32gather_pd(double const *, __m128i, const int)
    - signature: __m256d _mm256_i64gather_pd(double const *, __m256i, const int)
    - signature: __m256d _mm256_insertf128_pd(__m256d, __m128d, int)
    - signature: __m256d _mm256_load_pd(double const *)
    - signature: __m256d _mm256_loadu_pd(double const *)
    - signature: __m256d _mm256_macc_pd(__m256d, __m256d, __m256d)
    - signature: __m256d _mm256_maddsub_pd(__m256d, __m256d, __m256d)
    - signature: __m256d _mm256_mask_i32gather_pd(__m256d, double const *, __m128i, __m256d, const int)
    - signature: __m256d _mm256_mask_i64gather_pd(__m256d, double const *, __m256i, __m256d, const int)
    - signature: __m256d _mm256_maskload_pd(double const *, __m256i)
    - signature: __m256d _mm256_max_pd(__m256d, __m256d)
    - signature: __m256d _mm256_min_pd(__m256d, __m256d)
    - signature: __m256d _mm256_movedup_pd(__m256d)
    - signature: __m256d _mm256_msubadd_pd(__m256d, __m256d, __m256d)
    - signature: __m256d _mm256_msub_pd(__m256d, __m256d, __m256d)
    - signature: __m256d _mm256_mul_pd(__m256d, __m256d)
    - signature: __m256d _mm256_nmacc_pd(__m256d, __m256d, __m256d)
    - signature: __m256d _mm256_nmsub_pd(__m256d, __m256d, __m256d)
    - signature: __m256d _mm256_or_pd(__m256d, __m256d)
    - signature: __m256d _mm256_permute2f128_pd(__m256d, __m256d, int)
    - signature: __m256d _mm256_permute2_pd(__m256d, __m256d, __m256i, int)
    - signature: __m256d _mm256_permute4x64_pd(__m256d, const int)
    - signature: __m256d _mm256_permute_pd(__m256d, int)
    - signature: __m256d _mm256_permutevar_pd(__m256d, __m256i)
    - signature: __m256d _mm256_round_pd(__m256d, int)
    - signature: __m256d _mm256_set1_pd(double)
    - signature: __m256d _mm256_set_pd(double, double, double, double)
    - signature: __m256d _mm256_setr_pd(double, double, double, double)
    - signature: __m256d _mm256_setzero_pd(void)
    - signature: __m256d _mm256_shuffle_pd(__m256d, __m256d, const int)
    - signature: __m256d _mm256_sqrt_pd(__m256d)
    - signature: __m256d _mm256_sub_pd(__m256d, __m256d)
    - signature: __m256d _mm256_unpackhi_pd(__m256d, __m256d)
    - signature: __m256d _mm256_unpacklo_pd(__m256d, __m256d)
    - signature: __m256d _mm256_xor_pd(__m256d, __m256d)
    - signature: __m256d _mm_macc_pd(__m256d, __m256d, __m256d)
    - signature: __m256d _mm_maddsub_pd(__m256d, __m256d, __m256d)
    - signature: __m256d _mm_msubadd_pd(__m256d, __m256d, __m256d)
    - signature: __m256d _mm_msub_pd(__m256d, __m256d, __m256d)
    - signature: __m256d _mm_nmacc_pd(__m256d, __m256d, __m256d)
    - signature: __m256d _mm_nmsub_pd(__m256d, __m256d, __m256d)
    - signature: __m256i _mm256_abs_epi16(__m256i)
    - signature: __m256i _mm256_abs_epi32(__m256i)
    - signature: __m256i _mm256_abs_epi8(__m256i)
    - signature: __m256i _mm256_add_epi16(__m256i, __m256i)
    - signature: __m256i _mm256_add_epi32(__m256i, __m256i)
    - signature: __m256i _mm256_add_epi64(__m256i, __m256i)
    - signature: __m256i _mm256_add_epi8(__m256i, __m256i)
    - signature: __m256i _mm256_adds_epi16(__m256i, __m256i)
    - signature: __m256i _mm256_adds_epi8(__m256i, __m256i)
    - signature: __m256i _mm256_adds_epu16(__m256i, __m256i)
    - signature: __m256i _mm256_adds_epu8(__m256i, __m256i)
    - signature: __m256i _mm256_alignr_epi8(__m256i, __m256i, const int)
    - signature: __m256i _mm256_andnot_si256(__m256i, __m256i)
    - signature: __m256i _mm256_and_si256(__m256i, __m256i)
    - signature: __m256i _mm256_avg_epu16(__m256i, __m256i)
    - signature: __m256i _mm256_avg_epu8(__m256i , __m256i)
    - signature: __m256i _mm256_avg_epu8(__m256i, __m256i)
    - signature: __m256i _mm256_blend_epi16(__m256i, __m256i, const int)
    - signature: __m256i _mm256_blend_epi32(__m256i, __m256i, const int)
    - signature: __m256i _mm256_blendv_epi8(__m256i, __m256i, __m256i)
    - signature: __m256i _mm256_broadcastb_epi8(__m128i)
    - signature: __m256i _mm256_broadcastd_epi32(__m128i)
    - signature: __m256i _mm256_broadcastq_epi64(__m128i)
    - signature: __m256i _mm256_broadcastsi128_si256(__m128i)
    - signature: __m256i _mm256_broadcastw_epi16(__m128i)
    - signature: __m256i _mm256_castpd_si256(__m256d)
    - signature: __m256i _mm256_castps_si256(__m256)
    - signature: __m256i _mm256_castsi128_si256(__m128i)
    - signature: __m256i _mm256_cmov_si256(__m256i, __m256i, __m256i)
    - signature: __m256i _mm256_cmpeq_epi16(__m256i, __m256i)
    - signature: __m256i _mm256_cmpeq_epi32(__m256i, __m256i)
    - signature: __m256i _mm256_cmpeq_epi64(__m256i, __m256i)
    - signature: __m256i _mm256_cmpeq_epi8(__m256i, __m256i)
    - signature: __m256i _mm256_cmpgt_epi16(__m256i, __m256i)
    - signature: __m256i _mm256_cmpgt_epi32(__m256i, __m256i)
    - signature: __m256i _mm256_cmpgt_epi64(__m256i, __m256i)
    - signature: __m256i _mm256_cmpgt_epi8(__m256i, __m256i)
    - signature: __m256i _mm256_cvtepi16_epi32(__m128i)
    - signature: __m256i _mm256_cvtepi16_epi64(__m128i)
    - signature: __m256i _mm256_cvtepi32_epi64(__m128i)
    - signature: __m256i _mm256_cvtepi8_epi16(__m128i)
    - signature: __m256i _mm256_cvtepi8_epi32(__m128i)
    - signature: __m256i _mm256_cvtepi8_epi64(__m128i)
    - signature: __m256i _mm256_cvtepu16_epi32(__m128i)
    - signature: __m256i _mm256_cvtepu16_epi64(__m128i)
    - signature: __m256i _mm256_cvtepu32_epi64(__m128i)
    - signature: __m256i _mm256_cvtepu8_epi16(__m128i)
    - signature: __m256i _mm256_cvtepu8_epi32(__m128i)
    - signature: __m256i _mm256_cvtepu8_epi64(__m128i)
    - signature: __m256i _mm256_cvtps_epi32(__m256)
    - signature: __m256i _mm256_cvttps_epi32(__m256)
    - signature: __m256i _mm256_hadd_epi16(__m256i, __m256i)
    - signature: __m256i _mm256_hadd_epi32(__m256i, __m256i)
    - signature: __m256i _mm256_hadds_epi16(__m256i, __m256i)
    - signature: __m256i _mm256_hsub_epi16(__m256i, __m256i)
    - signature: __m256i _mm256_hsub_epi32(__m256i, __m256i)
    - signature: __m256i _mm256_hsubs_epi16(__m256i, __m256i)
    - signature: __m256i _mm256_i32gather_epi32(int const *, __m256i, const int)
    - signature: __m256i _mm256_i32gather_epi64(__int64 const *, __m128i, const int)
    - signature: __m256i _mm256_i64gather_epi32(int const *, __m256i, const int)
    - signature: __m256i _mm256_i64gather_epi64(__int64 const *, __m256i, const int)
    - signature: __m256i _mm256_insertf128_si256(__m256i, __m128i, int)
    - signature: __m256i _mm256_inserti128_si256(__m256i, __m128i, int)
    - signature: __m256i _mm256_lddqu_si256(__m256i*)
    - signature: __m256i _mm256_load_si256(__m256i*)
    - signature: __m256i _mm256_loadu_si256(__m256i*)
    - signature: __m256i _mm256_madd_epi16(__m256i, __m256i)
    - signature: __m256i _mm256_maddubs_epi16(__m256i, __m256i)
    - signature: __m256i _mm256_mask_i32gather_epi32(__m256i, int const *, __m256i, __m256i, const int)
    - signature: __m256i _mm256_mask_i32gather_epi64(__m256i, __int64 const *, __m128i, __m256i, const int)
    - signature: __m256i _mm256_mask_i64gather_epi64(__m256i, __int64 const *, __m256i, __m256i, const int)
    - signature: __m256i _mm256_maskload_epi32(int const *, __m256i)
    - signature: __m256i _mm256_maskload_epi64(__int64 const *, __m256i)
    - signature: __m256i _mm256_max_epi16(__m256i, __m256i)
    - signature: __m256i _mm256_max_epi32(__m256i, __m256i)
    - signature: __m256i _mm256_max_epi8(__m256i, __m256i)
    - signature: __m256i _mm256_max_epu16(__m256i, __m256i)
    - signature: __m256i _mm256_max_epu32(__m256i, __m256i)
    - signature: __m256i _mm256_max_epu8(__m256i, __m256i)
    - signature: __m256i _mm256_min_epi16(__m256i, __m256i)
    - signature: __m256i _mm256_min_epi32(__m256i, __m256i)
    - signature: __m256i _mm256_min_epi8(__m256i, __m256i)
    - signature: __m256i _mm256_min_epu16(__m256i, __m256i)
    - signature: __m256i _mm256_min_epu32(__m256i, __m256i)
    - signature: __m256i _mm256_min_epu8(__m256i , __m256i)
    - signature: __m256i _mm256_mpsadbw_epu8(__m256i, __m256i, const int)
    - signature: __m256i _mm256_mul_epi32(__m256i, __m256i)
    - signature: __m256i _mm256_mul_epu32(__m256i, __m256i)
    - signature: __m256i _mm256_mulhi_epi16(__m256i, __m256i)
    - signature: __m256i _mm256_mulhi_epu16(__m256i, __m256i)
    - signature: __m256i _mm256_mulhrs_epi16(__m256i, __m256i)
    - signature: __m256i _mm256_mullo_epi16(__m256i, __m256i)
    - signature: __m256i _mm256_mullo_epi32(__m256i, __m256i)
    - signature: __m256i _mm256_or_si256(__m256i, __m256i)
    - signature: __m256i _mm256_packs_epi16(__m256i, __m256i)
    - signature: __m256i _mm256_packs_epi32(__m256i, __m256i)
    - signature: __m256i _mm256_packus_epi16(__m256i, __m256i)
    - signature: __m256i _mm256_packus_epi32(__m256i, __m256i)
    - signature: __m256i _mm256_permute2f128_si256(__m256i, __m256i, int)
    - signature: __m256i _mm256_permute2x128_si256(__m256i, __m256i, const int)
    - signature: __m256i _mm256_permute4x64_epi64(__m256i, const int)
    - signature: __m256i _mm256_permutevar8x32_epi32(__m256i, __m256i)
    - signature: __m256i _mm256_sad_epu8(__m256i, __m256i)
    - signature: __m256i _mm256_set1_epi16(short)
    - signature: __m256i _mm256_set1_epi32(int)
    - signature: __m256i _mm256_set1_epi64x(long long)
    - signature: __m256i _mm256_set1_epi8(char)
    - signature: __m256i _mm256_set_epi16(short)
    - signature: __m256i _mm256_set_epi32(int, int, int, int, int, int, int, int)
    - signature: __m256i _mm256_set_epi64x(long long, long long, long long, long long)
    - signature: __m256i _mm256_set_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char)
    - signature: __m256i _mm256_setr_epi16(short)
    - signature: __m256i _mm256_setr_epi32(int, int, int, int, int, int, int, int)
    - signature: __m256i _mm256_setr_epi64x(long long, long long, long long, long long)
    - signature: __m256i _mm256_setr_epi8(char)
    - signature: __m256i _mm256_setzero_si256(void)
    - signature: __m256i _mm256_shuffle_epi32(__m256i, const int)
    - signature: __m256i _mm256_shuffle_epi8(__m256i, __m256i)
    - signature: __m256i _mm256_shufflehi_epi16(__m256i, const int)
    - signature: __m256i _mm256_shufflelo_epi16(__m256i, const int)
    - signature: __m256i _mm256_sign_epi16(__m256i, __m256i)
    - signature: __m256i _mm256_sign_epi32(__m256i, __m256i)
    - signature: __m256i _mm256_sign_epi8(__m256i, __m256i)
    - signature: __m256i _mm256_sll_epi16(__m256i, __m128i)
    - signature: __m256i _mm256_sll_epi32(__m256i, __m128i)
    - signature: __m256i _mm256_sll_epi64(__m256i, __m128i)
    - signature: __m256i _mm256_slli_epi16(__m256i, int)
    - signature: __m256i _mm256_slli_epi32(__m256i, int)
    - signature: __m256i _mm256_slli_epi64(__m256i, int)
    - signature: __m256i _mm256_slli_si256(__m256i, int)
    - signature: __m256i _mm256_sllv_epi32(__m256i, __m256i)
    - signature: __m256i _mm256_sllv_epi64(__m256i, __m256i)
    - signature: __m256i _mm256_sra_epi16(__m256i, __m128i)
    - signature: __m256i _mm256_sra_epi32(__m256i, __m128i)
    - signature: __m256i _mm256_srai_epi16(__m256i, int)
    - signature: __m256i _mm256_srai_epi32(__m256i, int)
    - signature: __m256i _mm256_srav_epi32(__m256i, __m256i)
    - signature: __m256i _mm256_srl_epi16(__m256i, __m128i)
    - signature: __m256i _mm256_srl_epi32(__m256i, __m128i)
    - signature: __m256i _mm256_srl_epi64(__m256i, __m128i)
    - signature: __m256i _mm256_srli_epi16(__m256i, int)
    - signature: __m256i _mm256_srli_epi32(__m256i, int)
    - signature: __m256i _mm256_srli_epi64(__m256i, int)
    - signature: __m256i _mm256_srli_si256(__m256i, int)
    - signature: __m256i _mm256_srlv_epi32(__m256i, __m256i)
    - signature: __m256i _mm256_srlv_epi64(__m256i, __m256i)
    - signature: __m256i _mm256_stream_load_si256(__m256i const*)
    - signature: __m256i _mm256_sub_epi16(__m256i, __m256i)
    - signature: __m256i _mm256_sub_epi32(__m256i, __m256i)
    - signature: __m256i _mm256_sub_epi64(__m256i, __m256i)
    - signature: __m256i _mm256_sub_epi8(__m256i, __m256i)
    - signature: __m256i _mm256_subs_epi16(__m256i, __m256i)
    - signature: __m256i _mm256_subs_epi8(__m256i, __m256i)
    - signature: __m256i _mm256_subs_epu16(__m256i, __m256i)
    - signature: __m256i _mm256_subs_epu8(__m256i, __m256i)
    - signature: __m256i _mm256_unpackhi_epi16(__m256i, __m256i)
    - signature: __m256i _mm256_unpackhi_epi32(__m256i, __m256i)
    - signature: __m256i _mm256_unpackhi_epi64(__m256i, __m256i)
    - signature: __m256i _mm256_unpackhi_epi8(__m256i, __m256i)
    - signature: __m256i _mm256_unpacklo_epi16(__m256i, __m256i)
    - signature: __m256i _mm256_unpacklo_epi32(__m256i, __m256i)
    - signature: __m256i _mm256_unpacklo_epi64(__m256i, __m256i)
    - signature: __m256i _mm256_unpacklo_epi8(__m256i, __m256i)
    - signature: __m256i _mm256_xor_si256(__m256i, __m256i)
    - signature: __m256 _mm256_add_ps(__m256, __m256)
    - signature: __m256 _mm256_addsub_ps(__m256, __m256)
    - signature: __m256 _mm256_andnot_ps(__m256, __m256)
    - signature: __m256 _mm256_and_ps(__m256, __m256)
    - signature: __m256 _mm256_blend_ps(__m256, __m256, const int)
    - signature: __m256 _mm256_blendv_ps(__m256, __m256, __m256)
    - signature: __m256 _mm256_broadcast_ps(__m128 const*)
    - signature: __m256 _mm256_broadcast_ss(float const*)
    - signature: __m256 _mm256_broadcastss_ps(__m128)
    - signature: __m256 _mm256_castpd_ps(__m256d)
    - signature: __m256 _mm256_castps128_ps256(__m128)
    - signature: __m256 _mm256_castsi256_ps(__m256i)
    - signature: __m256 _mm256_cmp_ps(__m256, __m256, const int)
    - signature: __m256 _mm256_cvtepi32_ps(__m256i)
    - signature: __m256 _mm256_cvtph_ps(__m128i)
    - signature: __m256 _mm256_div_ps(__m256, __m256)
    - signature: __m256 _mm256_dp_ps(__m256, __m256, const int)
    - signature: __m256 _mm256_fmadd_ps(__m256, __m256, __m256)
    - signature: __m256 _mm256_fmaddsub_ps(__m256, __m256, __m256)
    - signature: __m256 _mm256_fmsubadd_ps(__m256, __m256, __m256)
    - signature: __m256 _mm256_fmsub_ps(__m256, __m256, __m256)
    - signature: __m256 _mm256_fnmadd_ps(__m256, __m256, __m256)
    - signature: __m256 _mm256_fnmsub_ps(__m256, __m256, __m256)
    - signature: __m256 _mm256_frcz_ps(__m256)
    - signature: __m256 _mm256_hadd_ps(__m256, __m256)
    - signature: __m256 _mm256_hsub_ps(__m256, __m256)
    - signature: __m256 _mm256_i32gather_ps(float const *, __m256i, const int)
    - signature: __m256 _mm256_insertf128_ps(__m256, __m128, int)
    - signature: __m256 _mm256_load_ps(float const*)
    - signature: __m256 _mm256_loadu_ps(float const*)
    - signature: __m256 _mm256_macc_ps(__m256, __m256, __m256)
    - signature: __m256 _mm256_maddsub_ps(__m256, __m256, __m256)
    - signature: __m256 _mm256_mask_i32gather_ps(__m256, float const *, __m256i, __m256, const int)
    - signature: __m256 _mm256_maskload_ps(float const *, __m256i)
    - signature: __m256 _mm256_max_ps(__m256, __m256)
    - signature: __m256 _mm256_min_ps(__m256, __m256)
    - signature: __m256 _mm256_movehdup_ps(__m256)
    - signature: __m256 _mm256_moveldup_ps(__m256)
    - signature: __m256 _mm256_msubadd_ps(__m256, __m256, __m256)
    - signature: __m256 _mm256_msub_ps(__m256, __m256, __m256)
    - signature: __m256 _mm256_mul_ps(__m256, __m256)
    - signature: __m256 _mm256_nmacc_ps(__m256, __m256, __m256)
    - signature: __m256 _mm256_nmsub_ps(__m256, __m256, __m256)
    - signature: __m256 _mm256_or_ps(__m256, __m256)
    - signature: __m256 _mm256_permute2f128_ps(__m256, __m256, int)
    - signature: __m256 _mm256_permute2_ps(__m256, __m256, __m256i, int)
    - signature: __m256 _mm256_permute_ps(__m256, int)
    - signature: __m256 _mm256_permutevar8x32_ps(__m256, __m256i)
    - signature: __m256 _mm256_permutevar_ps(__m256, __m256i)
    - signature: __m256 _mm256_rcp_ps(__m256)
    - signature: __m256 _mm256_round_ps(__m256, int)
    - signature: __m256 _mm256_rsqrt_ps(__m256)
    - signature: __m256 _mm256_set1_ps(float)
    - signature: __m256 _mm256_set_ps(float, float, float, float, float, float, float, float)
    - signature: __m256 _mm256_setr_ps(float, float, float, float, float, float, float, float)
    - signature: __m256 _mm256_setzero_ps(void)
    - signature: __m256 _mm256_shuffle_ps(__m256, __m256, const int)
    - signature: __m256 _mm256_sqrt_ps(__m256)
    - signature: __m256 _mm256_sub_ps(__m256, __m256)
    - signature: __m256 _mm256_unpackhi_ps(__m256, __m256)
    - signature: __m256 _mm256_unpacklo_ps(__m256, __m256)
    - signature: __m256 _mm256_xor_ps(__m256, __m256)
    - signature: __m256 _mm_macc_ps(__m256, __m256, __m256)
    - signature: __m256 _mm_maddsub_ps(__m256, __m256, __m256)
    - signature: __m256 _mm_msubadd_ps(__m256, __m256, __m256)
    - signature: __m256 _mm_msub_ps(__m256, __m256, __m256)
    - signature: __m256 _mm_nmacc_ps(__m256, __m256, __m256)
    - signature: __m256 _mm_nmsub_ps(__m256, __m256, __m256)
    - signature: __m64 _m_from_float(float)
    - signature: __m64 _m_from_int(int)
    - signature: __m64 _mm_abs_pi16(__m64)
    - signature: __m64 _mm_abs_pi32(__m64)
    - signature: __m64 _mm_abs_pi8(__m64)
    - signature: __m64 _mm_add_si64(__m64, __m64)
    - signature: __m64 _mm_alignr_pi8(__m64, __m64, int)
    - signature: __m64 _mm_cvtpd_pi32(__m128d)
    - signature: __m64 _mm_cvt_ps2pi(__m128)
    - signature: __m64 _mm_cvttpd_pi32(__m128d)
    - signature: __m64 _mm_cvtt_ps2pi(__m128)
    - signature: __m64 _mm_hadd_pi16(__m64, __m64)
    - signature: __m64 _mm_hadd_pi32(__m64, __m64)
    - signature: __m64 _mm_hadds_pi16(__m64, __m64)
    - signature: __m64 _mm_hsub_pi16(__m64, __m64)
    - signature: __m64 _mm_hsub_pi32(__m64, __m64)
    - signature: __m64 _mm_hsubs_pi16(__m64, __m64)
    - signature: __m64 _mm_maddubs_pi16(__m64, __m64)
    - signature: __m64 _mm_movepi64_pi64(__m128i)
    - signature: __m64 _mm_mulhrs_pi16(__m64, __m64)
    - signature: __m64 _mm_mul_su32(__m64, __m64)
    - signature: __m64 _mm_set1_pi16(short)
    - signature: __m64 _mm_set1_pi32(int)
    - signature: __m64 _mm_set1_pi8(char)
    - signature: __m64 _mm_set_pi16(short, short, short, short)
    - signature: __m64 _mm_set_pi32(int, int)
    - signature: __m64 _mm_set_pi8(char, char, char, char, char, char, char, char)
    - signature: __m64 _mm_setr_pi16(short, short, short, short)
    - signature: __m64 _mm_setr_pi32(int, int)
    - signature: __m64 _mm_setr_pi8(char, char, char, char, char, char, char, char)
    - signature: __m64 _mm_setzero_si64(void)
    - signature: __m64 _mm_shuffle_pi8(__m64, __m64)
    - signature: __m64 _mm_sign_pi16(__m64, __m64)
    - signature: __m64 _mm_sign_pi32(__m64, __m64)
    - signature: __m64 _mm_sign_pi8(__m64, __m64)
    - signature: __m64 _mm_sub_si64(__m64, __m64)
    - signature: __m64 _m_packssdw(__m64, __m64)
    - signature: __m64 _m_packsswb(__m64, __m64)
    - signature: __m64 _m_packuswb(__m64, __m64)
    - signature: __m64 _m_paddb(__m64, __m64)
    - signature: __m64 _m_paddd(__m64, __m64)
    - signature: __m64 _m_paddsb(__m64, __m64)
    - signature: __m64 _m_paddsw(__m64, __m64)
    - signature: __m64 _m_paddusb(__m64, __m64)
    - signature: __m64 _m_paddusw(__m64, __m64)
    - signature: __m64 _m_paddw(__m64, __m64)
    - signature: __m64 _m_pand(__m64, __m64)
    - signature: __m64 _m_pandn(__m64, __m64)
    - signature: __m64 _m_pavgb(__m64, __m64)
    - signature: __m64 _m_pavgusb(__m64, __m64)
    - signature: __m64 _m_pavgw(__m64, __m64)
    - signature: __m64 _m_pcmpeqb(__m64, __m64)
    - signature: __m64 _m_pcmpeqd(__m64, __m64)
    - signature: __m64 _m_pcmpeqw(__m64, __m64)
    - signature: __m64 _m_pcmpgtb(__m64, __m64)
    - signature: __m64 _m_pcmpgtd(__m64, __m64)
    - signature: __m64 _m_pcmpgtw(__m64, __m64)
    - signature: __m64 _m_pf2id(__m64)
    - signature: __m64 _m_pf2iw(__m64)
    - signature: __m64 _m_pfacc(__m64, __m64)
    - signature: __m64 _m_pfadd(__m64, __m64)
    - signature: __m64 _m_pfcmpeq(__m64, __m64)
    - signature: __m64 _m_pfcmpge(__m64, __m64)
    - signature: __m64 _m_pfcmpgt(__m64, __m64)
    - signature: __m64 _m_pfmax(__m64, __m64)
    - signature: __m64 _m_pfmin(__m64, __m64)
    - signature: __m64 _m_pfmul(__m64, __m64)
    - signature: __m64 _m_pfnacc(__m64, __m64)
    - signature: __m64 _m_pfpnacc(__m64, __m64)
    - signature: __m64 _m_pfrcpit1(__m64, __m64)
    - signature: __m64 _m_pfrcpit2(__m64, __m64)
    - signature: __m64 _m_pfrcp(__m64)
    - signature: __m64 _m_pfrsqit1(__m64, __m64)
    - signature: __m64 _m_pfrsqrt(__m64)
    - signature: __m64 _m_pfsub(__m64, __m64)
    - signature: __m64 _m_pfsubr(__m64, __m64)
    - signature: __m64 _m_pi2fd(__m64)
    - signature: __m64 _m_pi2fw(__m64)
    - signature: __m64 _m_pinsrw(__m64, int, int)
    - signature: __m64 _m_pmaddwd(__m64, __m64)
    - signature: __m64 _m_pmaxsw(__m64, __m64)
    - signature: __m64 _m_pmaxub(__m64, __m64)
    - signature: __m64 _m_pminsw(__m64, __m64)
    - signature: __m64 _m_pminub(__m64, __m64)
    - signature: __m64 _m_pmulhrw(__m64, __m64)
    - signature: __m64 _m_pmulhuw(__m64, __m64)
    - signature: __m64 _m_pmulhw(__m64, __m64)
    - signature: __m64 _m_pmullw(__m64, __m64)
    - signature: __m64 _m_por(__m64, __m64)
    - signature: __m64 _m_psadbw(__m64, __m64)
    - signature: __m64 _m_pshufw(__m64, int)
    - signature: __m64 _m_pslldi(__m64, int)
    - signature: __m64 _m_pslld(__m64, __m64)
    - signature: __m64 _m_psllqi(__m64, int)
    - signature: __m64 _m_psllq(__m64, __m64)
    - signature: __m64 _m_psllwi(__m64, int)
    - signature: __m64 _m_psllw(__m64, __m64)
    - signature: __m64 _m_psradi(__m64, int)
    - signature: __m64 _m_psrad(__m64, __m64)
    - signature: __m64 _m_psrawi(__m64, int)
    - signature: __m64 _m_psraw(__m64, __m64)
    - signature: __m64 _m_psrldi(__m64, int)
    - signature: __m64 _m_psrld(__m64, __m64)
    - signature: __m64 _m_psrlqi(__m64, int)
    - signature: __m64 _m_psrlq(__m64, __m64)
    - signature: m64 _m_psrlwi(__m64, int)
    - signature: __m64 _m_psrlw(__m64, __m64)
    - signature: __m64 _m_psubb(__m64, __m64)
    - signature: __m64 _m_psubd(__m64, __m64)
    - signature: __m64 _m_psubsb(__m64, __m64)
    - signature: __m64 _m_psubsw(__m64, __m64)
    - signature: __m64 _m_psubusb(__m64, __m64)
    - signature: __m64 _m_psubusw(__m64, __m64)
    - signature: __m64 _m_psubw(__m64, __m64)
    - signature: __m64 _m_pswapd(__m64)
    - signature: __m64 _m_punpckhbw(__m64, __m64)
    - signature: __m64 _m_punpckhdq(__m64, __m64)
    - signature: __m64 _m_punpckhwd(__m64, __m64)
    - signature: __m64 _m_punpcklbw(__m64, __m64)
    - signature: __m64 _m_punpckldq(__m64, __m64)
    - signature: __m64 _m_punpcklwd(__m64, __m64)
    - signature: __m64 _m_pxor(__m64, __m64)
    - signature: short _InterlockedAnd16_np(short *, short)
    - signature: short _InterlockedAnd16(short volatile *, short)
    - signature: short _InterlockedCompareExchange16_np(short volatile *, short, short)
    - signature: short _InterlockedCompareExchange16(short volatile *, short, short)
    - signature: short _InterlockedDecrement16(short volatile *)
    - signature: short _InterlockedExchange16(short volatile *, short)
    - signature: short _InterlockedExchangeAdd16(short volatile *, short)
    - signature: short _InterlockedIncrement16(short volatile *)
    - signature: short _InterlockedOr16_np(short *, short)
    - signature: short _InterlockedOr16(short volatile *, short)
    - signature: short _InterlockedXor16_np(short *, short)
    - signature: short _InterlockedXor16(short volatile *, short)
    - signature: short _loadbe_i16(void const *)
    - signature: unsigned char _addcarry_u16(unsigned char, unsigned short, unsigned short, unsigned short *)
    - signature: unsigned char _addcarry_u32(unsigned char, unsigned int, unsigned int, unsigned int *)
    - signature: unsigned char _addcarry_u64(unsigned char, unsigned __int64, unsigned __int64, unsigned __int64 *)
    - signature: unsigned char _addcarry_u8(unsigned char, unsigned char, unsigned char, unsigned char *)
    - signature: unsigned char _addcarryx_u32(unsigned char, unsigned int, unsigned int, unsigned int *)
    - signature: unsigned char _addcarryx_u64(unsigned char, unsigned __int64, unsigned __int64, unsigned __int64 *)
    - signature: unsigned char _BitScanForward(unsigned long *, unsigned long)
    - signature: unsigned char _BitScanForward64(unsigned long *, unsigned __int64)
    - signature: unsigned char _BitScanReverse(unsigned long *, unsigned long)
    - signature: unsigned char _BitScanReverse64(unsigned long *, unsigned __int64)
    - signature: unsigned char _bittest(long const *, long)
    - signature: unsigned char _bittest64(__int64 const *, __int64)
    - signature: unsigned char _bittestandcomplement(long *, long)
    - signature: unsigned char _bittestandcomplement64(__int64 *, __int64)
    - signature: unsigned char _bittestandreset(long *, long)
    - signature: unsigned char _bittestandreset64(__int64 *, __int64)
    - signature: unsigned char _bittestandset64(__int64 *, __int64)
    - signature: unsigned char _bittestandset(long *, long)
    - signature: unsigned char __builtin_ia32_lwpins16(unsigned short, unsigned int, unsigned short)
    - signature: unsigned char __builtin_ia32_lwpins32(unsigned int, unsigned int, unsigned int)
    - signature: unsigned char __builtin_ia32_lwpins64(unsigned __int64, unsigned int, unsigned int)
    - signature: unsigned char __inbyte(unsigned short)
    - signature: unsigned char _interlockedbittestandreset64_HLEAcquire(__int64 *, __int64)
    - signature: unsigned char _interlockedbittestandreset64_HLERelease(__int64 *, __int64)
    - signature: unsigned char _interlockedbittestandreset64(__int64 *, __int64)
    - signature: unsigned char _interlockedbittestandreset_HLEAcquire(long *, long)
    - signature: unsigned char _interlockedbittestandreset_HLERelease(long *, long)
    - signature: unsigned char _interlockedbittestandreset(long *, long)
    - signature: unsigned char _interlockedbittestandset64_HLEAcquire(__int64 *, __int64)
    - signature: unsigned char _interlockedbittestandset64_HLERelease(__int64 *, __int64)
    - signature: unsigned char _interlockedbittestandset64(__int64 *, __int64)
    - signature: unsigned char _interlockedbittestandset_HLEAcquire(long *, long)
    - signature: unsigned char _interlockedbittestandset_HLERelease(long *, long)
    - signature: unsigned char _interlockedbittestandset(long *, long)
    - signature: unsigned char _InterlockedCompareExchange128(__int64 volatile *, __int64, __int64, __int64 *)
    - signature: unsigned char __lwpins32(unsigned int, unsigned int, unsigned int)
    - signature: unsigned char __lwpins64(unsigned __int64, unsigned int, unsigned int)
    - signature: unsigned char __readfsbyte(unsigned long)
    - signature: unsigned char __readgsbyte(unsigned long)
    - signature: unsigned char _rotl8(unsigned char, unsigned char)
    - signature: unsigned char _rotr8(unsigned char, unsigned char)
    - signature: unsigned char _subborrow_u16(unsigned char, unsigned short, unsigned short, unsigned short *)
    - signature: unsigned char _subborrow_u32(unsigned char, unsigned int, unsigned int, unsigned int *)
    - signature: unsigned char _subborrow_u64(unsigned char, unsigned __int64, unsigned __int64, unsigned __int64 *)
    - signature: unsigned char _subborrow_u8(unsigned char, unsigned char, unsigned char, unsigned char *)
    - signature: unsigned char __vmx_on(unsigned __int64 *)
    - signature: unsigned char __vmx_vmclear(unsigned __int64 *)
    - signature: unsigned char __vmx_vmlaunch(void)
    - signature: unsigned char __vmx_vmptrld(unsigned __int64 *)
    - signature: unsigned char __vmx_vmread(size_t, size_t *)
    - signature: unsigned char __vmx_vmresume(void)
    - signature: unsigned char __vmx_vmwrite(size_t, size_t)
    - signature: unsigned __int64 _andn_u64(unsigned __int64, unsigned __int64)
    - signature: unsigned __int64 _bextri_u64(unsigned __int64, unsigned int)
    - signature: unsigned __int64 _bextr_u64(unsigned __int64, unsigned int, unsigned int)
    - signature: unsigned __int64 _blcfill_u64(unsigned __int64)
    - signature: unsigned __int64 _blcic_u64(unsigned __int64)
    - signature: unsigned __int64 _blci_u64(unsigned __int64)
    - signature: unsigned __int64 _blcmsk_u64(unsigned __int64)
    - signature: unsigned __int64 _blcs_u64(unsigned __int64)
    - signature: unsigned __int64 _blsfill_u64(unsigned __int64)
    - signature: unsigned __int64 _blsic_u64(unsigned __int64)
    - signature: unsigned __int64 _blsi_u64(unsigned __int64)
    - signature: unsigned __int64 _blsmsk_u64(unsigned __int64)
    - signature: unsigned __int64 _blsr_u64(unsigned __int64)
    - signature: unsigned __int64 _bzhi_u64(unsigned __int64, unsigned int)
    - signature: unsigned __int64 _load_be_u64(void const *)
    - signature: unsigned __int64 __lzcnt64(unsigned __int64)
    - signature: unsigned __int64 _lzcnt_u64(unsigned __int64)
    - signature: unsigned __int64 _mm_crc32_u64(unsigned __int64, unsigned __int64)
    - signature: unsigned __int64 _mulx_u64(unsigned __int64, unsigned __int64, unsigned __int64*)
    - signature: unsigned __int64 __emulu(unsigned int, unsigned int)
    - signature: unsigned __int64 __ll_lshift(unsigned __int64, int)
    - signature: unsigned __int64 __ull_rshift(unsigned __int64, int)
    - signature: unsigned __int64 _pdep_u64(unsigned __int64, unsigned __int64)
    - signature: unsigned __int64 _pext_u64(unsigned __int64, unsigned __int64)
    - signature: unsigned __int64 __popcnt64(unsigned __int64)
    - signature: unsigned __int64 __rdtscp(unsigned int *)
    - signature: unsigned __int64 __rdtsc(void)
    - signature: unsigned __int64 __readcr0(void)
    - signature: unsigned __int64 __readcr2(void)
    - signature: unsigned __int64 __readcr3(void)
    - signature: unsigned __int64 __readcr4(void)
    - signature: unsigned __int64 __readcr8(void)
    - signature: unsigned __int64 __readdr(unsigned)
    - signature: unsigned __int64 __readeflags(void)
    - signature: unsigned __int64 _readfsbase_u64(void)
    - signature: unsigned __int64 _readgsbase_u64(void)
    - signature: unsigned __int64 __readgsqword(unsigned long)
    - signature: unsigned __int64 __readmsr(unsigned long)
    - signature: unsigned __int64 __readpmc(unsigned long)
    - signature: unsigned __int64 _rorx_u64(unsigned __int64, const unsigned int)
    - signature: unsigned __int64 __shiftleft128(unsigned __int64, unsigned __int64, unsigned char)
    - signature: unsigned __int64 __shiftright128(unsigned __int64, unsigned __int64, unsigned char)
    - signature: unsigned __int64 _shlx_u64(unsigned __int64, unsigned int)
    - signature: unsigned __int64 _shrx_u64(unsigned __int64, unsigned int)
    - signature: unsigned __int64 _t1mskc_u64(unsigned __int64)
    - signature: unsigned __int64 _tzcnt_u64(unsigned __int64)
    - signature: unsigned __int64 _tzmsk_u64(unsigned __int64)
    - signature: unsigned __int64 _udiv128(unsigned __int64, unsigned __int64, unsigned __int64, unsigned __int64 *)
    - signature: unsigned __int64 _umul128(unsigned __int64, unsigned __int64, unsigned __int64 *)
    - signature: unsigned __int64 __umulh(unsigned __int64, unsigned __int64)
    - signature: unsigned __int64 _xgetbv(unsigned int)
    - signature: unsigned int _andn_u32(unsigned int, unsigned int)
    - signature: unsigned int _bextri_u32(unsigned int, unsigned int)
    - signature: unsigned int _bextr_u32(unsigned int, unsigned int, unsigned int)
    - signature: unsigned int _blcfill_u32(unsigned int)
    - signature: unsigned int _blcic_u32(unsigned int)
    - signature: unsigned int _blci_u32(unsigned int)
    - signature: unsigned int _blcmsk_u32(unsigned int)
    - signature: unsigned int _blcs_u32(unsigned int)
    - signature: unsigned int _blsfill_u32(unsigned int)
    - signature: unsigned int _blsic_u32(unsigned int)
    - signature: unsigned int _blsi_u32(unsigned int)
    - signature: unsigned int _blsmsk_u32(unsigned int)
    - signature: unsigned int _blsr_u32(unsigned int)
    - signature: unsigned int __builtin_ia32_bextri_u32(unsigned int, const unsigned int)
    - signature: unsigned int __builtin_ia32_bextr_u32(unsigned int, unsigned int)
    - signature: unsigned int __builtin_ia32_crc32hi(unsigned int, unsigned short)
    - signature: unsigned int __builtin_ia32_crc32qi(unsigned int, unsigned char)
    - signature: unsigned int __builtin_ia32_crc32si(unsigned int, unsigned int)
    - signature: unsigned int __builtin_ia32_lzcnt_u32(unsigned int);
    - signature: unsigned int __builtin_ia32_rdfsbase32(void)
    - signature: unsigned int __builtin_ia32_rdgsbase32(void)
    - signature: unsigned int __builtin_ia32_rdrand16_step(unsigned short *)
    - signature: unsigned int __builtin_ia32_rdrand32_step(unsigned int *)
    - signature: unsigned int __builtin_ia32_rdrand64_step(unsigned long long *)
    - signature: unsigned int _bzhi_u32(unsigned int, unsigned int)
    - signature: unsigned int __getcallerseflags()
    - signature: unsigned int _load_be_u32(void const *)
    - signature: unsigned int _lzcnt_u32(unsigned int)
    - signature: unsigned int __lzcnt(unsigned int)
    - signature: unsigned int _mm_crc32_u16(unsigned int, unsigned short)
    - signature: unsigned int _mm_crc32_u32(unsigned int, unsigned int)
    - signature: unsigned int _mm_crc32_u8(unsigned int, unsigned char)
    - signature: unsigned int _mm_getcsr(void)
    - signature: unsigned int _mulx_u32(unsigned int, unsigned int, unsigned int *)
    - signature: unsigned int _pdep_u32(unsigned int, unsigned int)
    - signature: unsigned int _pext_u32(unsigned int, unsigned int)
    - signature: unsigned int __popcnt(unsigned int)
    - signature: unsigned int _readfsbase_u32(void)
    - signature: unsigned int _readgsbase_u32(void)
    - signature: unsigned int _rorx_u32(unsigned int, const unsigned int)
    - signature: unsigned int _shlx_u32(unsigned int, unsigned int)
    - signature: unsigned int _shrx_u32(unsigned int, unsigned int)
    - signature: unsigned int _t1mskc_u32(unsigned int)
    - signature: unsigned int _tzcnt_u32(unsigned int)
    - signature: unsigned int _tzmsk_u32(unsigned int)
    - signature: unsigned int _udiv64(unsigned __int64, unsigned int, unsigned int *)
    - signature: unsigned long __indword(unsigned short)
    - signature: unsigned long long __builtin_ia32_bextri_u64(unsigned long long, const unsigned long long);
    - signature: unsigned long long __builtin_ia32_bextr_u64(unsigned long long, unsigned long long);
    - signature: unsigned long long __builtin_ia32_crc32di(unsigned long long, unsigned long long)
    - signature: unsigned long long __builtin_ia32_lzcnt_u64(unsigned long long);
    - signature: unsigned long long __builtin_ia32_rdfsbase64(void)
    - signature: unsigned long long __builtin_ia32_rdgsbase64(void)
    - signature: unsigned long long _bzhi_u64(unsigned long long, unsigned long long)
    - signature: unsigned long long _pdep_u64(unsigned long long, unsigned long long)
    - signature: unsigned long long _pext_u64(unsigned long long, unsigned long long)
    - signature: unsigned long __readcr0(void)
    - signature: unsigned long __readcr2(void)
    - signature: unsigned long __readcr3(void)
    - signature: unsigned long __readcr4(void)
    - signature: unsigned long __readcr8(void)
    - signature: unsigned long __readfsdword(unsigned long)
    - signature: unsigned long __readgsdword(unsigned long)
    - signature: unsigned long __segmentlimit(unsigned long)
    - signature: unsigned __readdr(unsigned)
    - signature: unsigned __readeflags(void)
    - signature: unsigned short __builtin_ia32_lzcnt_16(unsigned short);
    - signature: unsigned short __inword(unsigned short)
    - signature: unsigned short _load_be_u16(void const *)
    - signature: unsigned short __lzcnt16(unsigned short)
    - signature: unsigned short __popcnt16(unsigned short)
    - signature: unsigned short __readfsword(unsigned long)
    - signature: unsigned short __readgsword(unsigned long)
    - signature: unsigned short _rotl16(unsigned short, unsigned char)
    - signature: unsigned short _rotr16(unsigned short, unsigned char)
    - signature: v16hi __builtin_ia32_pabsw256(v16hi)
    - signature: v16hi __builtin_ia32_packssdw256(v8si, v8si)
    - signature: v16hi __builtin_ia32_packusdw256(v8si, v8si)
    - signature: v16hi __builtin_ia32_paddsw256(v16hi, v16hi)
    - signature: v16hi __builtin_ia32_paddusw256(v16hi, v16hi)
    - signature: v16hi __builtin_ia32_paddw256(v16hi, v16hi)
    - signature: v16hi __builtin_ia32_pavgw256(v16hi, v16hi)
    - signature: v16hi __builtin_ia32_pblendw256(v16hi, v16hi, int)
    - signature: v16hi __builtin_ia32_pbroadcastw256(v8hi)
    - signature: v16hi __builtin_ia32_pcmpeqw256(v16hi, v16hi)
    - signature: v16hi __builtin_ia32_pcmpgtw256(16hi, v16hi)
    - signature: v16hi __builtin_ia32_phaddsw256(v16hi, v16hi)
    - signature: v16hi __builtin_ia32_phaddw256(v16hi, v16hi)
    - signature: v16hi __builtin_ia32_phsubsw256(v16hi, v16hi)
    - signature: v16hi __builtin_ia32_phsubw256(v16hi, v16hi)
    - signature: v16hi __builtin_ia32_pmaddwd256(v16hi, v16hi)
    - signature: v16hi __builtin_ia32_pmaxsw256(v16hi, v16hi)
    - signature: v16hi __builtin_ia32_pmaxuw256(v16hi, v16hi)
    - signature: v16hi __builtin_ia32_pminsw256(v16hi, v16hi)
    - signature: v16hi __builtin_ia32_pminuw256(v16hi, v16hi)
    - signature: v16hi __builtin_ia32_pmovsxbw256 (v16qi)
    - signature: v16hi __builtin_ia32_pmovzxbw256(v16qi)
    - signature: v16hi __builtin_ia32_pmulhrsw256(v16hi, v16hi)
    - signature: v16hi __builtin_ia32_pmulhuw256(v16hi, v16hi)
    - signature: v16hi __builtin_ia32_pmulhw256(v16hi, v16hi)
    - signature: v16hi __builtin_ia32_pmullw256(v16hi, v16hi)
    - signature: v16hi __builtin_ia32_psadbw256(v32qi, v32qi)
    - signature: v16hi __builtin_ia32_pshufhw256(v16hi, int)
    - signature: v16hi __builtin_ia32_pshuflw256(v16hi, int)
    - signature: v16hi __builtin_ia32_psignw256(v16hi, v16hi)
    - signature: v16hi __builtin_ia32_psllw256(v16hi, v8hi)
    - signature: v16hi __builtin_ia32_psllwi256(16hi, int)
    - signature: v16hi __builtin_ia32_psraw256(v16hi, v8hi)
    - signature: v16hi __builtin_ia32_psrawi256(v16hi, int)
    - signature: v16hi __builtin_ia32_psrlw256(v16hi, v8hi)
    - signature: v16hi __builtin_ia32_psrlwi256(v16hi, int)
    - signature: v16hi __builtin_ia32_psubsw256(v16hi, v16hi)
    - signature: v16hi __builtin_ia32_psubusw256(v16hi, v16hi)
    - signature: v16hi __builtin_ia32_punpckhwd256(v16hi, v16hi)
    - signature: v16hi __builtin_ia32_punpcklwd256(v16hi, v16hi)
    - signature: v16hi __builtin_ia32_vpcmov_v16hi256(v16hi, v16hi, v16hi)
    - signature: v16qi __builtin_ia32_lddqu(char const *)
    - signature: v16qi __builtin_ia32_loaddqu(const char *)
    - signature: v16qi __builtin_ia32_mpsadbw128(v16qi, v16qi, const int)
    - signature: v16qi __builtin_ia32_pabsb128(v16qi)
    - signature: v16qi __builtin_ia32_packsswb128(v8hi, v8hi)
    - signature: v16qi __builtin_ia32_packuswb128(v8hi, v8hi)
    - signature: v16qi __builtin_ia32_paddb128(v16qi, v16qi)
    - signature: v16qi __builtin_ia32_pavgb128(v16qi, v16qi)
    - signature: v16qi __builtin_ia32_pblendvb128(v16qi, v16qi, v16qi)
    - signature: v16qi __builtin_ia32_pbroadcastb128(v16qi)
    - signature: v16qi __builtin_ia32_pcmpeqb128(v16qi, v16qi)
    - signature: v16qi __builtin_ia32_pcmpestrm128(v16qi, int, v16qi, int, const int)
    - signature: v16qi __builtin_ia32_pcmpgtb128(v16qi, v16qi)
    - signature: v16qi __builtin_ia32_pcmpistrm128(v16qi, v16qi, const int)
    - signature: v16qi __builtin_ia32_pmaxsb128(v16qi, v16qi)
    - signature: v16qi __builtin_ia32_pmaxub128(v16qi, v16qi)
    - signature: v16qi __builtin_ia32_pminsb128(v16qi, v16qi)
    - signature: v16qi __builtin_ia32_pminub128(v16qi, v16qi)
    - signature: v16qi __builtin_ia32_pshufb128(v16qi, v16qi)
    - signature: v16qi __builtin_ia32_psignb128(v16qi, v16qi)
    - signature: v16qi __builtin_ia32_psubb128(v16qi, v16qi)
    - signature: v16qi __builtin_ia32_punpckhbw128(v16qi, v16qi)
    - signature: v16qi __builtin_ia32_punpcklbw128(v16qi, v16qi)
    - signature: v16qi __builtin_ia32_vec_set_v16qi(v16qi, int, const int)
    - signature: v16qi __builtin_ia32_vpcmov_v16qi(v16qi, v16qi, v16qi)
    - signature: v16qi __builtin_ia32_vpcomeqb(v16qi, v16qi)
    - signature: v16qi __builtin_ia32_vpcomequb(v16qi, v16qi)
    - signature: v16qi __builtin_ia32_vpcomfalseb(v16qi, v16qi)
    - signature: v16qi __builtin_ia32_vpcomfalseub(v16qi, v16qi)
    - signature: v16qi __builtin_ia32_vpcomgeb(v16qi, v16qi)
    - signature: v16qi __builtin_ia32_vpcomgeub(v16qi, v16qi)
    - signature: v16qi __builtin_ia32_vpcomgtb(v16qi, v16qi)
    - signature: v16qi __builtin_ia32_vpcomgtub(v16qi, v16qi)
    - signature: v16qi __builtin_ia32_vpcomleb(v16qi, v16qi)
    - signature: v16qi __builtin_ia32_vpcomleub(v16qi, v16qi)
    - signature: v16qi __builtin_ia32_vpcomltb(v16qi, v16qi)
    - signature: v16qi __builtin_ia32_vpcomltub(v16qi, v16qi)
    - signature: v16qi __builtin_ia32_vpcomneb(v16qi, v16qi)
    - signature: v16qi __builtin_ia32_vpcomneub(v16qi, v16qi)
    - signature: v16qi __builtin_ia32_vpcomtrueb(v16qi, v16qi)
    - signature: v16qi __builtin_ia32_vpcomtrueub(v16qi, v16qi)
    - signature: v16qi __builtin_ia32_vpperm(v16qi, v16qi, v16qi)
    - signature: v16qi __builtin_ia32_vprotb(v16qi, v16qi)
    - signature: v16qi __builtin_ia32_vpshab(v16qi, v16qi)
    - signature: v16qi __builtin_ia32_vpshlb(v16qi, v16qi)
    - signature: v1di __builtin_ia32_palignr(v1di, v1di, int)
    - signature: v1di __builtin_ia32_pmuludq(v2si, v2si)
    - signature: v1di __builtin_ia32_psadbw(v8qi, v8qi)
    - signature: v1di __builtin_ia32_psllqi(v1di, int)
    - signature: v1di __builtin_ia32_psllq(v1di, v1di)
    - signature: v1di __builtin_ia32_psrlqi(v1di, int)
    - signature: v1di __builtin_ia32_psrlq(v1di, v1di)
    - signature: v2df __builtin_ia32_addpd(v2df, v2df)
    - signature: v2df __builtin_ia32_addsd(v2df, v2df)
    - signature: v2df __builtin_ia32_addsubpd(v2df, v2df)
    - signature: v2df __builtin_ia32_andnpd(v2df, v2df)
    - signature: v2df __builtin_ia32_andpd(v2df, v2df)
    - signature: v2df __builtin_ia32_blendpd(v2df, v2df, const int)
    - signature: v2df __builtin_ia32_blendvpd(v2df, v2df, v2df)
    - signature: v2df __builtin_ia32_cmpeqpd(v2df, v2df)
    - signature: v2df __builtin_ia32_cmpeqsd(v2df, v2df)
    - signature: v2df __builtin_ia32_cmpgepd(v2df, v2df)
    - signature: v2df __builtin_ia32_cmpgtpd(v2df, v2df)
    - signature: v2df __builtin_ia32_cmplepd(v2df, v2df)
    - signature: v2df __builtin_ia32_cmplesd(v2df, v2df)
    - signature: v2df __builtin_ia32_cmpltpd(v2df, v2df)
    - signature: v2df __builtin_ia32_cmpltsd(v2df, v2df)
    - signature: v2df __builtin_ia32_cmpneqpd(v2df, v2df)
    - signature: v2df __builtin_ia32_cmpneqsd(v2df, v2df)
    - signature: v2df __builtin_ia32_cmpngepd(v2df, v2df)
    - signature: v2df __builtin_ia32_cmpngtpd(v2df, v2df)
    - signature: v2df __builtin_ia32_cmpnlepd(v2df, v2df)
    - signature: v2df __builtin_ia32_cmpnlesd(v2df, v2df)
    - signature: v2df __builtin_ia32_cmpnltpd(v2df, v2df)
    - signature: v2df __builtin_ia32_cmpnltsd(v2df, v2df)
    - signature: v2df __builtin_ia32_cmpordpd(v2df, v2df)
    - signature: v2df __builtin_ia32_cmpordsd(v2df, v2df)
    - signature: v2df __builtin_ia32_cmppd(v2df, v2df, int)
    - signature: v2df __builtin_ia32_cmpsd(v2df, v2df, int)
    - signature: v2df __builtin_ia32_cmpunordpd(v2df, v2df)
    - signature: v2df __builtin_ia32_cmpunordsd(v2df, v2df)
    - signature: v2df __builtin_ia32_cvtdq2pd(v4si)
    - signature: v2df __builtin_ia32_cvtpi2pd(v2si)
    - signature: v2df __builtin_ia32_cvtps2pd(v4sf)
    - signature: v2df __builtin_ia32_cvtsi2sd(v2df, int)
    - signature: v2df __builtin_ia32_cvtsi642sd(v2df, long long)
    - signature: v2df __builtin_ia32_cvtss2sd(v2df, v4sf)
    - signature: v2df __builtin_ia32_divpd(v2df, v2df)
    - signature: v2df __builtin_ia32_divsd(v2df, v2df)
    - signature: v2df __builtin_ia32_dppd(v2df, v2df, const int)
    - signature: v2df __builtin_ia32_fmaddpd(v2df, v2df, v2df)
    - signature: v2df __builtin_ia32_fmaddsd(v2df, v2df, v2df)
    - signature: v2df __builtin_ia32_fmaddsubpd(v2df, v2df, v2df)
    - signature: v2df __builtin_ia32_fmsubaddpd(v2df, v2df, v2df)
    - signature: v2df __builtin_ia32_fmsubpd(v2df, v2df, v2df)
    - signature: v2df __builtin_ia32_fmsubsd(v2df, v2df, v2df)
    - signature: v2df __builtin_ia32_fnmaddpd(v2df, v2df, v2df)
    - signature: v2df __builtin_ia32_fnmaddsd(v2df, v2df, v2df)
    - signature: v2df __builtin_ia32_fnmsubpd(v2df, v2df, v2df)
    - signature: v2df __builtin_ia32_fnmsubsd(v2df, v2df, v2df)
    - signature: v2df __builtin_ia32_gatherdiv2df(v2df, pcdouble, v2di, v2df, int)
    - signature: v2df __builtin_ia32_gathersiv2df(v2df, pcdouble, v4si, v2df, int)
    - signature: v2df __builtin_ia32_haddpd(v2df, v2df)
    - signature: v2df __builtin_ia32_hsubpd(v2df, v2df)
    - signature: v2df __builtin_ia32_loadddup(double const *)
    - signature: v2df __builtin_ia32_loadhpd(v2df, double const *)
    - signature: v2df __builtin_ia32_loadlpd(v2df, double const *)
    - signature: v2df __builtin_ia32_loadupd(double *)
    - signature: v2df __builtin_ia32_maskloadpd(pcv2df, v2df)
    - signature: v2df __builtin_ia32_maxpd(v2df, v2df)
    - signature: v2df __builtin_ia32_maxsd(v2df, v2df)
    - signature: v2df __builtin_ia32_minpd(v2df, v2df)
    - signature: v2df __builtin_ia32_minsd(v2df, v2df)
    - signature: v2df __builtin_ia32_movddup(v2df)
    - signature: v2df __builtin_ia32_movsd(v2df, v2df)
    - signature: v2df __builtin_ia32_mulpd(v2df, v2df)
    - signature: v2df __builtin_ia32_mulsd(v2df, v2df)
    - signature: v2df __builtin_ia32_orpd(v2df, v2df)
    - signature: v2df __builtin_ia32_pd_pd256(v4df)
    - signature: v2df __builtin_ia32_roundpd(v2df, const int)
    - signature: v2df __builtin_ia32_roundsd(v2df, v2df, const int)
    - signature: v2df __builtin_ia32_shufpd(v2df, v2df, int)
    - signature: v2df __builtin_ia32_sqrtpd(v2df)
    - signature: v2df __builtin_ia32_sqrtsd(v2df)
    - signature: v2df __builtin_ia32_subpd(v2df, v2df)
    - signature: v2df __builtin_ia32_subsd(v2df, v2df)
    - signature: v2df __builtin_ia32_unpckhpd(v2df, v2df)
    - signature: v2df __builtin_ia32_unpcklpd(v2df, v2df)
    - signature: v2df __builtin_ia32_vextractf128_pd256(v4df, int)
    - signature: v2df __builtin_ia32_vfrczpd(v2df)
    - signature: v2df __builtin_ia32_vfrczsd(v2df)
    - signature: v2df __builtin_ia32_vpcmov_v2df(v2df, v2df, v2df)
    - signature: v2df __builtin_ia32_vpermil2pd(v2df, v2df, v2di, int)
    - signature: v2df __builtin_ia32_vpermilpd(v2df, int)
    - signature: v2df __builtin_ia32_vpermilvarpd(v2df, v2di)
    - signature: v2df __builtin_ia32_xorpd(v2df, v2df)
    - signature: v2di __builtin_ia32_aesdec128(v2di, v2di)
    - signature: v2di __builtin_ia32_aesdeclast128(v2di, v2di)
    - signature: v2di __builtin_ia32_aesenc128(v2di, v2di)
    - signature: v2di __builtin_ia32_aesenclast128(v2di, v2di)
    - signature: v2di __builtin_ia32_aesimc128(v2di)
    - signature: v2di __builtin_ia32_aeskeygenassist128(v2di, const int)
    - signature: v2di __builtin_ia32_extrqi(v2di, const unsigned int, const unsigned int)
    - signature: v2di __builtin_ia32_extrq(v2di, v16qi)
    - signature: v2di __builtin_ia32_gatherdiv2di(v2di, pcint64, v2di, v2di, int)
    - signature: v2di __builtin_ia32_gathersiv2di(v2di, pcint64, v4si, v2di, int)
    - signature: v2di __builtin_ia32_insertqi(v2di, v2di, const unsigned int, const unsigned int)
    - signature: v2di __builtin_ia32_insertq(v2di, v2di)
    - signature: v2di __builtin_ia32_maskloadq(pcv2di, v2di)
    - signature: v2di __builtin_ia32_movntdqa(v2di *);
    - signature: v2di __builtin_ia32_movq128(v2di)
    - signature: v2di __builtin_ia32_paddq128(v2di, v2di)
    - signature: v2di __builtin_ia32_paddq(v2di, v2di)
    - signature: v2di __builtin_ia32_palignr128(v2di, v2di, int)
    - signature: v2di __builtin_ia32_pand128(v2di, v2di)
    - signature: v2di __builtin_ia32_pandn128(v2di, v2di)
    - signature: v2di __builtin_ia32_pbroadcastq128(v2di)
    - signature: v2di __builtin_ia32_pclmulqdq128(v2di, v2di, const int)
    - signature: v2di __builtin_ia32_pcmpeqq(v2di, v2di)
    - signature: v2di __builtin_ia32_pcmpgtq(v2di, v2di)
    - signature: v2di __builtin_ia32_pmovsxbq128(v16qi)
    - signature: v2di __builtin_ia32_pmovsxdq128(v4si)
    - signature: v2di __builtin_ia32_pmovsxwq128(v8hi)
    - signature: v2di __builtin_ia32_pmovzxbq128(v16qi)
    - signature: v2di __builtin_ia32_pmovzxdq128(v4si)
    - signature: v2di __builtin_ia32_pmovzxwq128(v8hi)
    - signature: v2di __builtin_ia32_pmuldq128(v4si, v4si)
    - signature: v2di __builtin_ia32_pmuludq128(v4si, v4si)
    - signature: v2di __builtin_ia32_por128(v2di, v2di)
    - signature: v2di __builtin_ia32_psadbw128(v16qi, v16qi)
    - signature: v2di __builtin_ia32_pslldqi128(v2di, int)
    - signature: v2di __builtin_ia32_psllq128(v2di, v2di)
    - signature: v2di __builtin_ia32_psllqi128(v2di, int)
    - signature: v2di __builtin_ia32_psllv2di(v2di, v2di)
    - signature: v2di __builtin_ia32_psrldqi128(v2di, int)
    - signature: v2di __builtin_ia32_psrlq128(v2di, v2di)
    - signature: v2di __builtin_ia32_psrlqi128(v2di, int)
    - signature: v2di __builtin_ia32_psrlv2di(v2di, v2di)
    - signature: v2di __builtin_ia32_psubq128(v2di, v2di)
    - signature: v2di __builtin_ia32_psubq(v2di, v2di)
    - signature: v2di __builtin_ia32_punpckhqdq128(v2di, v2di)
    - signature: v2di __builtin_ia32_punpcklqdq128(v2di, v2di)
    - signature: v2di __builtin_ia32_pxor128(v2di, v2di)
    - signature: v2di __builtin_ia32_vec_set_v2di(v2di, long long, const int)
    - signature: v2di __builtin_ia32_vpcmov(v2di, v2di, v2di)
    - signature: v2di __builtin_ia32_vpcmov_v2di(v2di, v2di, v2di)
    - signature: v2di __builtin_ia32_vpcomeqq(v2di, v2di)
    - signature: v2di __builtin_ia32_vpcomequq(v2di, v2di)
    - signature: v2di __builtin_ia32_vpcomfalseq(v2di, v2di)
    - signature: v2di __builtin_ia32_vpcomfalseuq(v2di, v2di)
    - signature: v2di __builtin_ia32_vpcomgeq(v2di, v2di)
    - signature: v2di __builtin_ia32_vpcomgeuq(v2di, v2di)
    - signature: v2di __builtin_ia32_vpcomgtq(v2di, v2di)
    - signature: v2di __builtin_ia32_vpcomgtuq(v2di, v2di)
    - signature: v2di __builtin_ia32_vpcomleq(v2di, v2di)
    - signature: v2di __builtin_ia32_vpcomleuq(v2di, v2di)
    - signature: v2di __builtin_ia32_vpcomltq(v2di, v2di)
    - signature: v2di __builtin_ia32_vpcomltuq(v2di, v2di)
    - signature: v2di __builtin_ia32_vpcomneq(v2di, v2di)
    - signature: v2di __builtin_ia32_vpcomneuq(v2di, v2di)
    - signature: v2di __builtin_ia32_vpcomtrueq(v2di, v2di)
    - signature: v2di __builtin_ia32_vpcomtrueuq(v2di, v2di)
    - signature: v2di __builtin_ia32_vphaddbq(v16qi)
    - signature: v2di __builtin_ia32_vphadddq(v4si)
    - signature: v2di __builtin_ia32_vphaddubq(v16qi)
    - signature: v2di __builtin_ia32_vphaddudq(v4si)
    - signature: v2di __builtin_ia32_vphadduwq(v8hi)
    - signature: v2di __builtin_ia32_vphaddwq(v8hi)
    - signature: v2di __builtin_ia32_vphsubdq(v4si)
    - signature: v2di __builtin_ia32_vpmacsdqh(v4si, v4si, v2di)
    - signature: v2di __builtin_ia32_vpmacsdql(v4si, v4si, v2di)
    - signature: v2di __builtin_ia32_vpmacssdqh(v4si, v4si, v2di)
    - signature: v2di __builtin_ia32_vpmacssdql(v4si, v4si, v2di)
    - signature: v2di __builtin_ia32_vprotq(v2di, v2di)
    - signature: v2di __builtin_ia32_vpshaq(v2di, v2di)
    - signature: v2di __builtin_ia32_vpshlq(v2di, v2di)
    - signature: v2sf __builtin_ia32_pfacc(v2sf, v2sf)
    - signature: v2sf __builtin_ia32_pfadd(v2sf, v2sf)
    - signature: v2sf __builtin_ia32_pfmax(v2sf, v2sf)
    - signature: v2sf __builtin_ia32_pfmin(v2sf, v2sf)
    - signature: v2sf __builtin_ia32_pfmul(v2sf, v2sf)
    - signature: v2sf __builtin_ia32_pfnacc(v2sf, v2sf)
    - signature: v2sf __builtin_ia32_pfpnacc(v2sf, v2sf)
    - signature: v2sf __builtin_ia32_pfrcpit1(v2sf, v2sf)
    - signature: v2sf __builtin_ia32_pfrcpit2(v2sf, v2sf)
    - signature: v2sf __builtin_ia32_pfrcp(v2sf)
    - signature: v2sf __builtin_ia32_pfrsqrtit1 (v2sf, v2sf)
    - signature: v2sf __builtin_ia32_pfrsqrt(v2sf)
    - signature: v2sf __builtin_ia32_pfsubr(v2sf, v2sf)
    - signature: v2sf __builtin_ia32_pfsub(v2sf, v2sf)
    - signature: v2sf __builtin_ia32_pi2fd(v2si)
    - signature: v2sf __builtin_ia32_pi2fw(v2si)
    - signature: v2sf __builtin_ia32_pswapdsf(v2sf)
    - signature: v2si __builtin_ia32_cvtpd2pi(v2df)
    - signature: v2si __builtin_ia32_cvtps2pi(v4sf)
    - signature: v2si __builtin_ia32_cvttpd2pi(v2df)
    - signature: v2si __builtin_ia32_cvttps2pi(v4sf)
    - signature: v2si __builtin_ia32_pabsd(v2si)
    - signature: v2si __builtin_ia32_paddd(v2si, v2si)
    - signature: v2si __builtin_ia32_pcmpeqd(v2si, v2si)
    - signature: v2si __builtin_ia32_pcmpgtd(v2si, v2si)
    - signature: v2si __builtin_ia32_pf2id(v2sf)
    - signature: v2si __builtin_ia32_pf2iw(v2sf)
    - signature: v2si __builtin_ia32_pfcmpeq(v2sf, v2sf)
    - signature: v2si __builtin_ia32_pfcmpge(v2sf, v2sf)
    - signature: v2si __builtin_ia32_pfcmpgt(v2sf, v2sf)
    - signature: v2si __builtin_ia32_phaddd(v2si, v2si)
    - signature: v2si __builtin_ia32_phsubd(v2si, v2si)
    - signature: v2si __builtin_ia32_psignd(v2si, v2si)
    - signature: v2si __builtin_ia32_pslldi(v2si, int)
    - signature: v2si __builtin_ia32_pslld(v2si, v2si)
    - signature: v2si __builtin_ia32_psradi(v2si, int)
    - signature: v2si __builtin_ia32_psrad(v2si, v2si)
    - signature: v2si __builtin_ia32_psrldi(v2si, int)
    - signature: v2si __builtin_ia32_psrld(v2si, v2si)
    - signature: v2si __builtin_ia32_psubd(v2si, v2si)
    - signature: v2si __builtin_ia32_pswapdsi(v2si)
    - signature: v2si __builtin_ia32_punpckhdq(v2si, v2si)
    - signature: v2si __builtin_ia32_punpckldq(v2si, v2si)
    - signature: v32hi __builtin_ia32_psubw256(v16hi, v16hi)
    - signature: v32qi __builtin_ia32_lddqu256(pcchar)
    - signature: v32qi __builtin_ia32_loaddqu256(pcchar)
    - signature: v32qi __builtin_ia32_mpsadbw256(v32qi, v32qi, int)
    - signature: v32qi __builtin_ia32_pabsb256(v32qi)
    - signature: v32qi __builtin_ia32_packsswb256(v16hi, v16hi)
    - signature: v32qi __builtin_ia32_packuswb256(v16hi, v16hi)
    - signature: v32qi __builtin_ia32_paddb256(v32qi, v32qi)
    - signature: v32qi __builtin_ia32_paddsb256(v32qi, v32qi)
    - signature: v32qi __builtin_ia32_paddusb256(v32qi, v32qi)
    - signature: v32qi __builtin_ia32_pavgb256(v32qi, v32qi)
    - signature: v32qi __builtin_ia32_pblendvb256(v32qi, v32qi, v32qi)
    - signature: v32qi __builtin_ia32_pbroadcastb256(v16qi)
    - signature: v32qi __builtin_ia32_pcmpeqb256(v32qi, v32qi)
    - signature: v32qi __builtin_ia32_pcmpgtb256(v32qi, v32qi)
    - signature: v32qi __builtin_ia32_pmaddubsw256(v32qi, v32qi)
    - signature: v32qi __builtin_ia32_pmaxsb256(v32qi, v32qi)
    - signature: v32qi __builtin_ia32_pmaxub256(v32qi, v32qi)
    - signature: v32qi __builtin_ia32_pminsb256(v32qi, v32qi)
    - signature: v32qi __builtin_ia32_pminub256(v32qi, v32qi)
    - signature: v32qi __builtin_ia32_pshufb256(v32qi, v32qi)
    - signature: v32qi __builtin_ia32_psignb256(v32qi, v32qi)
    - signature: v32qi __builtin_ia32_psubb256(v32qi, v32qi)
    - signature: v32qi __builtin_ia32_psubsb256(v32qi, v32qi)
    - signature: v32qi __builtin_ia32_psubusb256(v32qi, v32qi)
    - signature: v32qi __builtin_ia32_punpckhbw256(v32qi, v32qi)
    - signature: v32qi __builtin_ia32_punpcklbw256(v32qi, v32qi)
    - signature: v32qi __builtin_ia32_vpcmov_v32qi256(v32qi, v32qi, v32qi)
    - signature: v4df __builtin_ia32_addpd256(v4df, v4df)
    - signature: v4df __builtin_ia32_addsubpd256(v4df, v4df)
    - signature: v4df __builtin_ia32_andnpd256(v4df, v4df)
    - signature: v4df __builtin_ia32_andpd256(v4df, v4df)
    - signature: v4df __builtin_ia32_blendpd256(v4df, v4df, int)
    - signature: v4df __builtin_ia32_blendvpd256(v4df, v4df, v4df)
    - signature: v4df __builtin_ia32_cmppd256(v4df, v4df, int)
    - signature: v4df __builtin_ia32_cvtdq2pd256(v4si)
    - signature: v4df __builtin_ia32_cvtps2pd256(v4sf)
    - signature: v4df __builtin_ia32_divpd256(v4df, v4df)
    - signature: v4df __builtin_ia32_fmaddpd256(v4df, v4df, v4df)
    - signature: v4df __builtin_ia32_fmaddsubpd256(v4df, v4df, v4df)
    - signature: v4df __builtin_ia32_fmsubaddpd256(v4df, v4df, v4df)
    - signature: v4df __builtin_ia32_fmsubpd256(v4df, v4df, v4df)
    - signature: v4df __builtin_ia32_fnmaddpd256(v4df, v4df, v4df)
    - signature: v4df __builtin_ia32_fnmsubpd256(v4df, v4df, v4df)
    - signature: v4df __builtin_ia32_gatherdiv4df(v4df, pcdouble, v4di, v4df, int)
    - signature: v4df __builtin_ia32_gathersiv4df(v4df, pcdouble, v4si, v4df, int)
    - signature: v4df __builtin_ia32_haddpd256(v4df, v4df)
    - signature: v4df __builtin_ia32_hsubpd256(v4df, v4df)
    - signature: v4df __builtin_ia32_loadupd256(pcdouble)
    - signature: v4df __builtin_ia32_maskloadpd256(pcv4df, v4df)
    - signature: v4df __builtin_ia32_maxpd256(v4df, v4df)
    - signature: v4df __builtin_ia32_minpd256(v4df, v4df)
    - signature: v4df __builtin_ia32_movddup256(v4df)
    - signature: v4df __builtin_ia32_mulpd256(v4df, v4df)
    - signature: v4df __builtin_ia32_orpd256(v4df, v4df)
    - signature: v4df __builtin_ia32_pd256_pd(v2df)
    - signature: v4df __builtin_ia32_permdf256(v4df, int)
    - signature: v4df __builtin_ia32_roundpd256(v4df, int)
    - signature: v4df __builtin_ia32_shufpd256(v4df, v4df, int)
    - signature: v4df __builtin_ia32_sqrtpd256(v4df)
    - signature: v4df __builtin_ia32_subpd256(v4df, v4df)
    - signature: v4df __builtin_ia32_unpckhpd256(v4df, v4df)
    - signature: v4df __builtin_ia32_unpcklpd256(v4df, v4df)
    - signature: v4df __builtin_ia32_vbroadcastf128_pd256(pcv2df)
    - signature: v4df __builtin_ia32_vbroadcastsd256(pcdouble)
    - signature: v4df __builtin_ia32_vbroadcastsd_pd256(v2df)
    - signature: v4df __builtin_ia32_vfrczpd256(v4df)
    - signature: v4df __builtin_ia32_vinsertf128_pd256(v4df, v2df, int)
    - signature: v4df __builtin_ia32_vpcmov_v4df256(v4df, v4df, v4df)
    - signature: v4df __builtin_ia32_vperm2f128_pd256(v4df, v4df, int)
    - signature: v4df __builtin_ia32_vpermil2pd256(v4df, v4df, v4di, int)
    - signature: v4df __builtin_ia32_vpermilpd256(v4df, int)
    - signature: v4df __builtin_ia32_vpermilvarpd256(v4df, v4di)
    - signature: v4df __builtin_ia32_xorpd256(v4df, v4df)
    - signature: v4di __builtin_ia32_andnotsi256(v4di, v4di)
    - signature: v4di __builtin_ia32_andsi256(v4di, v4di)
    - signature: v4di __builtin_ia32_extract128i256(v4di, int)
    - signature: v4di __builtin_ia32_gatherdiv4di(v4di, pcint64, v4di, v4di, int)
    - signature: v4di __builtin_ia32_gathersiv4di(v4di, pcint64, v4si, v4di, int)
    - signature: v4di __builtin_ia32_insert128i256(v4di, v2di, int)
    - signature: v4di __builtin_ia32_maskloadq256(pcv4di, v4di)
    - signature: v4di __builtin_ia32_movntdqa256(pv4di)
    - signature: v4di __builtin_ia32_paddq256(v4di, v4di)
    - signature: v4di __builtin_ia32_palignr256(v4di, v4di, int)
    - signature: v4di __builtin_ia32_pbroadcastq256(v2di)
    - signature: v4di __builtin_ia32_pcmpeqq256(v4di, v4di)
    - signature: v4di __builtin_ia32_pcmpgtq256(v4di, v4di)
    - signature: v4di __builtin_ia32_permdi256(v4di, int)
    - signature: v4di __builtin_ia32_permti256(v4di, v4di, int)
    - signature: v4di __builtin_ia32_pmovsxbq256(v16qi)
    - signature: v4di __builtin_ia32_pmovsxdq256(v4si)
    - signature: v4di __builtin_ia32_pmovsxwq256(v8hi)
    - signature: v4di __builtin_ia32_pmovzxbq256(v16qi)
    - signature: v4di __builtin_ia32_pmovzxdq256(v4si)
    - signature: v4di __builtin_ia32_pmovzxwq256(v8hi)
    - signature: v4di __builtin_ia32_pmuldq256(v8si, v8si)
    - signature: v4di __builtin_ia32_pmuludq256(v8si, v8si)
    - signature: v4di __builtin_ia32_por256(v4di, v4di)
    - signature: v4di __builtin_ia32_pslldqi256(v4di, int)
    - signature: v4di __builtin_ia32_psllq256(v4di, v2di)
    - signature: v4di __builtin_ia32_psllqi256(v4di, int)
    - signature: v4di __builtin_ia32_psllv4di(v4di, v4di)
    - signature: v4di __builtin_ia32_psrldqi256(v4di, int)
    - signature: v4di __builtin_ia32_psrlq256(v4di, v2di)
    - signature: v4di __builtin_ia32_psrlqi256(v4di, int)
    - signature: v4di __builtin_ia32_psrlv4di(v4di, v4di)
    - signature: v4di __builtin_ia32_psubq256(v4di, v4di)
    - signature: v4di __builtin_ia32_punpckhqdq256(v4di, v4di)
    - signature: v4di __builtin_ia32_punpcklqdq256(v4di, v4di)
    - signature: v4di __builtin_ia32_pxor256(v4di,v4di)
    - signature: v4di __builtin_ia32_vbroadcastsi256(v2di)
    - signature: v4di __builtin_ia32_vpcmov_v4di256(v4di, v4di, v4di)
    - signature: v4hi __builtin_ia32_pabsw(v4hi)
    - signature: v4hi __builtin_ia32_packssdw(v2si, v2si)
    - signature: v4hi __builtin_ia32_paddsw(v4hi, v4hi)
    - signature: v4hi __builtin_ia32_paddusw(v4hi, v4hi)
    - signature: v4hi __builtin_ia32_paddw(v4hi, v4hi)
    - signature: v4hi __builtin_ia32_pavgw(v4hi, v4hi)
    - signature: v4hi __builtin_ia32_pcmpeqw(v4hi, v4hi)
    - signature: v4hi __builtin_ia32_pcmpgtw(v4hi, v4hi)
    - signature: v4hi __builtin_ia32_phaddsw(v4hi, v4hi)
    - signature: v4hi __builtin_ia32_phaddw(v4hi, v4hi)
    - signature: v4hi __builtin_ia32_phsubsw(v4hi, v4hi)
    - signature: v4hi __builtin_ia32_phsubw(v4hi, v4hi)
    - signature: v4hi __builtin_ia32_pinsrw(v4hi, int, int)
    - signature: v4hi __builtin_ia32_pmaddubsw(v8qi, v8qi)
    - signature: v4hi __builtin_ia32_pmaxsw(v4hi, v4hi)
    - signature: v4hi __builtin_ia32_pminsw(v4hi, v4hi)
    - signature: v4hi __builtin_ia32_pmulhrsw(v4hi, v4hi)
    - signature: v4hi __builtin_ia32_pmulhrw(v4hi, v4hi)
    - signature: v4hi __builtin_ia32_pmulhuw(v4hi, v4hi)
    - signature: v4hi __builtin_ia32_pmulhw(v4hi, v4hi)
    - signature: v4hi __builtin_ia32_pmullw(v4hi, v4hi)
    - signature: v4hi __builtin_ia32_psignw(v4hi, v4hi)
    - signature: v4hi __builtin_ia32_psllwi(v4hi, int)
    - signature: v4hi __builtin_ia32_psllw(v4hi, v4hi)
    - signature: v4hi __builtin_ia32_psrawi(v4hi, int)
    - signature: v4hi __builtin_ia32_psraw(v4hi, v4hi)
    - signature: v4hi __builtin_ia32_psrlwi(v4hi, int)
    - signature: v4hi __builtin_ia32_psrlw(v4hi, v4hi)
    - signature: v4hi __builtin_ia32_psubsw(v4hi, v4hi)
    - signature: v4hi __builtin_ia32_psubusw(v4hi, v4hi)
    - signature: v4hi __builtin_ia32_psubw(v4hi, v4hi)
    - signature: v4hi __builtin_ia32_punpckhwd(v4hi, v4hi)
    - signature: v4hi __builtin_ia32_punpcklwd(v4hi, v4hi)
    - signature: v4sf __builtin_ia32_addps(v4sf, v4sf)
    - signature: v4sf __builtin_ia32_addss(v4sf, v4sf)
    - signature: v4sf __builtin_ia32_addsubps(v4sf, v4sf)
    - signature: v4sf __builtin_ia32_andnps(v4sf, v4sf)
    - signature: v4sf __builtin_ia32_andps(v4sf, v4sf)
    - signature: v4sf __builtin_ia32_blendps(v4sf, v4sf, const int)
    - signature: v4sf __builtin_ia32_blendvps(v4sf, v4sf, v4sf)
    - signature: v4sf __builtin_ia32_cmpps(v4sf, v4sf, int)
    - signature: v4sf __builtin_ia32_cmpss(v4sf, v4sf, int)
    - signature: v4sf __builtin_ia32_cvtdq2ps(v4si)
    - signature: v4sf __builtin_ia32_cvtpd2ps256(v4df)
    - signature: v4sf __builtin_ia32_cvtpd2ps(v2df)
    - signature: v4sf __builtin_ia32_cvtpi2ps(v4sf, v2si)
    - signature: v4sf __builtin_ia32_cvtsd2ss(v4sf, v2df)
    - signature: v4sf __builtin_ia32_cvtsi2ss(v4sf, int)
    - signature: v4sf __builtin_ia32_divps(v4sf, v4sf)
    - signature: v4sf __builtin_ia32_divss(v4sf, v4sf)
    - signature: v4sf __builtin_ia32_dpps(v4sf, v4sf, const int)
    - signature: v4sf __builtin_ia32_fmaddps(v4sf, v4sf, v4sf)
    - signature: v4sf __builtin_ia32_fmaddss(v4sf, v4sf, v4sf)
    - signature: v4sf __builtin_ia32_fmaddsubps(v4sf, v4sf, v4sf)
    - signature: v4sf __builtin_ia32_fmsubaddps(v4sf, v4sf, v4sf)
    - signature: v4sf __builtin_ia32_fmsubps(v4sf, v4sf, v4sf)
    - signature: v4sf __builtin_ia32_fmsubss(v4sf, v4sf, v4sf)
    - signature: v4sf __builtin_ia32_fnmaddps(v4sf, v4sf, v4sf)
    - signature: v4sf __builtin_ia32_fnmaddss(v4sf, v4sf, v4sf)
    - signature: v4sf __builtin_ia32_fnmsubps(v4sf, v4sf, v4sf)
    - signature: v4sf __builtin_ia32_fnmsubss(v4sf, v4sf, v4sf)
    - signature: v4sf __builtin_ia32_gatherdiv4sf256(v4sf, pcfloat, v4di, v4sf, int)
    - signature: v4sf __builtin_ia32_gatherdiv4sf(v4sf, pcfloat, v2di, v4sf, int)
    - signature: v4sf __builtin_ia32_gathersiv4sf(v4sf, pcfloat, v4si, v4sf, int)
    - signature: v4sf __builtin_ia32_haddps(v4sf, v4sf)
    - signature: v4sf __builtin_ia32_hsubps(v4sf, v4sf)
    - signature: v4sf __builtin_ia32_insertps128(v4sf, v4sf, const int)
    - signature: v4sf __builtin_ia32_loadaps(float *)
    - signature: v4sf __builtin_ia32_loadhps(v4sf, const v2sf *)
    - signature: v4sf __builtin_ia32_loadlps(v4sf, const v2sf *)
    - signature: v4sf __builtin_ia32_loadsss(float *)
    - signature: v4sf __builtin_ia32_loadups(float *)
    - signature: v4sf __builtin_ia32_maskloadps(pcv4sf, v4sf)
    - signature: v4sf __builtin_ia32_maxps(v4sf, v4sf)
    - signature: v4sf __builtin_ia32_maxss(v4sf, v4sf)
    - signature: v4sf __builtin_ia32_minps(v4sf, v4sf)
    - signature: v4sf __builtin_ia32_minss(v4sf, v4sf)
    - signature: v4sf __builtin_ia32_movhlps(v4sf, v4sf)
    - signature: v4sf __builtin_ia32_movlhps(v4sf, v4sf)
    - signature: v4sf __builtin_ia32_movshdup(v4sf)
    - signature: v4sf __builtin_ia32_movsldup(v4sf)
    - signature: v4sf __builtin_ia32_movss(v4sf, v4sf)
    - signature: v4sf __builtin_ia32_mulps(v4sf, v4sf)
    - signature: v4sf __builtin_ia32_mulss(v4sf, v4sf)
    - signature: v4sf __builtin_ia32_orps(v4sf, v4sf)
    - signature: v4sf __builtin_ia32_ps_ps256(v8sf)
    - signature: v4sf __builtin_ia32_rcpps(v4sf)
    - signature: v4sf __builtin_ia32_rcpss(v4sf)
    - signature: v4sf __builtin_ia32_roundps(v4sf, const int)
    - signature: v4sf __builtin_ia32_roundss(v4sf, v4sf, const int)
    - signature: v4sf __builtin_ia32_rsqrtps(v4sf)
    - signature: v4sf __builtin_ia32_rsqrtss(v4sf)
    - signature: v4sf __builtin_ia32_shufps(v4sf, v4sf, int)
    - signature: v4sf __builtin_ia32_sqrtps(v4sf)
    - signature: v4sf __builtin_ia32_sqrtss(v4sf)
    - signature: v4sf __builtin_ia32_subps(v4sf, v4sf)
    - signature: v4sf __builtin_ia32_subss(v4sf, v4sf)
    - signature: v4sf __builtin_ia32_unpckhps(v4sf, v4sf)
    - signature: v4sf __builtin_ia32_unpcklps(v4sf, v4sf)
    - signature: v4sf __builtin_ia32_vbroadcastss(pcfloat)
    - signature: v4sf __builtin_ia32_vbroadcastss_ps(v4sf)
    - signature: v4sf __builtin_ia32_vec_set_v4sf(v4sf, float, const int)
    - signature: v4sf __builtin_ia32_vextractf128_ps256(v8sf, int)
    - signature: v4sf __builtin_ia32_vfrczps(v4sf)
    - signature: v4sf __builtin_ia32_vfrczss(v4sf)
    - signature: v4sf __builtin_ia32_vpcmov_v4sf(v4sf, v4sf, v4sf)
    - signature: v4sf __builtin_ia32_vpermil2ps(v4sf, v4sf, v4si, int)
    - signature: v4sf __builtin_ia32_vpermilps(v4sf, int)
    - signature: v4sf __builtin_ia32_vpermilvarps(v4sf, v4si)
    - signature: v4sf __builtin_ia32_xorps(v4sf, v4sf)
    - signature: v4si __builtin_ia32_cmpeqps(v4sf, v4sf)
    - signature: v4si __builtin_ia32_cmpeqss(v4sf, v4sf)
    - signature: v4si __builtin_ia32_cmpgeps(v4sf, v4sf)
    - signature: v4si __builtin_ia32_cmpgtps(v4sf, v4sf)
    - signature: v4si __builtin_ia32_cmpleps(v4sf, v4sf)
    - signature: v4si __builtin_ia32_cmpless(v4sf, v4sf)
    - signature: v4si __builtin_ia32_cmpltps(v4sf, v4sf)
    - signature: v4si __builtin_ia32_cmpltss(v4sf, v4sf)
    - signature: v4si __builtin_ia32_cmpneqps(v4sf, v4sf)
    - signature: v4si __builtin_ia32_cmpneqss(v4sf, v4sf)
    - signature: v4si __builtin_ia32_cmpngeps(v4sf, v4sf)
    - signature: v4si __builtin_ia32_cmpngtps(v4sf, v4sf)
    - signature: v4si __builtin_ia32_cmpnleps(v4sf, v4sf)
    - signature: v4si __builtin_ia32_cmpnless(v4sf, v4sf)
    - signature: v4si __builtin_ia32_cmpnltps(v4sf, v4sf)
    - signature: v4si __builtin_ia32_cmpnlts(v4sf, v4sf)
    - signature: v4si __builtin_ia32_cmpordps(v4sf, v4sf)
    - signature: v4si __builtin_ia32_cmpordss(v4sf, v4sf)
    - signature: v4si __builtin_ia32_cmpunordps(v4sf, v4sf)
    - signature: v4si __builtin_ia32_cmpunordss(v4sf, v4sf)
    - signature: v4si __builtin_ia32_cvtpd2dq256(v4df)
    - signature: v4si __builtin_ia32_cvtpd2dq(v2df)
    - signature: v4si __builtin_ia32_cvtps2dq(v4sf)
    - signature: v4si __builtin_ia32_cvttpd2dq256(v4df)
    - signature: v4si __builtin_ia32_cvttpd2dq(v2df)
    - signature: v4si __builtin_ia32_cvttps2dq(v4sf)
    - signature: v4si __builtin_ia32_gatherdiv4si256(v4si, pcint, v4di, v4si, int)
    - signature: v4si __builtin_ia32_gatherdiv4si(v4si, pcint, v2di, v4si, int)
    - signature: v4si __builtin_ia32_gathersiv4si(v4si, pcint, v4si, v4si, int)
    - signature: v4si __builtin_ia32_maskloadd(pcv4si, v4si)
    - signature: v4si __builtin_ia32_pabsd128(v4si)
    - signature: v4si __builtin_ia32_paddd128(v4si, v4si)
    - signature: v4si __builtin_ia32_pblendd128(v4si, v4si)
    - signature: v4si __builtin_ia32_pbroadcastd128(v4si)
    - signature: v4si __builtin_ia32_pcmpeqd128(v4si, v4si)
    - signature: v4si __builtin_ia32_pcmpgtd128(v4si, v4si)
    - signature: v4si __builtin_ia32_phaddd128(v4si, v4si)
    - signature: v4si __builtin_ia32_phsubd128(v4si, v4si)
    - signature: v4si __builtin_ia32_pmaddwd128(v8hi, v8hi)
    - signature: v4si __builtin_ia32_pmaxsd128(v4si, v4si)
    - signature: v4si __builtin_ia32_pmaxud128(v4si, v4si)
    - signature: v4si __builtin_ia32_pminsd128(v4si, v4si)
    - signature: v4si __builtin_ia32_pminud128(v4si, v4si)
    - signature: v4si __builtin_ia32_pmovsxbd128(v16qi)
    - signature: v4si __builtin_ia32_pmovsxwd128(v8hi)
    - signature: v4si __builtin_ia32_pmovzxbd128(v16qi)
    - signature: v4si __builtin_ia32_pmovzxwd128(v8hi)
    - signature: v4si __builtin_ia32_pmulld128(v4si, v4si)
    - signature: v4si __builtin_ia32_pshufd(v4si, int)
    - signature: v4si __builtin_ia32_psignd128(v4si, v4si)
    - signature: v4si __builtin_ia32_pslld128(v4si, v4si)
    - signature: v4si __builtin_ia32_pslldi128(v4si, int)
    - signature: v4si __builtin_ia32_psllv4si(v4si, v4si)
    - signature: v4si __builtin_ia32_psrad128(v4si, v4si)
    - signature: v4si __builtin_ia32_psradi128(v4si, int)
    - signature: v4si __builtin_ia32_psrav4si(v4si, v4si)
    - signature: v4si __builtin_ia32_psrld128(v4si, v4si)
    - signature: v4si __builtin_ia32_psrldi128(v4si, int)
    - signature: v4si __builtin_ia32_psrlv4si(v4si, v4si)
    - signature: v4si __builtin_ia32_psubd128(v4si, v4si)
    - signature: v4si __builtin_ia32_punpckhdq128(v4si, v4si)
    - signature: v4si __builtin_ia32_punpckldq128(v4si, v4si)
    - signature: v4si __builtin_ia32_si_si256(v8si)
    - signature: v4si __builtin_ia32_vec_set_v4si(v4si, int, const int)
    - signature: v4si __builtin_ia32_vextractf128_si256(v8si, int)
    - signature: v4si __builtin_ia32_vpcmov_v4si(v4si, v4si, v4si)
    - signature: v4si __builtin_ia32_vpcomeqd(v4si, v4si)
    - signature: v4si __builtin_ia32_vpcomequd(v4si, v4si)
    - signature: v4si __builtin_ia32_vpcomfalsed(v4si, v4si)
    - signature: v4si __builtin_ia32_vpcomfalseud(v4si, v4si)
    - signature: v4si __builtin_ia32_vpcomged(v4si, v4si)
    - signature: v4si __builtin_ia32_vpcomgeud(v4si, v4si)
    - signature: v4si __builtin_ia32_vpcomgtd(v4si, v4si)
    - signature: v4si __builtin_ia32_vpcomgtud(v4si, v4si)
    - signature: v4si __builtin_ia32_vpcomled(v4si, v4si)
    - signature: v4si __builtin_ia32_vpcomleud(v4si, v4si)
    - signature: v4si __builtin_ia32_vpcomltd(v4si, v4si)
    - signature: v4si __builtin_ia32_vpcomltud(v4si, v4si)
    - signature: v4si __builtin_ia32_vpcomned(v4si, v4si)
    - signature: v4si __builtin_ia32_vpcomneud(v4si, v4si)
    - signature: v4si __builtin_ia32_vpcomtrued(v4si, v4si)
    - signature: v4si __builtin_ia32_vpcomtrueud(v4si, v4si)
    - signature: v4si __builtin_ia32_vphaddbd(v16qi)
    - signature: v4si __builtin_ia32_vphaddubd(v16qi)
    - signature: v4si __builtin_ia32_vphadduwd(v8hi)
    - signature: v4si __builtin_ia32_vphaddwd(v8hi)
    - signature: v4si __builtin_ia32_vphsubwd(v8hi)
    - signature: v4si __builtin_ia32_vpmacsdd(v4si, v4si, v4si)
    - signature: v4si __builtin_ia32_vpmacssdd(v4si, v4si, v4si)
    - signature: v4si __builtin_ia32_vpmacsswd(v8hi, v8hi, v4si)
    - signature: v4si __builtin_ia32_vpmacswd(v8hi, v8hi, v4si)
    - signature: v4si __builtin_ia32_vpmadcsswd(v8hi, v8hi, v4si)
    - signature: v4si __builtin_ia32_vpmadcswd(v8hi, v8hi, v4si)
    - signature: v4si __builtin_ia32_vprotd(v4si, v4si)
    - signature: v4si __builtin_ia32_vpshad(v4si, v4si)
    - signature: v4si __builtin_ia32_vpshld(v4si, v4si)
    - signature: v8hi __builtin_ia32_pabsw128(v8hi)
    - signature: v8hi __builtin_ia32_packssdw128(v4si, v4si)
    - signature: v8hi __builtin_ia32_packusdw128(v4si, v4si)
    - signature: v8hi __builtin_ia32_paddw128(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_pavgw128(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_pblendw128(v8hi, v8hi, const int)
    - signature: v8hi __builtin_ia32_pbroadcastw128(v8hi)
    - signature: v8hi __builtin_ia32_pcmpeqw128(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_pcmpgtw128(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_phaddsw128(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_phaddw128(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_phminposuw128(v8hi)
    - signature: v8hi __builtin_ia32_phsubsw128(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_phsubw128(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_pmaddubsw128(v16qi, v16qi)
    - signature: v8hi __builtin_ia32_pmaxsw128(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_pmaxuw128(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_pminsw128(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_pminuw128(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_pmovsxbw128(v16qi)
    - signature: v8hi __builtin_ia32_pmovzxbw128(v16qi)
    - signature: v8hi __builtin_ia32_pmulhrsw128(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_pmulhuw128(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_pmulhw128(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_pmullw128(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_pshufhw(v8hi, int)
    - signature: v8hi __builtin_ia32_pshuflw(v8hi, int)
    - signature: v8hi __builtin_ia32_psignw128(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_psllw128(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_psllwi128(v8hi, int)
    - signature: v8hi __builtin_ia32_psraw128(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_psrawi128(v8hi, int)
    - signature: v8hi __builtin_ia32_psrlw128(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_psrlwi128(v8hi, int)
    - signature: v8hi __builtin_ia32_psubw128(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_punpckhwd128(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_punpcklwd128(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_vpcmov_v8hi(v8hi, v8hi, v8hi)
    - signature: v8hi __builtin_ia32_vpcomequw(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_vpcomeqw(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_vpcomfalseuw(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_vpcomfalsew(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_vpcomgeuw(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_vpcomgew(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_vpcomgtuw(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_vpcomgtw(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_vpcomleuw(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_vpcomlew(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_vpcomltuw(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_vpcomltw(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_vpcomneuw(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_vpcomnew(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_vpcomtrueuw(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_vpcomtruew(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_vphaddbw(v16qi)
    - signature: v8hi __builtin_ia32_vphaddubw(v16qi)
    - signature: v8hi __builtin_ia32_vphsubbw(v16qi)
    - signature: v8hi __builtin_ia32_vpmacssww(v8hi, v8hi, v8hi)
    - signature: v8hi __builtin_ia32_vpmacsww(v8hi, v8hi, v8hi)
    - signature: v8hi __builtin_ia32_vprotw(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_vpshaw(v8hi, v8hi)
    - signature: v8hi __builtin_ia32_vpshlw(v8hi, v8hi)
    - signature: v8qi __builtin_ia32_pabsb(v8qi)
    - signature: v8qi __builtin_ia32_packsswb(v4hi, v4hi)
    - signature: v8qi __builtin_ia32_packuswb(v4hi, v4hi)
    - signature: v8qi __builtin_ia32_paddb(v8qi, v8qi)
    - signature: v8qi __builtin_ia32_paddsb(v8qi, v8qi)
    - signature: v8qi __builtin_ia32_paddusb(v8qi, v8qi)
    - signature: v8qi __builtin_ia32_pavgb(v8qi, v8qi)
    - signature: v8qi __builtin_ia32_pavgusb(v8qi, v8qi)
    - signature: v8qi __builtin_ia32_pcmpeqb(v8qi, v8qi)
    - signature: v8qi __builtin_ia32_pcmpgtb(v8qi, v8qi)
    - signature: v8qi __builtin_ia32_pmaxub(v8qi, v8qi)
    - signature: v8qi __builtin_ia32_pminub(v8qi, v8qi)
    - signature: v8qi __builtin_ia32_pshufb(v8qi, v8qi)
    - signature: v8qi __builtin_ia32_psignb(v8qi, v8qi)
    - signature: v8qi __builtin_ia32_psubb(v8qi, v8qi)
    - signature: v8qi __builtin_ia32_psubsb(v8qi, v8qi)
    - signature: v8qi __builtin_ia32_psubusb(v8qi, v8qi)
    - signature: v8qi __builtin_ia32_punpckhbw(v8qi, v8qi)
    - signature: v8qi __builtin_ia32_punpcklbw(v8qi, v8qi)
    - signature: v8sf __builtin_ia32_addps256(v8sf, v8sf)
    - signature: v8sf __builtin_ia32_addsubps256(v8sf, v8sf)
    - signature: v8sf __builtin_ia32_andnps256(v8sf, v8sf)
    - signature: v8sf __builtin_ia32_andps256(v8sf, v8sf)
    - signature: v8sf __builtin_ia32_blendps256(v8sf, v8sf, int)
    - signature: v8sf __builtin_ia32_blendvps256(v8sf, v8sf, v8sf)
    - signature: v8sf __builtin_ia32_cmpps256(v8sf, v8sf, int)
    - signature: v8sf __builtin_ia32_cvtdq2ps256(v8si)
    - signature: v8sf __builtin_ia32_divps256(v8sf, v8sf)
    - signature: v8sf __builtin_ia32_dpps256(v8sf, v8sf, int)
    - signature: v8sf __builtin_ia32_fmaddps256(v8sf, v8sf, v8sf)
    - signature: v8sf __builtin_ia32_fmaddsubps256(v8sf, v8sf, v8sf)
    - signature: v8sf __builtin_ia32_fmsubaddps256(v8sf, v8sf, v8sf)
    - signature: v8sf __builtin_ia32_fmsubps256(v8sf, v8sf, v8sf)
    - signature: v8sf __builtin_ia32_fnmaddps256(v8sf, v8sf, v8sf)
    - signature: v8sf __builtin_ia32_fnmsubps256(v8sf, v8sf, v8sf)
    - signature: v8sf __builtin_ia32_gathersiv8sf(v8sf, pcfloat, v8si, v8sf, int)
    - signature: v8sf __builtin_ia32_haddps256(v8sf, v8sf)
    - signature: v8sf __builtin_ia32_hsubps256(v8sf, v8sf)
    - signature: v8sf __builtin_ia32_loadups256(pcfloat)
    - signature: v8sf __builtin_ia32_maskloadps256(pcv8sf, v8sf)
    - signature: v8sf __builtin_ia32_maxps256(v8sf, v8sf)
    - signature: v8sf __builtin_ia32_minps256(v8sf, v8sf)
    - signature: v8sf __builtin_ia32_movshdup256(v8sf)
    - signature: v8sf __builtin_ia32_movsldup256(v8sf)
    - signature: v8sf __builtin_ia32_mulps256(v8sf, v8sf)
    - signature: v8sf __builtin_ia32_orps256(v8sf, v8sf)
    - signature: v8sf __builtin_ia32_permvarsf256(v8sf, v8sf)
    - signature: v8sf __builtin_ia32_ps256_ps(v4sf)
    - signature: v8sf __builtin_ia32_rcpps256(v8sf)
    - signature: v8sf __builtin_ia32_roundps256(v8sf, int)
    - signature: v8sf __builtin_ia32_rsqrtps256(v8sf)
    - signature: v8sf __builtin_ia32_rsqrtps_nr256(v8sf)
    - signature: v8sf __builtin_ia32_shufps256(v8sf, v8sf, int)
    - signature: v8sf __builtin_ia32_sqrtps256(v8sf)
    - signature: v8sf __builtin_ia32_sqrtps_nr256(v8sf)
    - signature: v8sf __builtin_ia32_subps256(v8sf, v8sf)
    - signature: v8sf __builtin_ia32_unpckhps256(v8sf, v8sf)
    - signature: v8sf __builtin_ia32_unpcklps256(v8sf, v8sf)
    - signature: v8sf __builtin_ia32_vbroadcastf128_ps256(pcv4sf)
    - signature: v8sf __builtin_ia32_vbroadcastss256(pcfloat)
    - signature: v8sf __builtin_ia32_vbroadcastss_ps256(v4sf)
    - signature: v8sf __builtin_ia32_vfrczps256(v8sf)
    - signature: v8sf __builtin_ia32_vinsertf128_ps256(v8sf, v4sf, int)
    - signature: v8sf __builtin_ia32_vpcmov_v8sf256(v8sf, v8sf, v8sf)
    - signature: v8sf __builtin_ia32_vperm2f128_ps256(v8sf, v8sf, int)
    - signature: v8sf __builtin_ia32_vpermil2ps256(v8sf, v8sf, v8si, int)
    - signature: v8sf __builtin_ia32_vpermilps256(v8sf, int)
    - signature: v8sf __builtin_ia32_vpermilvarps256(v8sf, v8si)
    - signature: v8sf __builtin_ia32_xorps256(v8sf, v8sf)
    - signature: v8si __builtin_ia32_cvtps2dq256(v8sf)
    - signature: v8si __builtin_ia32_cvttps2dq256(v8sf)
    - signature: v8si __builtin_ia32_gathersiv8si(v8si, pcint, v8si, v8si, int)
    - signature: v8si __builtin_ia32_maskloadd256(pcv8si, v8si)
    - signature: v8si __builtin_ia32_pabsd256(v8si)
    - signature: v8si __builtin_ia32_paddd256(v8si, v8si)
    - signature: v8si __builtin_ia32_pblendd256(v8si, v8si)
    - signature: v8si __builtin_ia32_pbroadcastd256(v4si)
    - signature: v8si __builtin_ia32_pcmpeqd256(c8si, v8si)
    - signature: v8si __builtin_ia32_pcmpgtd256(v8si, v8si)
    - signature: v8si __builtin_ia32_permvarsi256(v8si, v8si)
    - signature: v8si __builtin_ia32_phaddd256(v8si, v8si)
    - signature: v8si __builtin_ia32_phsubd256(v8si, v8si)
    - signature: v8si __builtin_ia32_pmaxsd256(v8si, v8si)
    - signature: v8si __builtin_ia32_pmaxud256(v8si, v8si)
    - signature: v8si __builtin_ia32_pminsd256(v8si, v8si)
    - signature: v8si __builtin_ia32_pminud256(v8si, v8si)
    - signature: v8si __builtin_ia32_pmovsxbd256(v16qi)
    - signature: v8si __builtin_ia32_pmovsxwd256(v8hi)
    - signature: v8si __builtin_ia32_pmovzxbd256(v16qi)
    - signature: v8si __builtin_ia32_pmovzxwd256(v8hi)
    - signature: v8si __builtin_ia32_pmulld256(v8si, v8si)
    - signature: v8si __builtin_ia32_pshufd256(v8si, int)
    - signature: v8si __builtin_ia32_psignd256(v8si, v8si)
    - signature: v8si __builtin_ia32_pslld256(v8si, v4si)
    - signature: v8si __builtin_ia32_pslldi256(v8si, int)
    - signature: v8si __builtin_ia32_psllv8si(v8si, v8si)
    - signature: v8si __builtin_ia32_psrad256(v8si, v4si)
    - signature: v8si __builtin_ia32_psradi256(v8si, int)
    - signature: v8si __builtin_ia32_psrav8si(v8si, v8si)
    - signature: v8si __builtin_ia32_psrld256(v8si, v4si)
    - signature: v8si __builtin_ia32_psrldi256(v8si, int)
    - signature: v8si __builtin_ia32_psrlv8si(v8si, v8si)
    - signature: v8si __builtin_ia32_psubd256(v8si, v8si)
    - signature: v8si __builtin_ia32_punpckhdq256(v8si, v8si)
    - signature: v8si __builtin_ia32_punpckldq256(v8si, v8si)
    - signature: v8si __builtin_ia32_si256_si(v4si)
    - signature: v8si __builtin_ia32_vinsertf128_si256(v8si, v4si, int)
    - signature: v8si __builtin_ia32_vpcmov_v8si256(v8si, v8si, v8si)
    - signature: v8si __builtin_ia32_vperm2f128_si256(v8si, v8si, int)
    - signature: void __addfsbyte(unsigned long, unsigned char)
    - signature: void __addfsdword(unsigned long, unsigned long)
    - signature: void __addfsword(unsigned long, unsigned short)
    - signature: void __addgsbyte(unsigned long, unsigned char)
    - signature: void __addgsdword(unsigned long, unsigned int)
    - signature: void __addgsqword(unsigned long, unsigned __int64)
    - signature: void __addgsword(unsigned long, unsigned short)
    - signature: void * _AddressOfReturnAddress(void)
    - signature: void __builtin_cpu_init(void)
    - signature: void __builtin_ia32_clflush(const void *)
    - signature: void __builtin_ia32_femms(void)
    - signature: void __builtin_ia32_lfence(void)
    - signature: void __builtin_ia32_llwpcb16(void *);
    - signature: void * __builtin_ia32_llwpcb16(void);
    - signature: void __builtin_ia32_llwpcb32(void *);
    - signature: void * __builtin_ia32_llwpcb32(void);
    - signature: void __builtin_ia32_llwpcb64(void *);
    - signature: void * __builtin_ia32_llwpcb64(void);
    - signature: void __builtin_ia32_lwpval16(unsigned short, unsigned int, unsigned short)
    - signature: void __builtin_ia32_lwpval32(unsigned int, unsigned int, unsigned int)
    - signature: void __builtin_ia32_lwpval64(unsigned __int64, unsigned int, unsigned int)
    - signature: void __builtin_ia32_maskmovdqu(v16qi, v16qi)
    - signature: void __builtin_ia32_maskmovq(v8qi, v8qi, char *)
    - signature: void __builtin_ia32_maskstored256(pv8si, v8si, v8si)
    - signature: void __builtin_ia32_maskstored(pv4si, v4si, v4si)
    - signature: void __builtin_ia32_maskstorepd256(pv4df, v4df, v4df)
    - signature: void __builtin_ia32_maskstorepd(pv2df, v2df, v2df)
    - signature: void __builtin_ia32_maskstoreps256(pv8sf, v8sf, v8sf)
    - signature: void __builtin_ia32_maskstoreps(pv4sf, v4sf, v4sf)
    - signature: void __builtin_ia32_maskstoreq256(pv4di, v4di, v4di)
    - signature: void __builtin_ia32_maskstoreq(pv2di, v2di, v2di)
    - signature: void __builtin_ia32_mfence(void)
    - signature: void __builtin_ia32_monitor(void *, unsigned int, unsigned int)
    - signature: void __builtin_ia32_movntdq(v2df *, v2df)
    - signature: void __builtin_ia32_movnti64(long long int *, long long int)
    - signature: void __builtin_ia32_movnti(int *, int)
    - signature: void __builtin_ia32_movntpd(double *, v2df)
    - signature: void __builtin_ia32_movntps(float *, v4sf)
    - signature: void __builtin_ia32_movntq(di *, di)
    - signature: void __builtin_ia32_movntsd(double *, v2df)
    - signature: void __builtin_ia32_movntss(float *, v4sf)
    - signature: void __builtin_ia32_mwait(unsigned int, unsigned int)
    - signature: void __builtin_ia32_pause(void)
    - signature: void __builtin_ia32_sfence(void)
    - signature: void __builtin_ia32_storeaps(float *, v4sf)
    - signature: void __builtin_ia32_storedqu256(pchar, v32qi)
    - signature: void __builtin_ia32_storedqu(char *, v16qi)
    - signature: void __builtin_ia32_storehps(v2sf *, v4sf)
    - signature: void __builtin_ia32_storelps(v2sf *, v4sf)
    - signature: void __builtin_ia32_storess(float *, v4sf)
    - signature: void __builtin_ia32_storeupd256(pdouble, v4df)
    - signature: void __builtin_ia32_storeupd(double *, v2df)
    - signature: void __builtin_ia32_storeups256(pfloat, v8sf)
    - signature: void __builtin_ia32_storeups(float *, v4sf)
    - signature: void __builtin_ia32_vzeroall(void)
    - signature: void __builtin_ia32_vzeroupper(void)
    - signature: void __builtin_ia32_xabort(status)
    - signature: void __builtin_ia32_xend()
    - signature: void _clac(void)
    - signature: void __cpuidex(int *, int, int)
    - signature: void __cpuid(int *, int)
    - signature: void __debugbreak(void)
    - signature: void _disable(void)
    - signature: void _enable(void)
    - signature: void __fastfail(unsigned int)
    - signature: void __faststorefence(void)
    - signature: void _fxrstor64(void const *)
    - signature: void _fxrstor(void const *)
    - signature: void _fxsave64(void *)
    - signature: void _fxsave(void *)
    - signature: void __halt(void)
    - signature: void __inbytestring(unsigned short, unsigned char *, unsigned long)
    - signature: void __incfsbyte(unsigned long)
    - signature: void __incfsdword(unsigned long)
    - signature: void __incfsword(unsigned long)
    - signature: void __incgsbyte(unsigned long)
    - signature: void __incgsdword(unsigned long)
    - signature: void __incgsqword(unsigned long)
    - signature: void __incgsword(unsigned long)
    - signature: void __indwordstring(unsigned short, unsigned long *, unsigned long)
    - signature: void __int2c(void)
    - signature: void * _InterlockedCompareExchangePointer_HLEAcquire(void * volatile *, void *, void *)
    - signature: void * _InterlockedCompareExchangePointer_HLERelease(void * volatile *, void *, void *)
    - signature: void * _InterlockedCompareExchangePointer_np(void **, void *, void *)
    - signature: void * _InterlockedCompareExchangePointer(void * volatile *, void *, void *)
    - signature: void * _InterlockedExchangePointer_HLEAcquire(void * volatile *, void *)
    - signature: void * _InterlockedExchangePointer_HLERelease(void * volatile *, void *)
    - signature: void * _InterlockedExchangePointer(void * volatile *, void *)
    - signature: void __invlpg(void *)
    - signature: void _invpcid(unsigned int, void *)
    - signature: void __inwordstring(unsigned short, unsigned short *, unsigned long)
    - signature: void _lgdt(void *)
    - signature: void __lidt(void *)
    - signature: void __llwpcb(void *)
    - signature: void __lwpval32(unsigned int, unsigned int, unsigned int)
    - signature: void __lwpval64(unsigned __int64, unsigned int, unsigned int)
    - signature: void _m_empty(void)
    - signature: void _m_femms(void)
    - signature: void _mm256_maskstore_epi32(int *, __m256i, __m256i)
    - signature: void _mm256_maskstore_epi64(__int64 *, __m256i, __m256i)
    - signature: void _mm256_maskstore_pd(double *, __m256i, __m256d)
    - signature: void _mm256_maskstore_ps(float *, __m256i, __m256)
    - signature: void _mm256_store_pd(double *, __m256d)
    - signature: void _mm256_store_ps(float *, __m256)
    - signature: void _mm256_store_si256(__m256i *, __m256i)
    - signature: void _mm256_storeu_pd(double *, __m256d)
    - signature: void _mm256_storeu_ps(float *, __m256)
    - signature: void _mm256_storeu_si256(__m256i *, __m256i)
    - signature: void __mm256_stream_pd(double *, __m256d)
    - signature: void _mm256_stream_ps(float *, __m256)
    - signature: void __mm256_stream_si256(__m256i *, __m256i)
    - signature: void _mm256_zeroall(void)
    - signature: void _mm256_zeroupper(void)
    - signature: void _m_maskmovq(__m64, __m64, char *)
    - signature: void _mm_clflush(void const *)
    - signature: void _mm_lfence(void)
    - signature: void _mm_maskmoveu_si128(__m128i, __m128i, char *)
    - signature: void _mm_maskstore_epi32(int *, __m128i, __m128i)
    - signature: void _mm_maskstore_epi64(__int64 *, __m128i, __m128i)
    - signature: void _mm_maskstore_pd(double *, __m128i, __m128d)
    - signature: void _mm_maskstore_ps(float *, __m128i, __m128)
    - signature: void _mm_mfence(void)
    - signature: void _mm_monitor(void const *, unsigned int, unsigned int)
    - signature: void _mm_mwait(unsigned int, unsigned int)
    - signature: void _mm_pause(void)
    - signature: void _mm_prefetch(char *, int)
    - signature: void _mm_setcsr(unsigned int)
    - signature: void _mm_sfence(void)
    - signature: void _mm_store1_pd(double *, __m128d)
    - signature: void _mm_storeh_pd(double *, __m128d)
    - signature: void _mm_storeh_pi(__m64 *, __m128)
    - signature: void _mm_storel_epi64(__m128i *, __m128i)
    - signature: void _mm_storel_pd(double *, __m128d)
    - signature: void _mm_storel_pi(__m64 *, __m128)
    - signature: void _mm_store_pd(double *, __m128d)
    - signature: void _mm_store_ps1(float *, __m128)
    - signature: void _mm_store_ps(float *, __m128)
    - signature: void _mm_storer_pd(double *, __m128d)
    - signature: void _mm_storer_ps(float *, __m128)
    - signature: void _mm_store_sd(double *, __m128d)
    - signature: void _mm_store_si128(__m128i *, __m128i)
    - signature: void _mm_store_ss(float *, __m128)
    - signature: void _mm_storeu_pd(double *, __m128d)
    - signature: void _mm_storeu_ps(float *, __m128)
    - signature: void _mm_storeu_si128(__m128i *, __m128i)
    - signature: void _mm_stream_pd(double *, __m128d)
    - signature: void _mm_stream_pi(__m64 *, __m64)
    - signature: void _mm_stream_ps(float *, __m128)
    - signature: void _mm_stream_sd(double *, __m128d)
    - signature: void _mm_stream_si128(__m128i *, __m128i)
    - signature: void _mm_stream_si32(int *, int)
    - signature: void _mm_stream_si64x(__int64 *, __int64)
    - signature: void _mm_stream_ss(float *, __m128)
    - signature: void __movsb(unsigned char *, unsigned char const *, size_t)
    - signature: void __movsd(unsigned long *, unsigned long const *, size_t)
    - signature: void __movsq(unsigned __int64 *, unsigned __int64 const *, size_t)
    - signature: void __movsw(unsigned short *, unsigned short const *, size_t)
    - signature: void _m_prefetch(void *)
    - signature: void _m_prefetchw(void *)
    - signature: void __nop(void)
    - signature: void __nvreg_restore_fence(void)
    - signature: void __nvreg_save_fence(void)
    - signature: void __outbytestring(unsigned short, unsigned char *, unsigned long)
    - signature: void __outbyte(unsigned short, unsigned char)
    - signature: void __outdwordstring(unsigned short, unsigned long *, unsigned long)
    - signature: void __outdword(unsigned short, unsigned long)
    - signature: void __outwordstring(unsigned short, unsigned short *, unsigned long)
    - signature: void __outword(unsigned short, unsigned short)
    - signature: void _ReadBarrier(void)
    - signature: void _ReadWriteBarrier(void)
    - signature: void * _ReturnAddress(void)
    - signature: void _rsm(void)
    - signature: void _sgdt(void *)
    - signature: void _sgdt(void*)
    - signature: void __sidt(void *)
    - signature: void * __slwpcb(void)
    - signature: void _stac(void)
    - signature: void _Store64_HLERelease(__int64 volatile *, __int64)
    - signature: void _storebe_i16(void *, short)
    - signature: void _storebe_i32(void *, int)
    - signature: void _storebe_i64(void *, __int64)
    - signature: void _store_be_u16(void *, unsigned short)
    - signature: void _store_be_u32(void *, unsigned int)
    - signature: void _store_be_u64(void *, unsigned __int64)
    - signature: void _Store_HLERelease(long volatile *, long)
    - signature: void _StorePointer_HLERelease(void * volatile *, void *)
    - signature: void __stosb(unsigned char *, unsigned char, size_t)
    - signature: void __stosd(unsigned long *, unsigned long, size_t)
    - signature: void __stosq(unsigned __int64 *, unsigned __int64, size_t)
    - signature: void __stosw(unsigned short *, unsigned short, size_t)
    - signature: void __svm_clgi(void)
    - signature: void __svm_invlpga(void *, int)
    - signature: void __svm_skinit(int)
    - signature: void __svm_stgi(void)
    - signature: void __svm_vmload(size_t)
    - signature: void __svm_vmrun(size_t)
    - signature: void __svm_vmsave(size_t)
    - signature: void __ud2(void)
    - signature: void __vmx_off(void)
    - signature: void __vmx_vmptrst(unsigned __int64 *)
    - signature: void __wbinvd(void)
    - signature: void _WriteBarrier(void)
    - signature: void __writecr0(unsigned __int64)
    - signature: void __writecr0(unsigned long)
    - signature: void __writecr3(unsigned __int64)
    - signature: void __writecr3(unsigned long)
    - signature: void __writecr4(unsigned __int64)
    - signature: void __writecr4(unsigned long)
    - signature: void __writecr8(unsigned __int64)
    - signature: void __writecr8(unsigned long)
    - signature: void __writedr(unsigned, unsigned)
    - signature: void __writedr(unsigned, unsigned __int64)
    - signature: void __writeeflags(unsigned)
    - signature: void __writeeflags(unsigned __int64)
    - signature: void _writefsbase_u32(unsigned int)
    - signature: void _writefsbase_u64(unsigned __int64)
    - signature: void _writefsbase_u64(unsigned long long)
    - signature: void __writefsbyte(unsigned long, unsigned char)
    - signature: void __writefsdword(unsigned long, unsigned long)
    - signature: void __writefsword(unsigned long, unsigned short)
    - signature: void _writegsbase_u32(unsigned int)
    - signature: void _writegsbase_u64(unsigned __int64)
    - signature: void _writegsbase_u64(unsigned long long)
    - signature: void __writegsbyte(unsigned long, unsigned char)
    - signature: void __writegsdword(unsigned long, unsigned long)
    - signature: void __writegsqword(unsigned long, unsigned __int64)
    - signature: void __writegsword(unsigned long, unsigned short)
    - signature: void __writemsr(unsigned long, unsigned __int64)
    - signature: void _xrstor64(void const *, unsigned __int64)
    - signature: void _xrstor(void const *, unsigned __int64)
    - signature: void _xsave64(void *, unsigned __int64)
    - signature: void _xsaveopt64(void *, unsigned __int64)
    - signature: void _xsaveopt(void *, unsigned __int64)
    - signature: void _xsave(void *, unsigned __int64)
    - signature: void _xsetbv(unsigned int, unsigned __int64)
    - pattern: _mm256(?:[0-9]+)?_\w+
      notes: AVX 256 intrinsics, keep it last for fuzzy matching.
    - pattern: _mm512(?:[0-9]+)?_\w+
      notes: AVX 512 intrinsics, keep it last for fuzzy matching.

# Intel TSX (Transactional Synchronization Extensions) Instructions
X86_INTEL_TSX_INTRINSICS:
    - signature: unsigned int _xbegin(void)
      help:  |+
        Intel TSX (Transactional Synchronization Extensions) instructions are required.

    - signature: void _xend(void)
      help:  |+
        Intel TSX (Transactional Synchronization Extensions) instructions are required.

    - signature: void _xabort(const unsigned int)
      help:  |+
        Intel TSX (Transactional Synchronization Extensions) instructions are required.

    - signature: unsigned char _xtest(void)
      help:  |+
        Intel TSX (Transactional Synchronization Extensions) instructions are required.

    - pattern: _XBEGIN_STARTED
      help:  |+
        Intel TSX (Transactional Synchronization Extensions) instructions are required.

    - pattern: _XABORT_EXPLICIT
      help:  |+
        Intel TSX (Transactional Synchronization Extensions) instructions are required.

    - pattern: _XABORT_RETRY
      help:  |+
        Intel TSX (Transactional Synchronization Extensions) instructions are required.

    - pattern: _XABORT_CONFLICT
      help:  |+
        Intel TSX (Transactional Synchronization Extensions) instructions are required.

    - pattern: _XABORT_CAPACITY
      help:  |+
        Intel TSX (Transactional Synchronization Extensions) instructions are required.

    - pattern: _XABORT_DEBUG
      help:  |+
        Intel TSX (Transactional Synchronization Extensions) instructions are required.

    - pattern: _XABORT_NESTED
      help:  |+
        Intel TSX (Transactional Synchronization Extensions) instructions are required.

# Intel Memory Protection Extensions (MPX) Instructions
X86_INTEL_MPX_INTRINSICS:
    - signature: __declspec(mpx)
      help:  |+
        Intel MPX (Memory Protection Extensions) instructions are required.

# Intel Software Guard Extensions (SGX) Instructions
X86_INTEL_SGX_INTRINSICS:
    - signature: long sgx_ioc_enclave_create(struct sgx_encl *encl, void __user *arg)
      help:  |+
        Intel SGX (Software Guard Extensions) instructions are required.

    - signature: long sgx_ioc_enclave_add_pages(struct sgx_encl *encl, void __user *arg)
      help:  |+
        Intel SGX (Software Guard Extensions) instructions are required.

    - signature: long sgx_ioc_enclave_init(struct sgx_encl *encl, void __user *arg)
      help:  |+
        Intel SGX (Software Guard Extensions) instructions are required.

    - signature: long sgx_ioc_enclave_provision(struct sgx_encl *encl, void __user *arg)
      help:  |+
        Intel SGX (Software Guard Extensions) instructions are required.

    - signature: vdso_sgx_enter_enclave_t()
      notes: typedef for 'int vdso_sgx_enter_enclave_t (unsigned long rdi, unsigned long rsi, unsigned long rdx, unsigned int function, unsigned long r8, unsigned long r9, struct sgx_enclave_run *run)'
      help:  |+
        Intel SGX (Software Guard Extensions) instructions are required.

# Intel Transactional Synchronization Extensions (TSX) Instructions
x86_INTEL_TSX_INLINE_ASSEMBLY:
    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(XACQUIRE|XRELEASE|XBEGIN|XEND|XABORT|XTEST)
      help: |+
        Intel TSX (Transactional Synchronization Extensions) instructions are required.

# Intel Memory Protection Extensions (MPX) Instructions
x86_INTEL_MPX_INLINE_ASSEMBLY:
    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(BNDMK|BNDCL|BNDCU|BNDCN|BNDMOV|BNDLDX|BNDSTX)
      help: |+
        Intel MPX (Memory Protection Extensions) instructions are required.

# Intel Software Guard Extensions (SGX) Instructions
x86_INTEL_SGX_INLINE_ASSEMBLY:
    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(ENCLS|ENCLU|ENCLV)
      help: |+
        Intel SGX (Software Guard Extensions) instructions are required.

# Intel Safer Mode Extensions (SMX) Instructions
x86_INTEL_SMX_INLINE_ASSEMBLY:
    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(GETSEC)
      help: |+
        Intel SMX (Safer Mode Extensions) instructions are required.

# Intel Virtual-Machine Extensions (VMX) Instructions
x86_INTEL_VMX_INLINE_ASSEMBLY:
    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VMPTRLD|VMPTRST|VMCLEAR|VMREAD|VMWRITE|VMLAUNCH|VMRESUME|VMXOFF|VMXON|INVEPT|INVVPID|VMCALL|VMFUNC)
      help: |+
        Intel VMX (Virtual-Machine Extensions) instructions are required.

# Intel Advanced Vector Extensions 512 (AVX-512) Instructions
x86_INTEL_AVX512_INLINE_ASSEMBLY:
    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(KADD(B|D|Q|W))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VBROADCAST(I|F)(32|64)X(2|4|8))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(KAND(B|D|NB|ND|NQ))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(KMOV(B|D|Q))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(KNOT(B|D|Q))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(KOR(B|D|Q))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(KORTEST(B|D|Q))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(KSHIFTL(B|D|Q))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(KSHIFTR(B|D|Q))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(KTEST(B|D|Q|W))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(KUNPCK(DQ|WD))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(KXNOR(B|D|Q))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(KXOR(B|D|Q))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VADDP(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VALIGN(D|Q))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VANDNP(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VANDP(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VBLENDMP(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VBROADCASTSS)
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VCMPP(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VCOMPRESSP(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VCVTDQ2P(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VCVTPD2(DQ|PS|QQ|UDQ|UQQ))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VCVTPH2(DQ|PS|PD||PH|QQ|UDQ|UQQ))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VCVTQQ2P(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VCVTTPD2(DQ|QQ|UDQ|UQQ))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VCVTTPS2(DQ|QQ|UDQ|UQQ))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VCVTUDQ2P(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VCVTUQQ2P(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VDBPSADBW)
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VDIVP(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VEXP2P(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VEXPANDP(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VEXTRACT(F|I)(32|64)X(2|4))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VFIXUPIMMP(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VFMADD132P(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VFMADD213P(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VFMADD231P(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VFMADDSUB132P(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VFMADDSUB213P(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VFMADDSUB231P(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VFMSUB132P(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VFMSUB213P(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VFMSUB231P(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VFMSUBADD132P(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VFMSUBADD213P(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VFMSUBADD231P(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VFNMADD132P(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VFNMADD213P(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VFNMADD231P(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VFNMSUB132P(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VFNMSUB213P(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VFNMSUB231P(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VFPCLASSP(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VFPCLASSS(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VGATHERDP(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VGATHERPF0DP(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VGATHERPF0QP(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VGATHERPF1DP(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VGATHERPF1QP(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VGATHERQP(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VGETEXPP(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VGETMANTP(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VINSERT(I|F)32X(4|8))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VINSERT(I|F)64X2)
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VMAXP(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VMINP(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VMOVAP(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VMOVDDUP)
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VMOVDQ(A32|A64|U8|U16|U32|U64))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VMOVNT(DQ|DQA|PD|PS))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VMOVS(H|L)DUP)
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VMOVUP(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VMULP(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VORP(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPABS(B|D|Q|W))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPACK(S|U)(SDW|SWB))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPADD(B|D|Q|SB|SW|USB|USW|W))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPALIGNR)
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPAND(D|ND|NQ|Q))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPAVG(B|W))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPBLENDM(B|D|Q|W))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPBROADCAST(B|D|Q|W|MB2Q|MW2D))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPCMP(B|D|EQQ|GTB|GTD|GTQ|GTW|Q|UB|UD|UQ|UW|W))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPCOMPRESS(D|Q))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPCONFLICT(D|Q))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPERMD)
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPERMI(2B|2D|2PD|2PS|2Q|2W|LPD|LPS))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPERMP(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPERMQ)
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPERMT2(B|D|PD|PS|Q|W))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPERMW)
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPEXPAND(D|Q))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPEXTR(B|D))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPGATHER(DD|DQ|QD|QQ))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPINSR(B|D|Q|W))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPLZCNT(D|Q))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPMADD52(H|L)UQ)
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPMADD(UBSW|WD))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPMAX(S|U)(B|D|Q|W))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPMIN(S|U)(B|D|Q|W))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPMOV(B2M|D2M|DB|DW|M2B|M2D|M2Q|M2W|Q2M|QB|QD|QW))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPMOV(S|US)(DB|DW|QB|QD|QW|WB))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPMOVSX(BD|BQ|BW|DQ|WD|WQ))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPMOVZX(BD|BQ|BW|DQ|WD|WQ))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPMOV(W2M|WB))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPMUL(DQ|HRSW|HUW|HW|LD|LQ|LW|TISHIFTQB|UDQ))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPOR(D|Q))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPROL(D|Q))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPROLV(D|Q))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPROR(D|Q))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPRORV(D|Q))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPSADBW)
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPSCATTER(DD|DQ|QD|QQ))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPSHUF(B|D|HW|LW))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPSLL(D|DQ|Q|VD|VQ|VW|W))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPSRA(D|Q|VD|VQ|VW|W))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPSRL(D|DQ|Q|VD|VQ|VW|W))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPSUB(B|D|Q|SB|SW|USB|USW|W))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPTERNLOG(D|Q))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPTESTM(B|D|Q|W))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPTESTNM(B|D|Q|W))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPUNPCK(H|L)(BW|DQ|QDQ|WD))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VPXOR(D|Q))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VRANGE(PD|PS|SD|SS))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VRCP14P(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VRCP28(PD|PS|SD|SS))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VREDUCE(PD|PS|SS))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VRNDSCALEP(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VRSQRT14P(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VSCALEFP(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VSCATTERD(PD|PS))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VSCATTERPF(0|1)(DPD|DPS|QPD|QPS))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VSCATTERQP(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VSHUFF(32|64)X(2|4))
      help: |+
        Intel Advanced Vector Extensions 512 (AVX-512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VSHUFI(32|64)X(2|4))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VSHUFP(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VSQRTP(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VSUBP(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VUNPCKHP(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VUNPCKLP(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(VXORP(D|S))
      help: |+
        Intel AVX-512 (Advanced Vector Extensions 512) instructions are required.

# AMD64 TBM (Trailing Bit Manipulation) Instructions
# NOTE: No Intel processors (at least through Coffee Lake) support TBM.
x86_AMD_TBM_INLINE_ASSEMBLY:
    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(BEXTR|BLCFILL|BLCI|BLCIC|BLCMSK|BLCS|BLSFILL|BLSIC|T1MSKC|TZMSK)

# AMD64 LWP (Lightweight Profiling) Instructions
# http://developer.amd.com/wordpress/media/2012/10/43724.pdf
x86_AMD_LWP_INLINE_ASSEMBLY:
    - pattern: (?mis)\A(#define \S+)?\s*([_]*asm[_]*)(\s+[_]*volatile[_]*)?(\s+[_]*inline[_]*)?(\s+goto)?\(.*(LLWPCB|SLWPCB|LWPVAL|LWPINS)

# Intel MPX (Memory Protection Extensions) Instructions.
x86_INTEL_MPX_COMPILER_OPTION:
    - pattern: -check-pointers-mpx=(rw|write)
      help: |+
        '-check-pointers-mpx' requires Intel MPX (Memory Protection Extensions) instructions.

    - pattern: /Qcheck-pointers-mpx:(rw|write)
      help: |+
        '/Qcheck-pointers-mpx' requires Intel MPX (Memory Protection Extensions) instructions.


# Intrinsics not for x86/x86-64/arm/arm64/aarch64
OTHER_ARCH_INTRINSICS:
    - pattern: (?:\s|^)_addcary(?:\w+|\(.*)
    - pattern: (?:\s|^)_allow_cpu_features\W
    - pattern: (?:\s|^)_bit_scan_(?:\w+|\(.*)
    - pattern: (?:\s|^)_bnd_(?:\w+|\(.*)
    - pattern: (?:\s|^)_rdpip_(?:\w+|\(.*)
    - pattern: (?:\s|^)_rotw\w\W
    - pattern: (?:\s|^)vec_v(?:\w+|\(.*)
    - pattern: (?:\s|^)_otherarch_intrinsic_(?:\w+|\(.*)

INCOMPATIBLE_UCRT_INTRINSICS:
    - signature: __int64 _abs64(__int64)
    - signature: void * _alloca(size_t)
    - signature: unsigned __int64 _byteswap_uint64(unsigned __int64)
    - signature: unsigned long _byteswap_ulong(unsigned long)
    - signature: unsigned short _byteswap_ushort(unsigned short)
    - signature: unsigned long _lrotl(unsigned long, int)
    - signature: unsigned long _lrotr(unsigned long, int)
    - signature: unsigned int _rotl(unsigned int,int)
    - signature: unsigned __int64 _rotl64(unsigned __int64, int)
    - signature: unsigned int _rotr(unsigned int, int)
    - signature: unsigned __int64 _rotr64(unsigned __int64, int)
    - signature: char *_strset(char *, int)
    - signature: wchar_t *_wcsset(wchar_t *, wchar_t)
    - signature: wchar_t *wcscat(wchar_t *, const wchar_t *)
    - signature: char *strset(char *, char)
    - signature: int wcscmp(const wchar_t *, const wchar_t *)
    - signature: size_t wcslen(const wchar_t *)

# for cpp standard check
CPP_STD_CODES:
    - pattern: (?i)((>|.)fetch_(xor|and|sub|add))\s*\((?!.*memory_order_(relaxed|consume|acquire|release|acq_rel|seq_cst).*)
      help: |+
          检测 atomic 接口 (没有使用 memory order).

          推荐使用合适的 c++ memory order, 优化程序性能;

          详见: https://en.cppreference.com/w/cpp/atomic/memory_order

    - pattern: (?i)((>|.)compare_exchange_(weak|strong))\s*\((?!.*memory_order_(relaxed|consume|acquire|release|acq_rel|seq_cst).*)
      help: |+
          检测 atomic 接口 (没有使用 memory order).

          推荐使用合适的 c++ memory order, 优化程序性能;

          详见: https://en.cppreference.com/w/cpp/atomic/memory_order

    - pattern: (?i)(.*__atomic_(load_n|load|store_n|store|exchange_n|exchange|compare_exchange_n|compare_exchange|add_fetch|sub_fetch|and_fetch|xor_fetch|or_fetch|nand_fetch|fetch_add|fetch_sub|fetch_and|fetch_xor|fetch_or|fetch_nand|test_and_set|clear|))\s*\((?!.*memory_order_(relaxed|consume|acquire|release|acq_rel|seq_cst).*)
      help: |+
          检测 __atomic Built-in Functions (没有使用 memory order).

          推荐使用合适的 memory order, 优化程序性能;

          详见:
              https://gcc.gnu.org/onlinedocs/gcc/_005f_005fatomic-Builtins.html
              https://en.cppreference.com/w/cpp/atomic/memory_order

    - signature: type __sync_fetch_and_add(type *ptr, type value, ...)
      help: |+
          推荐使用 type __atomic_fetch_add(type * ptr, type val, int memorder)

          注意 memorder 的正确使用.

          详见: https://gcc.gnu.org/onlinedocs/gcc/_005f_005fatomic-Builtins.html

    - signature: type __sync_fetch_and_sub(type *ptr, type value, ...)
      help: |+
          推荐使用 type __atomic_fetch_sub(type * ptr, type val, int memorder)

          注意 memorder 的正确使用.

          详见: https://gcc.gnu.org/onlinedocs/gcc/_005f_005fatomic-Builtins.html

    - signature: type __sync_fetch_and_or(type *ptr, type value, ...)
      help: |+
          推荐使用 type __atomic_fetch_or (type * ptr, type val, int memorder)

          注意 memorder 的正确使用.

          详见: https://gcc.gnu.org/onlinedocs/gcc/_005f_005fatomic-Builtins.html

    - signature: type __sync_fetch_and_and(type *ptr, type value, ...)
      help: |+
          推荐使用type __atomic_fetch_and(type *ptr, type val, int memorder)

          注意 memorder 的正确使用.

          详见: https://gcc.gnu.org/onlinedocs/gcc/_005f_005fatomic-Builtins.html

    - signature: type __sync_fetch_and_xor(type *ptr, type value, ...)
      help: |+
          推荐使用 type __atomic_fetch_xor(type * ptr, type val, int memorder)

          注意 memorder 的正确使用.

          详见: https://gcc.gnu.org/onlinedocs/gcc/_005f_005fatomic-Builtins.html

    - signature: type __sync_fetch_and_nand(type *ptr, type value, ...)
      help: |+
          推荐使用 type __atomic_add_fetch(type * ptr, type val, int memorder)

          注意 memorder 的正确使用.

          详见: https://gcc.gnu.org/onlinedocs/gcc/_005f_005fatomic-Builtins.html

    - signature: type __sync_add_and_fetch(type *ptr, type value, ...)
      help: |+
          推荐使用 type __atomic_and_fetch(type * ptr, type val, int memorder)

          注意 memorder 的正确使用.

          详见: https://gcc.gnu.org/onlinedocs/gcc/_005f_005fatomic-Builtins.html

    - signature: type __sync_sub_and_fetch(type *ptr, type value, ...)
      help: |+
          推荐使用 type __atomic_sub_fetch(type * ptr, type val, int memorder)

          注意 memorder 的正确使用.

          详见: https://gcc.gnu.org/onlinedocs/gcc/_005f_005fatomic-Builtins.html

    - signature: type __sync_or_and_fetch(type *ptr, type value, ...)
      help: |+
          推荐使用 type __atomic_or_fetch(type * ptr, type val, int memorder)

          注意 memorder 的正确使用.

          详见: https://gcc.gnu.org/onlinedocs/gcc/_005f_005fatomic-Builtins.html

    - signature: type __sync_and_and_fetch(type *ptr, type value, ...)
      help: |+
          推荐使用 type __atomic_and_fetch(type * ptr, type val, int memorder)

          注意 memorder 的正确使用.

          详见: https://gcc.gnu.org/onlinedocs/gcc/_005f_005fatomic-Builtins.html

    - signature: type __sync_xor_and_fetch(type *ptr, type value, ...)
      help: |+
          推荐使用 type __atomic_xor_fetch(type * ptr, type val, int memorder)

          注意 memorder 的正确使用.

          详见: https://gcc.gnu.org/onlinedocs/gcc/_005f_005fatomic-Builtins.html

    - signature: type __sync_nand_and_fetch(type *ptr, type value, ...)
      help: |+
          推荐使用 type __atomic_nand_fetch(type * ptr, type val, int memorder)

          注意 memorder 的正确使用.

          详见: https://gcc.gnu.org/onlinedocs/gcc/_005f_005fatomic-Builtins.html

    - signature: bool __sync_bool_compare_and_swap(type *ptr, type oldval, type newval, ...)
      help: |+
          推荐使用 bool __atomic_compare_exchange(type * ptr, type * expected, type * desired, bool weak, int success_memorder, int failure_memorder)

          注意 memorder 的正确使用.

          详见: https://gcc.gnu.org/onlinedocs/gcc/_005f_005fatomic-Builtins.html

    - signature: type __sync_val_compare_and_swap(type *ptr, type oldval, type newval, ...)
      help: |+
          推荐使用 bool __atomic_compare_exchange_n(type * ptr, type * expected, type desired, bool weak, int success_memorder, int failure_memorder)

          注意 memorder 的正确使用.

          详见: https://gcc.gnu.org/onlinedocs/gcc/_005f_005fatomic-Builtins.html

# Intrinsics available with plan9_go on x86, x86_64, arm, arm64, aarch64
PLAN9_GOLANG_COMMON:
    - pattern: (^|\s+)(MOVB|MOVW)($|\s)
    - pattern: (^|\s+)(ADDW|SUBW)($|\s)
    - pattern: (^|\s+)(MULW|MULL)($|\s)
    - pattern: (^|\s+)(FADDD|FSUBD|FMULD)($|\s)
    - pattern: (^|\s+)(FDIVD)($|\s)
    - pattern: (^|\s+)(WORD)($|\s)
    - pattern: (^|\s+)(LAST)($|\s)

# Intrinsics available with plan9_go on x86, x86_64, arm, arm64, aarch64
PLAN9_GOLANG_X86_AND_AARCH64:
    - pattern: (^|\s+)(ADDL|SUBL)($|\s)
    - pattern: (^|\s+)(MULSD)($|\s)
    - pattern: (^|\s+)(ADCW)($|\s)
    - pattern: (^|\s+)(ANDW)($|\s)
    - pattern: (^|\s+)(CMPW)($|\s)
    - pattern: (^|\s+)(CRC32B|CRC32W)($|\s)
    - pattern: (^|\s+)(HLT)($|\s)
    - pattern: (^|\s+)(LSLW)($|\s)
    - pattern: (^|\s+)(NEGW)($|\s)
    - pattern: (^|\s+)(RORW)($|\s)
    - pattern: (^|\s+)(FMOVD)($|\s)
    - pattern: (^|\s+)(VMOVQ|VMOVD)($|\s)
    - pattern: (^|\s+)(AESIMC)($|\s)

# Intrinsics available with plan9_go on x86, x86_64
PLAN9_GOLANG_X86:
    - pattern: (^|\s+)(AAA|AAD|AAM|AAS)($|\s)
    - pattern: (^|\s+)(ADCB|ADCL|ADCQ|ADCXL|ADCXQ)($|\s)
    - pattern: (^|\s+)(ADDB|ADDPD|ADDPS|ADDQ|ADDL)($|\s)
    - pattern: (^|\s+)(ADDSD|ADDSS|ADDSUBPD|ADDSUBPS)($|\s)
    - pattern: (^|\s+)(ADJSP|ADOXL|ADOXQ)($|\s)
    - pattern: (^|\s+)(AESDEC|AESDECLAST|AESENC|AESENCLAST|AESKEYGENASSIST)($|\s)
    - pattern: (^|\s+)(ANDB|ANDL|ANDNL|ANDNPD|ANDNPS)($|\s)
    - pattern: (^|\s+)(ANDNQ|ANDPD|ANDPS|ANDQ|ARPL)($|\s)
    - pattern: (^|\s+)(BEXTRL|BEXTRQ)($|\s)
    - pattern: (^|\s+)(BLENDPD|BLENDPS|BLENDVPD|BLENDVPS|BLSIL)($|\s)
    - pattern: (^|\s+)(BLSIQ|BLSMSKL|BLSMSKQ|BLSRL|BLSRQ)($|\s)
    - pattern: (^|\s+)(BOUNDL|BOUNDW)($|\s)
    - pattern: (^|\s+)(BSFL|BSFQ|BSFW)($|\s)
    - pattern: (^|\s+)(BSRL|BSRQ|BSRW)($|\s)
    - pattern: (^|\s+)(BSWAPL|BSWAPQ)($|\s)
    - pattern: (^|\s+)(BTCL|BTCQ|BTCW)($|\s)
    - pattern: (^|\s+)(BTL|BTQ|BTRL|BTRQ|BTRW)($|\s)
    - pattern: (^|\s+)(BTSL|BTSQ|BTSW|BTW)($|\s)
    - pattern: (^|\s+)(BYTE|BZHIL|BZHIQ)($|\s)
    - pattern: (^|\s+)(CBW|CDQ|CDQE)($|\s)
    - pattern: (^|\s+)(CLAC|CLC|CLD|CLDEMOTE)($|\s)
    - pattern: (^|\s+)(CLFLUSH|CLFLUSHOPT|CLI|CLTS|CLWB|CMC)($|\s)
    - pattern: (^|\s+)(CMOVLCC|CMOVLCS|CMOVLEQ|CMOVLGE|CMOVLGT)($|\s)
    - pattern: (^|\s+)(CMOVLHI|CMOVLLE|CMOVLLS|CMOVLLT|CMOVLMI)($|\s)
    - pattern: (^|\s+)(CMOVLNE|CMOVLOC|CMOVLOS|CMOVLPC|CMOVLPL)($|\s)
    - pattern: (^|\s+)(CMOVLPS|CMOVQCC|CMOVQCS|CMOVQEQ|CMOVQGE)($|\s)
    - pattern: (^|\s+)(CMOVQGT|CMOVQHI|CMOVQLE|CMOVQLS|CMOVQLT)($|\s)
    - pattern: (^|\s+)(CMOVQMI|CMOVQNE|CMOVQOC|CMOVQOS|CMOVQPC)($|\s)
    - pattern: (^|\s+)(CMOVQPL|CMOVQPS|CMOVWCC|CMOVWCS|CMOVWEQ)($|\s)
    - pattern: (^|\s+)(CMOVWGE|CMOVWGT|CMOVWHI|CMOVWLE|CMOVWLS)($|\s)
    - pattern: (^|\s+)(CMOVWLT|CMOVWMI|CMOVWNE|CMOVWOC|CMOVWOS)($|\s)
    - pattern: (^|\s+)(CMOVWPC|CMOVWPL|CMOVWPS)($|\s)
    - pattern: (^|\s+)(CMPB|CMPL|CMPPD|CMPPS|CMPQ)($|\s)
    - pattern: (^|\s+)(CMPSB|CMPSD|CMPSL|CMPSQ|CMPSS|CMPSW)($|\s)
    - pattern: (^|\s+)(CMPXCHG16B|CMPXCHG8B|CMPXCHGB|CMPXCHGL|CMPXCHGQ|CMPXCHGW)($|\s)
    - pattern: (^|\s+)(COMISD|COMISS|CPUID|CQO)($|\s)
    - pattern: (^|\s+)(CRC32L|CRC32Q)($|\s)
    - pattern: (^|\s+)(CVTPD2PL|CVTPD2PS|CVTPL2PD|CVTPL2PS|CVTPS2PD)($|\s)
    - pattern: (^|\s+)(CVTPS2PL|CVTSD2SL|CVTSD2SQ|CVTSD2SS|CVTSL2SD)($|\s)
    - pattern: (^|\s+)(CVTSL2SS|CVTSQ2SD|CVTSQ2SS|CVTSS2SD|CVTSS2SL)($|\s)
    - pattern: (^|\s+)(CVTSS2SQ|CVTTPD2PL|CVTTPS2PL|CVTTSD2SL|CVTTSD2SQ)($|\s)
    - pattern: (^|\s+)(CVTTSS2SL|CVTTSS2SQ|CWD|CWDE)($|\s)
    - pattern: (^|\s+)(DAA|DAS)($|\s)
    - pattern: (^|\s+)(DECB|DECL|DECQ|DECW)($|\s)
    - pattern: (^|\s+)(DIVB|DIVL|DIVPD|DIVPS)($|\s)
    - pattern: (^|\s+)(DIVQ|DIVSD|DIVSS|DIVW)($|\s)
    - pattern: (^|\s+)(DPPD|DPPS|EMMS|ENTER|EXTRACTPS)($|\s)
    - pattern: (^|\s+)(F2XM1|FABS)($|\s)
    - pattern: (^|\s+)(FADDDP|FADDF|FADDL|FADDW)($|\s)
    - pattern: (^|\s+)(FBLD|FBSTP)($|\s)
    - pattern: (^|\s+)(FCHS|FCLEX)($|\s)
    - pattern: (^|\s+)(FCMOVB|FCMOVBE|FCMOVCC|FCMOVCS|FCMOVE)($|\s)
    - pattern: (^|\s+)(FCMOVEQ|FCMOVHI|FCMOVLS|FCMOVNB|FCMOVNBE)($|\s)
    - pattern: (^|\s+)(FCMOVNE|FCMOVNU|FCMOVU|FCMOVUN)($|\s)
    - pattern: (^|\s+)(FCOMD|FCOMDP|FCOMDPP|FCOMF|FCOMFP)($|\s)
    - pattern: (^|\s+)(FCOMI|FCOMIP|FCOML|FCOMLP|FCOMW|FCOMWP)($|\s)
    - pattern: (^|\s+)(FCOS|FDECSTP)($|\s)
    - pattern: (^|\s+)(FDIVDP|FDIVF|FDIVL|FDIVRD|FDIVRDP)($|\s)
    - pattern: (^|\s+)(FDIVRF|FDIVRL|FDIVRW|FDIVW|FFREE)($|\s)
    - pattern: (^|\s+)(FINCSTP|FINIT)($|\s)
    - pattern: (^|\s+)(FLD1|FLDCW|FLDENV|FLDL2E|FLDL2T)($|\s)
    - pattern: (^|\s+)(FLDLG2|FLDLN2|FLDPI|FLDZ)($|\s)
    - pattern: (^|\s+)(FMOVB|FMOVBP|FMOVDP|FMOVF|FMOVFP)($|\s)
    - pattern: (^|\s+)(FMOVL|FMOVLP|FMOVV|FMOVVP|FMOVW)($|\s)
    - pattern: (^|\s+)(FMOVWP|FMOVX|FMOVXP)($|\s)
    - pattern: (^|\s+)(FMULDP|FMULF|FMULL|FMULW|FNOP)($|\s)
    - pattern: (^|\s+)(FPATAN|FPREM|FPREM1|FPTAN)($|\s)
    - pattern: (^|\s+)(FRNDINT|FRSTOR)($|\s)
    - pattern: (^|\s+)(FSAVE|FSCALE|FSIN|FSINCOS|FSQRT)($|\s)
    - pattern: (^|\s+)(FSTCW|FSTENV|FSTSW)($|\s)
    - pattern: (^|\s+)(FSUBDP|FSUBF|FSUBL|FSUBRD|FSUBRDP)($|\s)
    - pattern: (^|\s+)(FSUBRF|FSUBRL|FSUBRW|FSUBW|FTST)($|\s)
    - pattern: (^|\s+)(FUCOM|FUCOMI|FUCOMIP|FUCOMP|FUCOMPP)($|\s)
    - pattern: (^|\s+)(FXAM|FXCHD|FXRSTOR|FXRSTOR64|FXSAVE|FXSAVE64)($|\s)
    - pattern: (^|\s+)(FXTRACT|FYL2X|FYL2XP1)($|\s)
    - pattern: (^|\s+)(HADDPD|HADDPS|HSUBPD|HSUBPS)($|\s)
    - pattern: (^|\s+)(ICEBP|IDIVB|IDIVL|IDIVQ|IDIVW)($|\s)
    - pattern: (^|\s+)(IMUL3L|IMUL3Q|IMUL3W|IMULB|IMULL|IMULQ|IMULW)($|\s)
    - pattern: (^|\s+)(INB|INCB|INCL|INCQ|INCW)($|\s)
    - pattern: (^|\s+)(INL|INSB|INSERTPS|INSL|INSW)($|\s)
    - pattern: (^|\s+)(INT|INTO|INVD|INVLPG|INVPCID|INW)($|\s)
    - pattern: (^|\s+)(IRETL|IRETQ|IRETW)($|\s)
    - pattern: (^|\s+)(JCC|JCS|JCXZL|JCXZQ|JCXZW)($|\s)
    - pattern: (^|\s+)(JEQ|JGE|JGT|JHI|JLE|JLS)($|\s)
    - pattern: (^|\s+)(JLT|JMI|JNE|JOC|JOS|JPC)($|\s)
    - pattern: (^|\s+)(JPL|JPS)($|\s)
    - pattern: (^|\s+)(KADDB|KADDD|KADDQ|KADDW)($|\s)
    - pattern: (^|\s+)(KANDB|KANDD|KANDNB|KANDND)($|\s)
    - pattern: (^|\s+)(KANDNQ|KANDNW|KANDQ|KANDW)($|\s)
    - pattern: (^|\s+)(KMOVB|KMOVD|KMOVQ|KMOVW)($|\s)
    - pattern: (^|\s+)(KNOTB|KNOTD|KNOTQ|KNOTW)($|\s)
    - pattern: (^|\s+)(KORB|KORD|KORQ)($|\s)
    - pattern: (^|\s+)(KORTESTB|KORTESTD|KORTESTQ|KORTESTW|KORW)($|\s)
    - pattern: (^|\s+)(KSHIFTLB|KSHIFTLD|KSHIFTLQ|KSHIFTLW)($|\s)
    - pattern: (^|\s+)(KSHIFTRB|KSHIFTRD|KSHIFTRQ|KSHIFTRW)($|\s)
    - pattern: (^|\s+)(KTESTB|KTESTD|KTESTQ|KTESTW)($|\s)
    - pattern: (^|\s+)(KUNPCKBW|KUNPCKDQ|KUNPCKWD)($|\s)
    - pattern: (^|\s+)(KXNORB|KXNORD|KXNORQ|KXNORW)($|\s)
    - pattern: (^|\s+)(KXORB|KXORD|KXORQ|KXORW)($|\s)
    - pattern: (^|\s+)(LAHF|LARL|LARQ|LARW)($|\s)
    - pattern: (^|\s+)(LDDQU|LDMXCSR)($|\s)
    - pattern: (^|\s+)(LEAL|LEAQ|LEAVEL|LEAVEQ|LEAVEW|LEAW)($|\s)
    - pattern: (^|\s+)(LFENCE|LFSL|LFSQ|LFSW)($|\s)
    - pattern: (^|\s+)(LGDT|LGSL|LGSQ|LGSW)($|\s)
    - pattern: (^|\s+)(LIDT|LLDT|LMSW|LOCK)($|\s)
    - pattern: (^|\s+)(LODSB|LODSL|LODSQ|LODSW)($|\s)
    - pattern: (^|\s+)(LONG|LOOP|LOOPEQ|LOOPNE)($|\s)
    - pattern: (^|\s+)(LSLL|LSLQ|LSSL|LSSQ|LSSW)($|\s)
    - pattern: (^|\s+)(LTR|LZCNTL|LZCNTQ|LZCNTW)($|\s)
    - pattern: (^|\s+)(MASKMOVOU|MASKMOVQ)($|\s)
    - pattern: (^|\s+)(MAXPD|MAXPS|MAXSD|MAXSS|MFENCE)($|\s)
    - pattern: (^|\s+)(MINPD|MINPS|MINSD|MINSS)($|\s)
    - pattern: (^|\s+)(MONITOR|MOVAPD|MOVAPS)($|\s)
    - pattern: (^|\s+)(MOVBELL|MOVBEQQ|MOVBEWW|MOVBLSX|MOVBLZX)($|\s)
    - pattern: (^|\s+)(MOVBQSX|MOVBQZX|MOVBWSX|MOVBWZX)($|\s)
    - pattern: (^|\s+)(MOVDDUP|MOVHLPS|MOVHPD|MOVHPS)($|\s)
    - pattern: (^|\s+)(MOVL|MOVLHPS|MOVLPD|MOVLPS)($|\s)
    - pattern: (^|\s+)(MOVLQSX|MOVLQZX|MOVMSKPD|MOVMSKPS)($|\s)
    - pattern: (^|\s+)(MOVNTDQA|MOVNTIL|MOVNTIQ|MOVNTO)($|\s)
    - pattern: (^|\s+)(MOVNTPD|MOVNTPS|MOVNTQ)($|\s)
    - pattern: (^|\s+)(MOVO|MOVOU|MOVQ|MOVQL|MOVQOZX)($|\s)
    - pattern: (^|\s+)(MOVSB|MOVSD|MOVSHDUP|MOVSL|MOVSLDUP)($|\s)
    - pattern: (^|\s+)(MOVSQ|MOVSS|MOVSW|MOVSWW)($|\s)
    - pattern: (^|\s+)(MOVUPD|MOVUPS)($|\s)
    - pattern: (^|\s+)(MOVWLSX|MOVWLZX|MOVWQSX|MOVWQZX)($|\s)
    - pattern: (^|\s+)(MOVZWW|MPSADBW)($|\s)
    - pattern: (^|\s+)(MULB|MULPD|MULPS|MULQ)($|\s)
    - pattern: (^|\s+)(MULSS|MULXL|MULXQ|MWAIT)($|\s)
    - pattern: (^|\s+)(NEGB|NEGL|NEGQ)($|\s)
    - pattern: (^|\s+)(NOPL|NOPW|NOTB|NOTL|NOTQ|NOTW)($|\s)
    - pattern: (^|\s+)(ORB|ORL|ORPD|ORPS|ORQ|ORW)($|\s)
    - pattern: (^|\s+)(OUTB|OUTL|OUTSB|OUTSL|OUTSW|OUTW)($|\s)
    - pattern: (^|\s+)(PABSB|PABSD|PABSW)($|\s)
    - pattern: (^|\s+)(PACKSSLW|PACKSSWB|PACKUSDW|PACKUSWB)($|\s)
    - pattern: (^|\s+)(PADDB|PADDL|PADDQ)($|\s)
    - pattern: (^|\s+)(PADDSB|PADDSW|PADDUSB|PADDUSW|PADDW)($|\s)
    - pattern: (^|\s+)(PALIGNR|PAND|PANDN|PAUSE)($|\s)
    - pattern: (^|\s+)(PAVGB|PAVGW|PBLENDVB|PBLENDW)($|\s)
    - pattern: (^|\s+)(PCLMULQDQ|PCMPEQB|PCMPEQL|PCMPEQQ)($|\s)
    - pattern: (^|\s+)(PCMPEQW|PCMPESTRI|PCMPESTRM)($|\s)
    - pattern: (^|\s+)(PCMPGTB|PCMPGTL|PCMPGTQ|PCMPGTW)($|\s)
    - pattern: (^|\s+)(PCMPISTRI|PCMPISTRM|PDEPL|PDEPQ)($|\s)
    - pattern: (^|\s+)(PEXTL|PEXTQ)($|\s)
    - pattern: (^|\s+)(PEXTRB|PEXTRD|PEXTRQ|PEXTRW)($|\s)
    - pattern: (^|\s+)(PHADDD|PHADDSW|PHADDW|PHMINPOSUW)($|\s)
    - pattern: (^|\s+)(PHSUBD|PHSUBSW|PHSUBW)($|\s)
    - pattern: (^|\s+)(PINSRB|PINSRD|PINSRQ|PINSRW)($|\s)
    - pattern: (^|\s+)(PMADDUBSW|PMADDWL)($|\s)
    - pattern: (^|\s+)(PMAXSB|PMAXSD|PMAXSW|PMAXUB|PMAXUD|PMAXUW)($|\s)
    - pattern: (^|\s+)(PMINSB|PMINSD|PMINSW|PMINUB|PMINUD|PMINUW)($|\s)
    - pattern: (^|\s+)(PMOVMSKB|PMOVSXBD|PMOVSXBQ|PMOVSXBW|PMOVSXDQ)($|\s)
    - pattern: (^|\s+)(PMOVSXWD|PMOVSXWQ|PMOVZXBD|PMOVZXBQ|PMOVZXBW)($|\s)
    - pattern: (^|\s+)(PMOVZXDQ|PMOVZXWD|PMOVZXWQ|PMULDQ|PMULHRSW)($|\s)
    - pattern: (^|\s+)(PMULHUW|PMULHW|PMULLD|PMULLW|PMULULQ)($|\s)
    - pattern: (^|\s+)(POPAL|POPAW|POPCNTL|POPCNTQ|POPCNTW)($|\s)
    - pattern: (^|\s+)(POPFL|POPFQ|POPFW)($|\s)
    - pattern: (^|\s+)(POPL|POPQ|POPW|POR)($|\s)
    - pattern: (^|\s+)(PREFETCHNTA|PREFETCHT0|PREFETCHT1|PREFETCHT2)($|\s)
    - pattern: (^|\s+)(PSADBW|PSHUFB|PSHUFD|PSHUFHW|PSHUFL|PSHUFLW|PSHUFW)($|\s)
    - pattern: (^|\s+)(PSIGNB|PSIGND|PSIGNW)($|\s)
    - pattern: (^|\s+)(PSLLL|PSLLO|PSLLQ|PSLLW)($|\s)
    - pattern: (^|\s+)(PSRAL|PSRAW|PSRLL|PSRLO|PSRLQ|PSRLW)($|\s)
    - pattern: (^|\s+)(PSUBB|PSUBL|PSUBQ)($|\s)
    - pattern: (^|\s+)(PSUBSB|PSUBSW|PSUBUSB|PSUBUSW|PSUBW|PTEST)($|\s)
    - pattern: (^|\s+)(PUNPCKHBW|PUNPCKHLQ|PUNPCKHQDQ|PUNPCKHWL|PUNPCKLBW)($|\s)
    - pattern: (^|\s+)(PUNPCKLLQ|PUNPCKLQDQ|PUNPCKLWL)($|\s)
    - pattern: (^|\s+)(PUSHAL|PUSHAW|PUSHFL|PUSHFQ|PUSHFW)($|\s)
    - pattern: (^|\s+)(PUSHL|PUSHQ|PUSHW|PXOR|QUAD)($|\s)
    - pattern: (^|\s+)(RCLB|RCLL|RCLQ|RCLW)($|\s)
    - pattern: (^|\s+)(RCPPS|RCPSS)($|\s)
    - pattern: (^|\s+)(RCRB|RCRL|RCRQ|RCRW)($|\s)
    - pattern: (^|\s+)(RDFSBASEL|RDFSBASEQ|RDGSBASEL|RDGSBASEQ)($|\s)
    - pattern: (^|\s+)(RDMSR|RDPKRU|RDPMC)($|\s)
    - pattern: (^|\s+)(RDRANDL|RDRANDQ|RDRANDW)($|\s)
    - pattern: (^|\s+)(RDSEEDL|RDSEEDQ|RDSEEDW)($|\s)
    - pattern: (^|\s+)(RDTSC|RDTSCP|REP|REPN)($|\s)
    - pattern: (^|\s+)(RETFL|RETFQ|RETFW)($|\s)
    - pattern: (^|\s+)(ROLB|ROLL|ROLQ|ROLW)($|\s)
    - pattern: (^|\s+)(RORB|RORL|RORQ|RORXL|RORXQ)($|\s)
    - pattern: (^|\s+)(ROUNDPD|ROUNDPS|ROUNDSD|ROUNDSS)($|\s)
    - pattern: (^|\s+)(RSM|RSQRTPS|RSQRTSS)($|\s)
    - pattern: (^|\s+)(SAHF|SALB|SALL|SALQ|SALW)($|\s)
    - pattern: (^|\s+)(SARB|SARL|SARQ|SARW)($|\s)
    - pattern: (^|\s+)(SARXL|SARXQ)($|\s)
    - pattern: (^|\s+)(SBBB|SBBL|SBBQ|SBBW)($|\s)
    - pattern: (^|\s+)(SCASB|SCASL|SCASQ|SCASW)($|\s)
    - pattern: (^|\s+)(SETCC|SETCS|SETEQ|SETGE|SETGT)($|\s)
    - pattern: (^|\s+)(SETHI|SETLE|SETLS|SETLT|SETMI)($|\s)
    - pattern: (^|\s+)(SETNE|SETOC|SETOS|SETPC|SETPL)($|\s)
    - pattern: (^|\s+)(SETPS|SFENCE|SGDT)($|\s)
    - pattern: (^|\s+)(SHA1MSG1|SHA1MSG2|SHA1NEXTE|SHA1RNDS4)($|\s)
    - pattern: (^|\s+)(SHA256MSG1|SHA256MSG2|SHA256RNDS2)($|\s)
    - pattern: (^|\s+)(SHLB|SHLL|SHLQ|SHLW|SHLXL|SHLXQ)($|\s)
    - pattern: (^|\s+)(SHRB|SHRL|SHRQ|SHRW)($|\s)
    - pattern: (^|\s+)(SHRXL|SHRXQ|SHUFPD|SHUFPS)($|\s)
    - pattern: (^|\s+)(SIDT|SLDTL|SLDTQ|SLDTW)($|\s)
    - pattern: (^|\s+)(SMSWL|SMSWQ|SMSWW)($|\s)
    - pattern: (^|\s+)(SQRTPD|SQRTPS|SQRTSD|SQRTSS)($|\s)
    - pattern: (^|\s+)(STAC|STC|STD|STI)($|\s)
    - pattern: (^|\s+)(STMXCSR|STOSB|STOSL|STOSQ|STOSW)($|\s)
    - pattern: (^|\s+)(STRL|STRQ|STRW)($|\s)
    - pattern: (^|\s+)(SUBB|SUBPD|SUBPS|SUBQ|SUBL|SUBSD|SUBSS|SWAPGS)($|\s)
    - pattern: (^|\s+)(SYSCALL|SYSENTER|SYSENTER64|SYSEXIT|SYSEXIT64|SYSRET)($|\s)
    - pattern: (^|\s+)(TESTB|TESTL|TESTQ|TESTW)($|\s)
    - pattern: (^|\s+)(TPAUSE|TZCNTL|TZCNTQ|TZCNTW)($|\s)
    - pattern: (^|\s+)(UCOMISD|UCOMISS|UD1|UD2|UMWAIT)($|\s)
    - pattern: (^|\s+)(UNPCKHPD|UNPCKHPS|UNPCKLPD|UNPCKLPS|UMONITOR)($|\s)
    - pattern: (^|\s+)(V4FMADDPS|V4FMADDSS|V4FNMADDPS|V4FNMADDSS)($|\s)
    - pattern: (^|\s+)(VADDPD|VADDPS|VADDSD|VADDSS|VADDSUBPD|VADDSUBPS)($|\s)
    - pattern: (^|\s+)(VAESDEC|VAESDECLAST|VAESENC|VAESENCLAST|VAESIMC|VAESKEYGENASSIST)($|\s)
    - pattern: (^|\s+)(VALIGND|VALIGNQ)($|\s)
    - pattern: (^|\s+)(VANDNPD|VANDNPS|VANDPD|VANDPS)($|\s)
    - pattern: (^|\s+)(VBLENDMPD|VBLENDMPS|VBLENDPD|VBLENDPS|VBLENDVPD|VBLENDVPS)($|\s)
    - pattern: (^|\s+)(VBROADCASTF128|VBROADCASTF32X2|VBROADCASTF32X4|VBROADCASTF32X8|VBROADCASTF64X2)($|\s)
    - pattern: (^|\s+)(VBROADCASTF64X4|VBROADCASTI128|VBROADCASTI32X2|VBROADCASTI32X4|VBROADCASTI32X8)($|\s)
    - pattern: (^|\s+)(VBROADCASTI64X2|VBROADCASTI64X4|VBROADCASTSD|VBROADCASTSS)($|\s)
    - pattern: (^|\s+)(VCMPPD|VCMPPS|VCMPSD|VCMPSS)($|\s)
    - pattern: (^|\s+)(VCOMISD|VCOMISS|VCOMPRESSPD|VCOMPRESSPS)($|\s)
    - pattern: (^|\s+)(VCVTDQ2PD|VCVTDQ2PS|VCVTPD2DQ|VCVTPD2DQX|VCVTPD2DQY)($|\s)
    - pattern: (^|\s+)(VCVTPD2PS|VCVTPD2PSX|VCVTPD2PSY|VCVTPD2QQ|VCVTPD2UDQ)($|\s)
    - pattern: (^|\s+)(VCVTPD2UDQX|VCVTPD2UDQY|VCVTPD2UQQ|VCVTPH2PS)($|\s)
    - pattern: (^|\s+)(VCVTPS2DQ|VCVTPS2PD|VCVTPS2PH|VCVTPS2QQ|VCVTPS2UDQ|VCVTPS2UQQ)($|\s)
    - pattern: (^|\s+)(VCVTQQ2PD|VCVTQQ2PS|VCVTQQ2PSX|VCVTQQ2PSY)($|\s)
    - pattern: (^|\s+)(VCVTSD2SI|VCVTSD2SIQ|VCVTSD2SS|VCVTSD2USI|VCVTSD2USIL|VCVTSD2USIQ)($|\s)
    - pattern: (^|\s+)(VCVTSI2SDL|VCVTSI2SDQ|VCVTSI2SSL|VCVTSI2SSQ)($|\s)
    - pattern: (^|\s+)(VCVTSS2SD|VCVTSS2SI|VCVTSS2SIQ|VCVTSS2USI|VCVTSS2USIL|VCVTSS2USIQ)($|\s)
    - pattern: (^|\s+)(VCVTTPD2DQ|VCVTTPD2DQX|VCVTTPD2DQY|VCVTTPD2QQ)($|\s)
    - pattern: (^|\s+)(VCVTTPD2UDQ|VCVTTPD2UDQX|VCVTTPD2UDQY|VCVTTPD2UQQ)($|\s)
    - pattern: (^|\s+)(VCVTTPS2DQ|VCVTTPS2QQ|VCVTTPS2UDQ|VCVTTPS2UQQ)($|\s)
    - pattern: (^|\s+)(VCVTTSD2SI|VCVTTSD2SIQ|VCVTTSD2USI|VCVTTSD2USIL|VCVTTSD2USIQ)($|\s)
    - pattern: (^|\s+)(VCVTTSS2SI|VCVTTSS2SIQ|VCVTTSS2USI|VCVTTSS2USIL|VCVTTSS2USIQ)($|\s)
    - pattern: (^|\s+)(VCVTUDQ2PD|VCVTUDQ2PS|VCVTUQQ2PD|VCVTUQQ2PS|VCVTUQQ2PSX|VCVTUQQ2PSY)($|\s)
    - pattern: (^|\s+)(VCVTUSI2SD|VCVTUSI2SDL|VCVTUSI2SDQ)($|\s)
    - pattern: (^|\s+)(VCVTUSI2SS|VCVTUSI2SSL|VCVTUSI2SSQ|VDBPSADBW)($|\s)
    - pattern: (^|\s+)(VDIVPD|VDIVPS|VDIVSD|VDIVSS)($|\s)
    - pattern: (^|\s+)(VDPPD|VDPPS|VERR|VERW)($|\s)
    - pattern: (^|\s+)(VEXP2PD|VEXP2PS|VEXPANDPD|VEXPANDPS)($|\s)
    - pattern: (^|\s+)(VEXTRACTF128|VEXTRACTF32X4|VEXTRACTF32X8|VEXTRACTF64X2|VEXTRACTF64X4|VEXTRACTI128)($|\s)
    - pattern: (^|\s+)(VEXTRACTI32X4|VEXTRACTI32X8|VEXTRACTI64X2|VEXTRACTI64X4|VEXTRACTPS)($|\s)
    - pattern: (^|\s+)(VFIXUPIMMPD|VFIXUPIMMPS|VFIXUPIMMSD|VFIXUPIMMSS)($|\s)
    - pattern: (^|\s+)(VFMADD132PD|VFMADD132PS|VFMADD132SD|VFMADD132SS)($|\s)
    - pattern: (^|\s+)(VFMADD213PD|VFMADD213PS|VFMADD213SD|VFMADD213SS)($|\s)
    - pattern: (^|\s+)(VFMADD231PD|VFMADD231PS|VFMADD231SD|VFMADD231SS)($|\s)
    - pattern: (^|\s+)(VFMADDSUB132PD|VFMADDSUB132PS|VFMADDSUB213PD|VFMADDSUB213PS|VFMADDSUB231PD|VFMADDSUB231PS)($|\s)
    - pattern: (^|\s+)(VFMSUB132PD|VFMSUB132PS|VFMSUB132SD|VFMSUB132SS)($|\s)
    - pattern: (^|\s+)(VFMSUB213PD|VFMSUB213PS|VFMSUB213SD|VFMSUB213SS)($|\s)
    - pattern: (^|\s+)(VFMSUB231PD|VFMSUB231PS|VFMSUB231SD|VFMSUB231SS)($|\s)
    - pattern: (^|\s+)(VFMSUBADD132PD|VFMSUBADD132PS|VFMSUBADD213PD|VFMSUBADD213PS|VFMSUBADD231PD|VFMSUBADD231PS)($|\s)
    - pattern: (^|\s+)(VFNMADD132PD|VFNMADD132PS|VFNMADD132SD|VFNMADD132SS)($|\s)
    - pattern: (^|\s+)(VFNMADD213PD|VFNMADD213PS|VFNMADD213SD|VFNMADD213SS)($|\s)
    - pattern: (^|\s+)(VFNMADD231PD|VFNMADD231PS|VFNMADD231SD|VFNMADD231SS)($|\s)
    - pattern: (^|\s+)(VFNMSUB132PD|VFNMSUB132PS|VFNMSUB132SD|VFNMSUB132SS)($|\s)
    - pattern: (^|\s+)(VFNMSUB213PD|VFNMSUB213PS|VFNMSUB213SD|VFNMSUB213SS)($|\s)
    - pattern: (^|\s+)(VFNMSUB231PD|VFNMSUB231PS|VFNMSUB231SD|VFNMSUB231SS)($|\s)
    - pattern: (^|\s+)(VFPCLASSPD|VFPCLASSPDX|VFPCLASSPDY|VFPCLASSPDZ)($|\s)
    - pattern: (^|\s+)(VFPCLASSPS|VFPCLASSPSX|VFPCLASSPSY|VFPCLASSPSZ)($|\s)
    - pattern: (^|\s+)(VFPCLASSSD|VFPCLASSSS|VGATHERDPD|VGATHERDPS)($|\s)
    - pattern: (^|\s+)(VGATHERPF0DPD|VGATHERPF0DPS|VGATHERPF0QPD|VGATHERPF0QPS)($|\s)
    - pattern: (^|\s+)(VGATHERPF1DPD|VGATHERPF1DPS|VGATHERPF1QPD|VGATHERPF1QPS)($|\s)
    - pattern: (^|\s+)(VGATHERQPD|VGATHERQPS)($|\s)
    - pattern: (^|\s+)(VGETEXPPD|VGETEXPPS|VGETEXPSD|VGETEXPSS)($|\s)
    - pattern: (^|\s+)(VGETMANTPD|VGETMANTPS|VGETMANTSD|VGETMANTSS)($|\s)
    - pattern: (^|\s+)(VGF2P8AFFINEINVQB|VGF2P8AFFINEQB|VGF2P8MULB)($|\s)
    - pattern: (^|\s+)(VHADDPD|VHADDPS|VHSUBPD|VHSUBPS)($|\s)
    - pattern: (^|\s+)(VINSERTF128|VINSERTF32X4|VINSERTF32X8|VINSERTF64X2|VINSERTF64X4)($|\s)
    - pattern: (^|\s+)(VINSERTI128|VINSERTI32X4|VINSERTI32X8|VINSERTI64X2|VINSERTI64X4)($|\s)
    - pattern: (^|\s+)(VINSERTPS|VLDDQU|VLDMXCSR)($|\s)
    - pattern: (^|\s+)(VMASKMOVDQU|VMASKMOVPD|VMASKMOVPS)($|\s)
    - pattern: (^|\s+)(VMAXPD|VMAXPS|VMAXSD|VMAXSS)($|\s)
    - pattern: (^|\s+)(VMINPD|VMINPS|VMINSD|VMINSS)($|\s)
    - pattern: (^|\s+)(VMOVAPD|VMOVAPS|VMOVDDUP)($|\s)
    - pattern: (^|\s+)(VMOVDQA|VMOVDQA32|VMOVDQA64)($|\s)
    - pattern: (^|\s+)(VMOVDQU|VMOVDQU16|VMOVDQU32|VMOVDQU64|VMOVDQU8)($|\s)
    - pattern: (^|\s+)(VMOVHLPS|VMOVHPD|VMOVHPS)($|\s)
    - pattern: (^|\s+)(VMOVLHPS|VMOVLPD|VMOVLPS)($|\s)
    - pattern: (^|\s+)(VMOVMSKPD|VMOVMSKPS)($|\s)
    - pattern: (^|\s+)(VMOVNTDQ|VMOVNTDQA|VMOVNTPD|VMOVNTPS)($|\s)
    - pattern: (^|\s+)(VMOVSD|VMOVSHDUP|VMOVSLDUP|VMOVSS)($|\s)
    - pattern: (^|\s+)(VMOVUPD|VMOVUPS|VMPSADBW)($|\s)
    - pattern: (^|\s+)(VMULPD|VMULPS|VMULSD|VMULSS)($|\s)
    - pattern: (^|\s+)(VORPD|VORPS|VP4DPWSSD|VP4DPWSSDS)($|\s)
    - pattern: (^|\s+)(VPABSB|VPABSD|VPABSQ|VPABSW)($|\s)
    - pattern: (^|\s+)(VPACKSSDW|VPACKSSWB|VPACKUSDW|VPACKUSWB)($|\s)
    - pattern: (^|\s+)(VPADDB|VPADDD|VPADDQ)($|\s)
    - pattern: (^|\s+)(VPADDSB|VPADDSW|VPADDUSB|VPADDUSW|VPADDW)($|\s)
    - pattern: (^|\s+)(VPALIGNR)($|\s)
    - pattern: (^|\s+)(VPAND|VPANDD|VPANDN|VPANDND|VPANDNQ|VPANDQ)($|\s)
    - pattern: (^|\s+)(VPAVGB|VPAVGW)($|\s)
    - pattern: (^|\s+)(VPBLENDD|VPBLENDMB|VPBLENDMD|VPBLENDMQ|VPBLENDMW|VPBLENDVB|VPBLENDW)($|\s)
    - pattern: (^|\s+)(VPBROADCASTB|VPBROADCASTD)($|\s)
    - pattern: (^|\s+)(VPBROADCASTMB2Q|VPBROADCASTMW2D)($|\s)
    - pattern: (^|\s+)(VPBROADCASTQ|VPBROADCASTW|VPCLMULQDQ)($|\s)
    - pattern: (^|\s+)(VPCMPB|VPCMPD)($|\s)
    - pattern: (^|\s+)(VPCMPEQB|VPCMPEQD|VPCMPEQQ|VPCMPEQW)($|\s)
    - pattern: (^|\s+)(VPCMPESTRI|VPCMPESTRM)($|\s)
    - pattern: (^|\s+)(VPCMPGTB|VPCMPGTD|VPCMPGTQ|VPCMPGTW)($|\s)
    - pattern: (^|\s+)(VPCMPISTRI|VPCMPISTRM|VPCMPQ)($|\s)
    - pattern: (^|\s+)(VPCMPUB|VPCMPUD|VPCMPUQ|VPCMPUW|VPCMPW)($|\s)
    - pattern: (^|\s+)(VPCOMPRESSB|VPCOMPRESSD|VPCOMPRESSQ|VPCOMPRESSW|VPCONFLICTD|VPCONFLICTQ)($|\s)
    - pattern: (^|\s+)(VPDPBUSD|VPDPBUSDS|VPDPWSSD|VPDPWSSDS)($|\s)
    - pattern: (^|\s+)(VPERM2F128|VPERM2I128|VPERMB|VPERMD)($|\s)
    - pattern: (^|\s+)(VPERMI2B|VPERMI2D|VPERMI2PD|VPERMI2PS)($|\s)
    - pattern: (^|\s+)(VPERMI2Q|VPERMI2W|VPERMILPD|VPERMILPS)($|\s)
    - pattern: (^|\s+)(VPERMPD|VPERMPS|VPERMQ)($|\s)
    - pattern: (^|\s+)(VPERMT2B|VPERMT2D|VPERMT2PD|VPERMT2PS)($|\s)
    - pattern: (^|\s+)(VPERMT2Q|VPERMT2W|VPERMW)($|\s)
    - pattern: (^|\s+)(VPEXPANDB|VPEXPANDD|VPEXPANDQ|VPEXPANDW)($|\s)
    - pattern: (^|\s+)(VPEXTRB|VPEXTRD|VPEXTRQ|VPEXTRW)($|\s)
    - pattern: (^|\s+)(VPGATHERDD|VPGATHERDQ|VPGATHERQD|VPGATHERQQ)($|\s)
    - pattern: (^|\s+)(VPHADDD|VPHADDSW|VPHADDW|VPHMINPOSUW)($|\s)
    - pattern: (^|\s+)(VPHSUBD|VPHSUBSW|VPHSUBW)($|\s)
    - pattern: (^|\s+)(VPINSRB|VPINSRD|VPINSRQ|VPINSRW)($|\s)
    - pattern: (^|\s+)(VPLZCNTD|VPLZCNTQ)($|\s)
    - pattern: (^|\s+)(VPMADD52HUQ|VPMADD52LUQ|VPMADDUBSW|VPMADDWD)($|\s)
    - pattern: (^|\s+)(VPMASKMOVD|VPMASKMOVQ)($|\s)
    - pattern: (^|\s+)(VPMAXSB|VPMAXSD|VPMAXSQ|VPMAXSW)($|\s)
    - pattern: (^|\s+)(VPMAXUB|VPMAXUD|VPMAXUQ|VPMAXUW)($|\s)
    - pattern: (^|\s+)(VPMINSB|VPMINSD|VPMINSQ|VPMINSW)($|\s)
    - pattern: (^|\s+)(VPMINUB|VPMINUD|VPMINUQ|VPMINUW)($|\s)
    - pattern: (^|\s+)(VPMOVB2M|VPMOVD2M|VPMOVDB|VPMOVDW)($|\s)
    - pattern: (^|\s+)(VPMOVM2B|VPMOVM2D|VPMOVM2Q|VPMOVM2W|VPMOVMSKB)($|\s)
    - pattern: (^|\s+)(VPMOVQ2M|VPMOVQB|VPMOVQD|VPMOVQW)($|\s)
    - pattern: (^|\s+)(VPMOVSDB|VPMOVSDW|VPMOVSQB|VPMOVSQD|VPMOVSQW|VPMOVSWB)($|\s)
    - pattern: (^|\s+)(VPMOVSXBD|VPMOVSXBQ|VPMOVSXBW|VPMOVSXDQ|VPMOVSXWD|VPMOVSXWQ)($|\s)
    - pattern: (^|\s+)(VPMOVUSDB|VPMOVUSDW|VPMOVUSQB|VPMOVUSQD|VPMOVUSQW|VPMOVUSWB)($|\s)
    - pattern: (^|\s+)(VPMOVW2M|VPMOVWB)($|\s)
    - pattern: (^|\s+)(VPMOVZXBD|VPMOVZXBQ|VPMOVZXBW|VPMOVZXDQ|VPMOVZXWD|VPMOVZXWQ)($|\s)
    - pattern: (^|\s+)(VPMULDQ|VPMULHRSW|VPMULHUW|VPMULHW)($|\s)
    - pattern: (^|\s+)(VPMULLD|VPMULLQ|VPMULLW)($|\s)
    - pattern: (^|\s+)(VPMULTISHIFTQB|VPMULUDQ)($|\s)
    - pattern: (^|\s+)(VPOPCNTB|VPOPCNTD|VPOPCNTQ|VPOPCNTW)($|\s)
    - pattern: (^|\s+)(VPOR|VPORD|VPORQ)($|\s)
    - pattern: (^|\s+)(VPROLD|VPROLQ|VPROLVD|VPROLVQ)($|\s)
    - pattern: (^|\s+)(VPRORD|VPRORQ|VPRORVD|VPRORVQ|VPSADBW)($|\s)
    - pattern: (^|\s+)(VPSCATTERDD|VPSCATTERDQ|VPSCATTERQD|VPSCATTERQQ)($|\s)
    - pattern: (^|\s+)(VPSHLDD|VPSHLDQ|VPSHLDVD|VPSHLDVQ|VPSHLDVW|VPSHLDW)($|\s)
    - pattern: (^|\s+)(VPSHRDD|VPSHRDQ|VPSHRDVD|VPSHRDVQ|VPSHRDVW|VPSHRDW)($|\s)
    - pattern: (^|\s+)(VPSHUFB|VPSHUFBITQMB|VPSHUFD|VPSHUFHW|VPSHUFLW)($|\s)
    - pattern: (^|\s+)(VPSIGNB|VPSIGND|VPSIGNW)($|\s)
    - pattern: (^|\s+)(VPSLLD|VPSLLDQ|VPSLLQ|VPSLLVD|VPSLLVQ|VPSLLVW|VPSLLW)($|\s)
    - pattern: (^|\s+)(VPSRAD|VPSRAQ|VPSRAVD|VPSRAVQ|VPSRAVW|VPSRAW)($|\s)
    - pattern: (^|\s+)(VPSRLD|VPSRLDQ|VPSRLQ|VPSRLVD|VPSRLVQ|VPSRLVW|VPSRLW)($|\s)
    - pattern: (^|\s+)(VPSUBB|VPSUBD|VPSUBQ|VPSUBSB|VPSUBSW|VPSUBUSB|VPSUBUSW|VPSUBW)($|\s)
    - pattern: (^|\s+)(VPTERNLOGD|VPTERNLOGQ)($|\s)
    - pattern: (^|\s+)(VPTEST|VPTESTMB|VPTESTMD|VPTESTMQ|VPTESTMW)($|\s)
    - pattern: (^|\s+)(VPTESTNMB|VPTESTNMD|VPTESTNMQ|VPTESTNMW)($|\s)
    - pattern: (^|\s+)(VPUNPCKHBW|VPUNPCKHDQ|VPUNPCKHQDQ|VPUNPCKHWD)($|\s)
    - pattern: (^|\s+)(VPUNPCKLBW|VPUNPCKLDQ|VPUNPCKLQDQ|VPUNPCKLWD)($|\s)
    - pattern: (^|\s+)(VPXOR|VPXORD|VPXORQ)($|\s)
    - pattern: (^|\s+)(VRANGEPD|VRANGEPS|VRANGESD|VRANGESS)($|\s)
    - pattern: (^|\s+)(VRCP14PD|VRCP14PS|VRCP14SD|VRCP14SS)($|\s)
    - pattern: (^|\s+)(VRCP28PD|VRCP28PS|VRCP28SD|VRCP28SS)($|\s)
    - pattern: (^|\s+)(VRCPPS|VRCPSS)($|\s)
    - pattern: (^|\s+)(VREDUCEPD|VREDUCEPS|VREDUCESD|VREDUCESS)($|\s)
    - pattern: (^|\s+)(VRNDSCALEPD|VRNDSCALEPS|VRNDSCALESD|VRNDSCALESS)($|\s)
    - pattern: (^|\s+)(VROUNDPD|VROUNDPS|VROUNDSD|VROUNDSS)($|\s)
    - pattern: (^|\s+)(VRSQRT14PD|VRSQRT14PS|VRSQRT14SD|VRSQRT14SS)($|\s)
    - pattern: (^|\s+)(VRSQRT28PD|VRSQRT28PS|VRSQRT28SD|VRSQRT28SS)($|\s)
    - pattern: (^|\s+)(VRSQRTPS|VRSQRTSS)($|\s)
    - pattern: (^|\s+)(VSCALEFPD|VSCALEFPS|VSCALEFSD|VSCALEFSS)($|\s)
    - pattern: (^|\s+)(VSCATTERDPD|VSCATTERDPS)($|\s)
    - pattern: (^|\s+)(VSCATTERPF0DPD|VSCATTERPF0DPS|VSCATTERPF0QPD|VSCATTERPF0QPS)($|\s)
    - pattern: (^|\s+)(VSCATTERPF1DPD|VSCATTERPF1DPS|VSCATTERPF1QPD|VSCATTERPF1QPS)($|\s)
    - pattern: (^|\s+)(VSCATTERQPD|VSCATTERQPS)($|\s)
    - pattern: (^|\s+)(VSHUFF32X4|VSHUFF64X2|VSHUFI32X4|VSHUFI64X2)($|\s)
    - pattern: (^|\s+)(VSHUFPD|VSHUFPS)($|\s)
    - pattern: (^|\s+)(VSQRTPD|VSQRTPS|VSQRTSD|VSQRTSS)($|\s)
    - pattern: (^|\s+)(VSTMXCSR)($|\s)
    - pattern: (^|\s+)(VSUBPD|VSUBPS|VSUBSD|VSUBSS)($|\s)
    - pattern: (^|\s+)(VTESTPD|VTESTPS|VUCOMISD|VUCOMISS)($|\s)
    - pattern: (^|\s+)(VUNPCKHPD|VUNPCKHPS|VUNPCKLPD|VUNPCKLPS)($|\s)
    - pattern: (^|\s+)(VXORPD|VXORPS|VZEROALL|VZEROUPPER)($|\s)
    - pattern: (^|\s+)(WAIT|WBINVD|WRFSBASEL|WRFSBASEQ|WRGSBASEL|WRGSBASEQ)($|\s)
    - pattern: (^|\s+)(WRMSR|WRPKRU|XABORT|XACQUIRE)($|\s)
    - pattern: (^|\s+)(XADDB|XADDL|XADDQ|XADDW)($|\s)
    - pattern: (^|\s+)(XBEGIN)($|\s)
    - pattern: (^|\s+)(XCHGB|XCHGL|XCHGQ|XCHGW)($|\s)
    - pattern: (^|\s+)(XEND|XGETBV|XLAT)($|\s)
    - pattern: (^|\s+)(XORB|XORL)($|\s)
    - pattern: (^|\s+)(XORPD|XORPS)($|\s)
    - pattern: (^|\s+)(XORQ|XORW)($|\s)
    - pattern: (^|\s+)(XRELEASE)($|\s)
    - pattern: (^|\s+)(XRSTOR|XRSTOR64|XRSTORS|XRSTORS64)($|\s)
    - pattern: (^|\s+)(XSAVE|XSAVE64|XSAVEC|XSAVEC64|XSAVEOPT|XSAVEOPT64|XSAVES|XSAVES64)($|\s)
    - pattern: (^|\s+)(XSETBV|XTEST)($|\s)

# Intrinsics available with plan9_go on arm, arm64, aarch64
PLAN9_GOLANG_AARCH64:
    - pattern: (^|\s+)(BEQ|BNE|BLT|BLE|BGT|BGE)($|\s)
    - pattern: (^|\s+)(MOVBU|MOVH|MOVHU|MOVWU|MOVF|MOVD)($|\s)
    - pattern: (^|\s+)(UMULH)($|\s)
    - pattern: (^|\s+)(FADDS|FSUBS|FMULS)($|\s)
    - pattern: (^|\s+)(FDIVS)($|\s)
    - pattern: (^|\s+)(FCVTSD|FCVTDS)($|\s)
    - pattern: (^|\s+)(FSQRTS|FSQRTD)($|\s)
    - pattern: (^|\s+)(AND|BIC)($|\s)
    - pattern: (^|\s+)(SLL|SRL|SRA)($|\s)
    - pattern: (^|\s+)(NOOP)($|\s)
    - pattern: (^|\s+)(RSB|RSC|TEQ)($|\s)
    - pattern: (^|\s+)(MOVWD|MOVWF|MOVDW|MOVFW|MOVFD|MOVDF)($|\s)
    - pattern: (^|\s+)(CMPF|CMPD)($|\s)
    - pattern: (^|\s+)(ADDF|ADDD)($|\s)
    - pattern: (^|\s+)(SUBF|SUBD)($|\s)
    - pattern: (^|\s+)(MULF|MULD)($|\s)
    - pattern: (^|\s+)(NMULF|NMULD)($|\s)
    - pattern: (^|\s+)(MULAF|MULAD)($|\s)
    - pattern: (^|\s+)(NMULAF|NMULAD)($|\s)
    - pattern: (^|\s+)(MULSF)($|\s)
    - pattern: (^|\s+)(NMULSF|NMULSD)($|\s)
    - pattern: (^|\s+)(FMULAF|FMULAD|FNMULAF|FNMULAD)($|\s)
    - pattern: (^|\s+)(FMULSF|FMULSD|FNMULSF|FNMULSD)($|\s)
    - pattern: (^|\s+)(DIVF|DIVD)($|\s)
    - pattern: (^|\s+)(SQRTF|SQRTD)($|\s)
    - pattern: (^|\s+)(ABSF|ABSD)($|\s)
    - pattern: (^|\s+)(NEGF|NEGD)($|\s)
    - pattern: (^|\s+)(MULU|DIVU|MMUL|DIV)($|\s)
    - pattern: (^|\s+)(MOD|MODU)($|\s)
    - pattern: (^|\s+)(DIVHW|DIVUHW)($|\s)
    - pattern: (^|\s+)(MOVBS|MOVHS|MOVM)($|\s)
    - pattern: (^|\s+)(SWPBU|RFE|SWI)($|\s)
    - pattern: (^|\s+)(MULA|MULS|MMULA|MMULS)($|\s)
    - pattern: (^|\s+)(MULAL|MULLU|MULALU)($|\s)
    - pattern: (^|\s+)(BX|BXRET)($|\s)
    - pattern: (^|\s+)(LDREX|STREX|LDREXD|STREXD)($|\s)
    - pattern: (^|\s+)(PLD)($|\s)
    - pattern: (^|\s+)(REVSH)($|\s)
    - pattern: (^|\s+)(XTAB|XTAH|XTABU|XTAHU)($|\s)
    - pattern: (^|\s+)(BFX|BFXU|BFC)($|\s)
    - pattern: (^|\s+)(MULWT|MULWB|MULBB)($|\s)
    - pattern: (^|\s+)(MULAWT|MULAWB|MULABB)($|\s)
    - pattern: (^|\s+)(MRC)($|\s)
    - pattern: (^|\s+)(ADC|ADCS|ADCSW)($|\s)
    - pattern: (^|\s+)(ADD|ADDS|ADDSW)($|\s)
    - pattern: (^|\s+)(ADR|ADRP)($|\s)
    - pattern: (^|\s+)(ANDS|ANDSW)($|\s)
    - pattern: (^|\s+)(ASR|ASRW)($|\s)
    - pattern: (^|\s+)(AT)($|\s)
    - pattern: (^|\s+)(BFI|BFIW)($|\s)
    - pattern: (^|\s+)(BFM|BFMW)($|\s)
    - pattern: (^|\s+)(BFXIL|BFXILW)($|\s)
    - pattern: (^|\s+)(BICS|BICSW|BICW)($|\s)
    - pattern: (^|\s+)(BRK)($|\s)
    - pattern: (^|\s+)(CBNZ|CBNZW)($|\s)
    - pattern: (^|\s+)(CBZ|CBZW)($|\s)
    - pattern: (^|\s+)(CCMN|CCMNW)($|\s)
    - pattern: (^|\s+)(CCMP|CCMPW)($|\s)
    - pattern: (^|\s+)(CINC|CINCW)($|\s)
    - pattern: (^|\s+)(CINV|CINVW)($|\s)
    - pattern: (^|\s+)(CLREX|CLS|CLSW|CLZ|CLZW)($|\s)
    - pattern: (^|\s+)(CMN|CMNW|CMP)($|\s)
    - pattern: (^|\s+)(CNEG|CNEGW)($|\s)
    - pattern: (^|\s+)(CRC32CB|CRC32CH|CRC32CW|CRC32CX|CRC32H|CRC32X)($|\s)
    - pattern: (^|\s+)(CSEL|CSELW|CSET|CSETM|CSETMW|CSETW)($|\s)
    - pattern: (^|\s+)(CSINC|CSINCW|CSINV|CSINVW|CSNEG|CSNEGW)($|\s)
    - pattern: (^|\s+)(DC|DCPS1|DCPS2|DCPS3)($|\s)
    - pattern: (^|\s+)(DMB)($|\s)
    - pattern: (^|\s+)(DRPS)($|\s)
    - pattern: (^|\s+)(DSB)($|\s)
    - pattern: (^|\s+)(EON|EONW|EOR|EORW)($|\s)
    - pattern: (^|\s+)(ERET)($|\s)
    - pattern: (^|\s+)(EXTR|EXTRW)($|\s)
    - pattern: (^|\s+)(HINT|HVC)($|\s)
    - pattern: (^|\s+)(IC|ISB)($|\s)
    - pattern: (^|\s+)(LDADDAB|LDADDAD|LDADDAH|LDADDAW|LDADDALB|LDADDALD|LDADDALH|LDADDALW)($|\s)
    - pattern: (^|\s+)(LDADDB|LDADDD|LDADDH|LDADDW|LDADDLB|LDADDLD|LDADDLH|LDADDLW)($|\s)
    - pattern: (^|\s+)(LDAR|LDARB|LDARH|LDARW)($|\s)
    - pattern: (^|\s+)(LDAXP|LDAXPW|LDAXR|LDAXRB|LDAXRH|LDAXRW)($|\s)
    - pattern: (^|\s+)(LDCLRAB|LDCLRAD|LDCLRAH|LDCLRAW)($|\s)
    - pattern: (^|\s+)(LDCLRALB|LDCLRALD|LDCLRALH|LDCLRALW)($|\s)
    - pattern: (^|\s+)(LDCLRB|LDCLRD|LDCLRH|LDCLRW)($|\s)
    - pattern: (^|\s+)(LDCLRLB|LDCLRLD|LDCLRLH|LDCLRLW)($|\s)
    - pattern: (^|\s+)(LDEORAB|LDEORAD|LDEORAH|LDEORAW)($|\s)
    - pattern: (^|\s+)(LDEORALB|LDEORALD|LDEORALH|LDEORALW)($|\s)
    - pattern: (^|\s+)(LDEORB|LDEORD|LDEORH|LDEORW)($|\s)
    - pattern: (^|\s+)(LDEORLB|LDEORLD|LDEORLH|LDEORLW)($|\s)
    - pattern: (^|\s+)(LDORAB|LDORAD|LDORAH|LDORAW)($|\s)
    - pattern: (^|\s+)(LDORALB|LDORALD|LDORALH|LDORALW)($|\s)
    - pattern: (^|\s+)(LDORB|LDORD|LDORH|LDORW)($|\s)
    - pattern: (^|\s+)(LDORLB|LDORLD|LDORLH|LDORLW)($|\s)
    - pattern: (^|\s+)(LDP|LDPW|LDPSW)($|\s)
    - pattern: (^|\s+)(LDXR|LDXRB|LDXRH|LDXRW|LDXP|LDXPW)($|\s)
    - pattern: (^|\s+)(LSL|LSR|LSRW)($|\s)
    - pattern: (^|\s+)(MADD|MADDW|MNEG|MNEGW)($|\s)
    - pattern: (^|\s+)(MOVK|MOVKW|MOVN|MOVNW|MOVZ|MOVZW)($|\s)
    - pattern: (^|\s+)(MRS|MSR|MSUB|MSUBW)($|\s)
    - pattern: (^|\s+)(MUL|MVN|MVNW)($|\s)
    - pattern: (^|\s+)(NEG|NEGS|NEGSW)($|\s)
    - pattern: (^|\s+)(NGC|NGCS|NGCSW|NGCW)($|\s)
    - pattern: (^|\s+)(ORN|ORNW|ORR|ORRW)($|\s)
    - pattern: (^|\s+)(PRFM|PRFUM|RBIT|RBITW)($|\s)
    - pattern: (^|\s+)(REM|REMW|REV|REV16|REV16W|REV32|REVW)($|\s)
    - pattern: (^|\s+)(ROR)($|\s)
    - pattern: (^|\s+)(SBC|SBCS|SBCSW|SBCW)($|\s)
    - pattern: (^|\s+)(SBFIZ|SBFIZW|SBFM|SBFMW|SBFX|SBFXW)($|\s)
    - pattern: (^|\s+)(SDIV|SDIVW|SEV|SEVL)($|\s)
    - pattern: (^|\s+)(SMADDL|SMC|SMNEGL|SMSUBL|SMULH|SMULL)($|\s)
    - pattern: (^|\s+)(STXR|STXRB|STXRH|STXP|STXPW|STXRW)($|\s)
    - pattern: (^|\s+)(STLP|STLPW|STLR|STLRB|STLRH|STLRW)($|\s)
    - pattern: (^|\s+)(STLXP|STLXPW|STLXR|STLXRB|STLXRH|STLXRW)($|\s)
    - pattern: (^|\s+)(STP|STPW)($|\s)
    - pattern: (^|\s+)(SUB|SUBS|SUBSW|SVC)($|\s)
    - pattern: (^|\s+)(SXTB|SXTBW|SXTH|SXTHW|SXTW)($|\s)
    - pattern: (^|\s+)(SYS|SYSL)($|\s)
    - pattern: (^|\s+)(TBNZ|TBZ|TLBI|TST|TSTW)($|\s)
    - pattern: (^|\s+)(UBFIZ|UBFIZW|UBFM|UBFMW|UBFX|UBFXW)($|\s)
    - pattern: (^|\s+)(UDIV|UDIVW)($|\s)
    - pattern: (^|\s+)(UMADDL|UMNEGL|UMSUBL|UMULL)($|\s)
    - pattern: (^|\s+)(UREM|UREMW)($|\s)
    - pattern: (^|\s+)(UXTB|UXTH|UXTW|UXTBW|UXTHW)($|\s)
    - pattern: (^|\s+)(WFE|WFI)($|\s)
    - pattern: (^|\s+)(YIELD)($|\s)
    - pattern: (^|\s+)(MOVNP|MOVNPW|MOVP|MOVPD|MOVPQ|MOVPS|MOVPSW|MOVPW)($|\s)
    - pattern: (^|\s+)(SWPAD|SWPAW|SWPAH|SWPAB)($|\s)
    - pattern: (^|\s+)(SWPALD|SWPALW|SWPALH|SWPALB)($|\s)
    - pattern: (^|\s+)(SWPD|SWPW|SWPH|SWPB)($|\s)
    - pattern: (^|\s+)(SWPLD|SWPLW|SWPLH|SWPLB)($|\s)
    - pattern: (^|\s+)(CASD|CASW|CASH|CASB)($|\s)
    - pattern: (^|\s+)(CASAD|CASAW|CASLD|CASLW)($|\s)
    - pattern: (^|\s+)(CASALD|CASALW|CASALH|CASALB)($|\s)
    - pattern: (^|\s+)(CASPD|CASPW)($|\s)
    - pattern: (^|\s+)(BCS|BHS|BCC|BLO|BMI)($|\s)
    - pattern: (^|\s+)(BPL|BVS|BVC|BHI|BLS)($|\s)
    - pattern: (^|\s+)(FABSD|FABSS)($|\s)
    - pattern: (^|\s+)(FCCMPD|FCCMPED|FCCMPS|FCCMPES)($|\s)
    - pattern: (^|\s+)(FCMPD|FCMPED|FCMPES|FCMPS)($|\s)
    - pattern: (^|\s+)(FCVTZSD|FCVTZSDW|FCVTZSS|FCVTZSSW)($|\s)
    - pattern: (^|\s+)(FCVTZUD|FCVTZUDW|FCVTZUS|FCVTZUSW)($|\s)
    - pattern: (^|\s+)(FLDPD|FLDPS)($|\s)
    - pattern: (^|\s+)(FMOVQ|FMOVS)($|\s)
    - pattern: (^|\s+)(VMOVS)($|\s)
    - pattern: (^|\s+)(FNEGD|FNEGS)($|\s)
    - pattern: (^|\s+)(FSTPD|FSTPS)($|\s)
    - pattern: (^|\s+)(SCVTFD|SCVTFS|SCVTFWD|SCVTFWS)($|\s)
    - pattern: (^|\s+)(UCVTFD|UCVTFS|UCVTFWD|UCVTFWS)($|\s)
    - pattern: (^|\s+)(DWORD)($|\s)
    - pattern: (^|\s+)(FCSELS|FCSELD)($|\s)
    - pattern: (^|\s+)(FMAXS|FMINS|FMAXD|FMIND)($|\s)
    - pattern: (^|\s+)(FMAXNMS|FMAXNMD)($|\s)
    - pattern: (^|\s+)(FNMULS|FNMULD)($|\s)
    - pattern: (^|\s+)(FRINTNS|FRINTND|FRINTPS|FRINTPD)($|\s)
    - pattern: (^|\s+)(FRINTMS|FRINTMD|FRINTZS|FRINTZD)($|\s)
    - pattern: (^|\s+)(FRINTAS|FRINTAD|FRINTXS|FRINTXD)($|\s)
    - pattern: (^|\s+)(FRINTIS|FRINTID)($|\s)
    - pattern: (^|\s+)(FMADDS|FMADDD|FMSUBS|FMSUBD)($|\s)
    - pattern: (^|\s+)(FNMADDS|FNMADDD|FNMSUBS|FNMSUBD)($|\s)
    - pattern: (^|\s+)(FMINNMS|FMINNMD)($|\s)
    - pattern: (^|\s+)(FCVTDH|FCVTHS|FCVTHD|FCVTSH)($|\s)
    - pattern: (^|\s+)(AESD|AESE|AESMC)($|\s)
    - pattern: (^|\s+)(SHA1C|SHA1H|SHA1M|SHA1P|SHA1SU0|SHA1SU1)($|\s)
    - pattern: (^|\s+)(SHA256H|SHA256H2|SHA256SU0|SHA256SU1)($|\s)
    - pattern: (^|\s+)(SHA512H|SHA512H2|SHA512SU0|SHA512SU1)($|\s)
    - pattern: (^|\s+)(VADD|VADDP|VAND)($|\s)
    - pattern: (^|\s+)(VBIF|VBCAX)($|\s)
    - pattern: (^|\s+)(VCMEQ|VCNT)($|\s)
    - pattern: (^|\s+)(VEOR|VEOR3|VMOV)($|\s)
    - pattern: (^|\s+)(VLD1|VLD2|VLD3|VLD4)($|\s)
    - pattern: (^|\s+)(VLD1R|VLD2R|VLD3R|VLD4R)($|\s)
    - pattern: (^|\s+)(VORR|VREV16|VREV32|VREV64)($|\s)
    - pattern: (^|\s+)(VST1|VST2|VST3|VST4)($|\s)
    - pattern: (^|\s+)(VDUP|VADDV|VMOVI|VUADDLV|VSUB)($|\s)
    - pattern: (^|\s+)(VFMLA|VFMLS|VPMULL|VPMULL2)($|\s)
    - pattern: (^|\s+)(VEXT|VRBIT|VRAX1)($|\s)
    - pattern: (^|\s+)(VUSHR|VUSHLL|VUSHLL2)($|\s)
    - pattern: (^|\s+)(VUXTL|VUXTL2|VUZP1|VUZP2)($|\s)
    - pattern: (^|\s+)(VSHL|VSRI|VSLI)($|\s)
    - pattern: (^|\s+)(VBSL|VBIT|VTBL|VXAR)($|\s)
    - pattern: (^|\s+)(VZIP1|VZIP2|VCMTST)($|\s)
    - pattern: (^|\s+)(VUADDW2|VUADDW|VUSRA)($|\s)
