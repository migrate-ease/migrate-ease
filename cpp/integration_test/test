#!/usr/bin/env bash

test_root=$(cd `dirname $0`; pwd)
cpp_scanner_dir="${test_root}/.."
RED=$(printf '\033[0;31m')
RED_BOLD=$(printf '\033[1;31m')
RED_LIGHT=$(printf '\033[91m')

GREEN=$(printf '\033[0;32m')
GREEN_BOLD=$(printf '\033[1;32m')
GREEN_LIGHT=$(printf '\033[92m')
ENDMARK=$(printf '\033[m')

cases="$@"
[[ "$cases" = "" ]] && cases=$(ls | grep "test_[0-9]*")

for c in $cases ; do

    if [[ "$c" == "test_9" ]]; then
        echo $GREEN"$c is deprecated, skip."$ENDMARK
        continue
    fi

    echo "=============== Running $c ... ==============="

    cd "$c"

    if [[ -e "disabled" ]]; then
        echo $GREEN"$c is disabled, skip."$ENDMARK
        cd "$test_root"
        continue
    fi

    archs=""
    if [[ -d "./aarch64" ]]; then
        archs+=" aarch64"
    fi


    if [[ -d "./armv8.6-a+sve2" ]]; then
        archs+=" armv8.6-a+sve2"
    fi

    if [[ "$archs" = "" ]]; then
        echo $GREEN"$c is empty, skip."$ENDMARK
        cd "$test_root"
        continue
    fi

    for arch in $archs; do
        echo "running sub-test: $arch"

        if [[ "$arch" = "armv8.6-a+sve2" ]]; then
            for level in L1 L2; do
                for compiler in gcc clang; do
                    echo "running test for warning-level $level-$compiler"
                    python3 "$test_root"/../cpp_scanner.py \
                      --output-format json \
                      --output "./$arch/$level-$compiler/$arch.json" \
                      --arch "$arch" \
                      --warning-level "$level" \
                      --target-compiler "$compiler" \
                      "./$arch/$level-$compiler"
                    if [[ "$?" = "0" ]]; then
                      python3 "$test_root"/scanner_diff.py \
                        --src-dir "./$arch/$level-$compiler/" \
                        --json-report "./$arch/$level-$compiler/$arch.json"
                    fi
                done
            done
            continue
        fi
        python3 "$test_root"/../cpp_scanner.py --output-format json --output "./$arch/$arch.json" --arch "$arch" ./"$arch"

        if [[ "$?" = "0" ]]; then
            python3 "$test_root"/scanner_diff.py --src-dir "./$arch/" --json-report "./$arch/$arch.json"
        fi
    done

    cd "$test_root"
done
